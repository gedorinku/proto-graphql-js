// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`deprecation with native protobuf generates nexus DSLs: deprecation/deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

import * as _$testapis$deprecation$deprecation_pb from \\"./testapis/deprecation/deprecation_pb\\";
export const DeprecatedMessage = builder.objectRef<_$testapis$deprecation$deprecation_pb.DeprecatedMessage>(\\"DeprecatedMessage\\");
builder.objectType(DeprecatedMessage, {
    name: \\"DeprecatedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"NotDeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$deprecation_pb.DeprecatedMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedMessage\\";
    }
});
export const NotDeprecatedMessage = builder.objectRef<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage>(\\"NotDeprecatedMessage\\");
builder.objectType(NotDeprecatedMessage, {
    name: \\"NotDeprecatedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        }),
        notDeprecatedOneof: t.expose(\\"notDeprecatedOneof\\", {
            type: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
            nullable: true
        }),
        deprecatedOneof: t.expose(\\"deprecatedOneof\\", {
            type: \\"NotDeprecatedMessageDeprecatedOneof\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage\\";
    }
});
export const DeprecatedMessageInnerMessage = builder.objectRef<_$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage>(\\"DeprecatedMessageInnerMessage\\");
builder.objectType(DeprecatedMessageInnerMessage, {
    name: \\"DeprecatedMessageInnerMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedMessage.InnerMessage\\";
    }
});
export const NotDeprecatedMessageInnerMessage1 = builder.objectRef<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1>(\\"NotDeprecatedMessageInnerMessage1\\");
builder.objectType(NotDeprecatedMessageInnerMessage1, {
    name: \\"NotDeprecatedMessageInnerMessage1\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1 | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage.InnerMessage1\\";
    }
});
export const NotDeprecatedMessageInnerMessage2 = builder.objectRef<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2>(\\"NotDeprecatedMessageInnerMessage2\\");
builder.objectType(NotDeprecatedMessageInnerMessage2, {
    name: \\"NotDeprecatedMessageInnerMessage2\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage.InnerMessage2\\";
    }
});
export const DeprecatedMessageInput = builder.inputRef<Omit<_$testapis$deprecation$deprecation_pb.DeprecatedMessage, \\"$type\\">>(\\"DeprecatedMessageInput\\");
DeprecatedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"NotDeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const NotDeprecatedMessageInput = builder.inputRef<Omit<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage, \\"$type\\">>(\\"NotDeprecatedMessageInput\\");
NotDeprecatedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        }),
        msg1: t.expose(\\"msg1\\", {
            type: \\"NotDeprecatedMessageInnerMessage1Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.\\"
        }),
        msg2: t.expose(\\"msg2\\", {
            type: \\"NotDeprecatedMessageInnerMessage2Input\\",
            nullable: true
        }),
        msg3: t.expose(\\"msg3\\", {
            type: \\"NotDeprecatedMessageInnerMessage1Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.\\"
        }),
        msg4: t.expose(\\"msg4\\", {
            type: \\"NotDeprecatedMessageInnerMessage2Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const DeprecatedMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage, \\"$type\\">>(\\"DeprecatedMessageInnerMessageInput\\");
DeprecatedMessageInnerMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const NotDeprecatedMessageInnerMessage1Input = builder.inputRef<Omit<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1, \\"$type\\">>(\\"NotDeprecatedMessageInnerMessage1Input\\");
NotDeprecatedMessageInnerMessage1Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const NotDeprecatedMessageInnerMessage2Input = builder.inputRef<Omit<_$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2, \\"$type\\">>(\\"NotDeprecatedMessageInnerMessage2Input\\");
NotDeprecatedMessageInnerMessage2Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const NotDeprecatedMessageNotDeprecatedOneof = builder.unionType({
    name: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
    types: [
        \\"NotDeprecatedMessageInnerMessage1\\",
        \\"NotDeprecatedMessageInnerMessage2\\"
    ]
});
export const NotDeprecatedMessageDeprecatedOneof = builder.unionType({
    name: \\"NotDeprecatedMessageDeprecatedOneof\\",
    types: [
        \\"NotDeprecatedMessageInnerMessage1\\",
        \\"NotDeprecatedMessageInnerMessage2\\"
    ]
});
export const NotDeprecatedEnum = builder.enumType(\\"NotDeprecatedEnum\\", {
    values: {
        NOT_DEPRECATED_FOO: {
            value: 1
        },
        DEPRECATED_BAR: {
            deprecation: \\"testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    }
});
export const DeprecatedEnum = builder.enumType(\\"DeprecatedEnum\\", {
    values: {
        DEPRECATED_BAZ: {
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 1
        },
        DEPRECATED_QUX: {
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    }
});
"
`;

exports[`deprecation with native protobuf generates nexus DSLs: deprecation/file_deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

import * as _$testapis$deprecation$file_deprecation_pb from \\"./testapis/deprecation/file_deprecation_pb\\";
export const DeprecatedFileMessage = builder.objectRef<_$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage>(\\"DeprecatedFileMessage\\");
builder.objectType(DeprecatedFileMessage, {
    name: \\"DeprecatedFileMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedFileEnum\\",
            nullable: true,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedFileMessage\\";
    }
});
export const DeprecatedFileMessageInnerMessage = builder.objectRef<_$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage>(\\"DeprecatedFileMessageInnerMessage\\");
builder.objectType(DeprecatedFileMessageInnerMessage, {
    name: \\"DeprecatedFileMessageInnerMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedFileMessage.InnerMessage\\";
    }
});
export const DeprecatedFileMessageInput = builder.inputRef<Omit<_$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage, \\"$type\\">>(\\"DeprecatedFileMessageInput\\");
DeprecatedFileMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedFileEnum\\",
            nullable: true,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    })
});
export const DeprecatedFileMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage, \\"$type\\">>(\\"DeprecatedFileMessageInnerMessageInput\\");
DeprecatedFileMessageInnerMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    })
});
export const DeprecatedFileEnum = builder.enumType(\\"DeprecatedFileEnum\\", {
    values: {
        DEPRECATED_FILE_FOO: {
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 1
        },
        DEPRECATED_FILE_BAR: {
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 2
        }
    }
});
"
`;

exports[`deprecation with protobufjs generates nexus DSLs: deprecation/deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

import * as _$testapis$deprecation from \\"./testapis/deprecation\\";
export const DeprecatedMessage = builder.objectRef<_$testapis$deprecation.testapis.deprecation.DeprecatedMessage>(\\"DeprecatedMessage\\");
builder.objectType(DeprecatedMessage, {
    name: \\"DeprecatedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"NotDeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.DeprecatedMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedMessage\\";
    }
});
export const NotDeprecatedMessage = builder.objectRef<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage>(\\"NotDeprecatedMessage\\");
builder.objectType(NotDeprecatedMessage, {
    name: \\"NotDeprecatedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        }),
        notDeprecatedOneof: t.expose(\\"notDeprecatedOneof\\", {
            type: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
            nullable: true
        }),
        deprecatedOneof: t.expose(\\"deprecatedOneof\\", {
            type: \\"NotDeprecatedMessageDeprecatedOneof\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage\\";
    }
});
export const DeprecatedMessageInnerMessage = builder.objectRef<_$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage>(\\"DeprecatedMessageInnerMessage\\");
builder.objectType(DeprecatedMessageInnerMessage, {
    name: \\"DeprecatedMessageInnerMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedMessage.InnerMessage\\";
    }
});
export const NotDeprecatedMessageInnerMessage1 = builder.objectRef<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1>(\\"NotDeprecatedMessageInnerMessage1\\");
builder.objectType(NotDeprecatedMessageInnerMessage1, {
    name: \\"NotDeprecatedMessageInnerMessage1\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1 | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage.InnerMessage1\\";
    }
});
export const NotDeprecatedMessageInnerMessage2 = builder.objectRef<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2>(\\"NotDeprecatedMessageInnerMessage2\\");
builder.objectType(NotDeprecatedMessageInnerMessage2, {
    name: \\"NotDeprecatedMessageInnerMessage2\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.NotDeprecatedMessage.InnerMessage2\\";
    }
});
export const DeprecatedMessageInput = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.DeprecatedMessage, \\"$type\\">>(\\"DeprecatedMessageInput\\");
DeprecatedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"NotDeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const NotDeprecatedMessageInput = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage, \\"$type\\">>(\\"NotDeprecatedMessageInput\\");
NotDeprecatedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedEnum\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        }),
        msg1: t.expose(\\"msg1\\", {
            type: \\"NotDeprecatedMessageInnerMessage1Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.\\"
        }),
        msg2: t.expose(\\"msg2\\", {
            type: \\"NotDeprecatedMessageInnerMessage2Input\\",
            nullable: true
        }),
        msg3: t.expose(\\"msg3\\", {
            type: \\"NotDeprecatedMessageInnerMessage1Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.\\"
        }),
        msg4: t.expose(\\"msg4\\", {
            type: \\"NotDeprecatedMessageInnerMessage2Input\\",
            nullable: true,
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const DeprecatedMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage, \\"$type\\">>(\\"DeprecatedMessageInnerMessageInput\\");
DeprecatedMessageInnerMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        })
    })
});
export const NotDeprecatedMessageInnerMessage1Input = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1, \\"$type\\">>(\\"NotDeprecatedMessageInnerMessage1Input\\");
NotDeprecatedMessageInnerMessage1Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const NotDeprecatedMessageInnerMessage2Input = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2, \\"$type\\">>(\\"NotDeprecatedMessageInnerMessage2Input\\");
NotDeprecatedMessageInnerMessage2Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const NotDeprecatedMessageNotDeprecatedOneof = builder.unionType({
    name: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
    types: [
        \\"NotDeprecatedMessageInnerMessage1\\",
        \\"NotDeprecatedMessageInnerMessage2\\"
    ]
});
export const NotDeprecatedMessageDeprecatedOneof = builder.unionType({
    name: \\"NotDeprecatedMessageDeprecatedOneof\\",
    types: [
        \\"NotDeprecatedMessageInnerMessage1\\",
        \\"NotDeprecatedMessageInnerMessage2\\"
    ]
});
export const NotDeprecatedEnum = builder.enumType(\\"NotDeprecatedEnum\\", {
    values: {
        NOT_DEPRECATED_FOO: {
            value: 1
        },
        DEPRECATED_BAR: {
            deprecation: \\"testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    }
});
export const DeprecatedEnum = builder.enumType(\\"DeprecatedEnum\\", {
    values: {
        DEPRECATED_BAZ: {
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 1
        },
        DEPRECATED_QUX: {
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    }
});
"
`;

exports[`deprecation with protobufjs generates nexus DSLs: deprecation/file_deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

import * as _$testapis$deprecation from \\"./testapis/deprecation\\";
export const DeprecatedFileMessage = builder.objectRef<_$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage>(\\"DeprecatedFileMessage\\");
builder.objectType(DeprecatedFileMessage, {
    name: \\"DeprecatedFileMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedFileEnum\\",
            nullable: true,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedFileMessage\\";
    }
});
export const DeprecatedFileMessageInnerMessage = builder.objectRef<_$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage>(\\"DeprecatedFileMessageInnerMessage\\");
builder.objectType(DeprecatedFileMessageInnerMessage, {
    name: \\"DeprecatedFileMessageInnerMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.DeprecatedFileMessage.InnerMessage\\";
    }
});
export const DeprecatedFileMessageInput = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage, \\"$type\\">>(\\"DeprecatedFileMessageInput\\");
DeprecatedFileMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"DeprecatedFileEnum\\",
            nullable: true,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    })
});
export const DeprecatedFileMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage, \\"$type\\">>(\\"DeprecatedFileMessageInnerMessageInput\\");
DeprecatedFileMessageInnerMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        })
    })
});
export const DeprecatedFileEnum = builder.enumType(\\"DeprecatedFileEnum\\", {
    values: {
        DEPRECATED_FILE_FOO: {
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 1
        },
        DEPRECATED_FILE_BAR: {
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 2
        }
    }
});
"
`;

exports[`empty types with native protobuf generates nexus DSLs: empty_types/empty_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

import * as _$testapis$empty_types$empty_pb from \\"./testapis/empty_types/empty_pb\\";
export const EmptyMessage = builder.objectRef<_$testapis$empty_types$empty_pb.EmptyMessage>(\\"EmptyMessage\\");
builder.objectType(EmptyMessage, {
    name: \\"EmptyMessage\\",
    fields: t => ({
        _: t.field({
            type: \\"Boolean\\",
            nullable: true,
            description: \\"noop field\\",
            resolve() { return true; }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$empty_types$empty_pb.EmptyMessage | {
            $type: string & {};
        }).$type === \\"testapis.empty_types.EmptyMessage\\";
    }
});
export const EmptyMessageInput = builder.inputRef<Omit<_$testapis$empty_types$empty_pb.EmptyMessage, \\"$type\\">>(\\"EmptyMessageInput\\");
EmptyMessageInput.implement({
    fields: t => ({
        _: t.field({
            type: \\"Boolean\\",
            nullable: true,
            description: \\"noop field\\"
        })
    })
});
"
`;

exports[`empty types with protobufjs generates nexus DSLs: empty_types/empty_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

import * as _$testapis$empty_types from \\"./testapis/empty_types\\";
export const EmptyMessage = builder.objectRef<_$testapis$empty_types.testapis.empty_types.EmptyMessage>(\\"EmptyMessage\\");
builder.objectType(EmptyMessage, {
    name: \\"EmptyMessage\\",
    fields: t => ({
        _: t.field({
            type: \\"Boolean\\",
            nullable: true,
            description: \\"noop field\\",
            resolve() { return true; }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$empty_types.testapis.empty_types.EmptyMessage | {
            $type: string & {};
        }).$type === \\"testapis.empty_types.EmptyMessage\\";
    }
});
export const EmptyMessageInput = builder.inputRef<Omit<_$testapis$empty_types.testapis.empty_types.EmptyMessage, \\"$type\\">>(\\"EmptyMessageInput\\");
EmptyMessageInput.implement({
    fields: t => ({
        _: t.field({
            type: \\"Boolean\\",
            nullable: true,
            description: \\"noop field\\"
        })
    })
});
"
`;

exports[`field_behavior with native protobuf generates nexus DSLs: field_behavior/comments_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

import * as _$testapis$field_behavior$comments_pb from \\"./testapis/field_behavior/comments_pb\\";
export const FieldBehaviorComentsMessage = builder.objectRef<_$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage>(\\"FieldBehaviorComentsMessage\\");
builder.objectType(FieldBehaviorComentsMessage, {
    name: \\"FieldBehaviorComentsMessage\\",
    fields: t => ({
        requiredField: t.expose(\\"requiredField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        requiredOutputOnlyField: t.expose(\\"requiredOutputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Required. Output only.\\"
        }),
        outputOnlyRequiredField: t.expose(\\"outputOnlyRequiredField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Output only. Required.\\"
        }),
        outputOnlyField: t.expose(\\"outputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: true,
            description: \\"Output only.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.FieldBehaviorComentsMessage\\";
    }
});
export const FieldBehaviorComentsMessagePost = builder.objectRef<_$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post>(\\"FieldBehaviorComentsMessagePost\\");
builder.objectType(FieldBehaviorComentsMessagePost, {
    name: \\"FieldBehaviorComentsMessagePost\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.FieldBehaviorComentsMessage.Post\\";
    }
});
export const FieldBehaviorComentsMessageInput = builder.inputRef<Omit<_$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage, \\"$type\\">>(\\"FieldBehaviorComentsMessageInput\\");
FieldBehaviorComentsMessageInput.implement({
    fields: t => ({
        requiredField: t.expose(\\"requiredField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        requiredInputOnlyField: t.expose(\\"requiredInputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Required. Input only.\\"
        }),
        inputOnlyRequiredField: t.expose(\\"inputOnlyRequiredField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Input only. Required.\\"
        }),
        inputOnlyField: t.expose(\\"inputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: true,
            description: \\"Input only.\\"
        })
    })
});
export const FieldBehaviorComentsMessagePostInput = builder.inputRef<Omit<_$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post, \\"$type\\">>(\\"FieldBehaviorComentsMessagePostInput\\");
FieldBehaviorComentsMessagePostInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`field_behavior with protobufjs generates nexus DSLs: field_behavior/comments_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

import * as _$testapis$field_behavior from \\"./testapis/field_behavior\\";
export const FieldBehaviorComentsMessage = builder.objectRef<_$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage>(\\"FieldBehaviorComentsMessage\\");
builder.objectType(FieldBehaviorComentsMessage, {
    name: \\"FieldBehaviorComentsMessage\\",
    fields: t => ({
        requiredField: t.expose(\\"requiredField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        requiredOutputOnlyField: t.expose(\\"requiredOutputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Required. Output only.\\"
        }),
        outputOnlyRequiredField: t.expose(\\"outputOnlyRequiredField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: false,
            description: \\"Output only. Required.\\"
        }),
        outputOnlyField: t.expose(\\"outputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePost\\",
            nullable: true,
            description: \\"Output only.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.FieldBehaviorComentsMessage\\";
    }
});
export const FieldBehaviorComentsMessagePost = builder.objectRef<_$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post>(\\"FieldBehaviorComentsMessagePost\\");
builder.objectType(FieldBehaviorComentsMessagePost, {
    name: \\"FieldBehaviorComentsMessagePost\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post | {
            $type: string & {};
        }).$type === \\"testapis.deprecation.FieldBehaviorComentsMessage.Post\\";
    }
});
export const FieldBehaviorComentsMessageInput = builder.inputRef<Omit<_$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage, \\"$type\\">>(\\"FieldBehaviorComentsMessageInput\\");
FieldBehaviorComentsMessageInput.implement({
    fields: t => ({
        requiredField: t.expose(\\"requiredField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        requiredInputOnlyField: t.expose(\\"requiredInputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Required. Input only.\\"
        }),
        inputOnlyRequiredField: t.expose(\\"inputOnlyRequiredField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: false,
            description: \\"Input only. Required.\\"
        }),
        inputOnlyField: t.expose(\\"inputOnlyField\\", {
            type: \\"FieldBehaviorComentsMessagePostInput\\",
            nullable: true,
            description: \\"Input only.\\"
        })
    })
});
export const FieldBehaviorComentsMessagePostInput = builder.inputRef<Omit<_$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post, \\"$type\\">>(\\"FieldBehaviorComentsMessagePostInput\\");
FieldBehaviorComentsMessagePostInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`multipkgs with native protobuf generates nexus DSLs: multipkgs/subpkg1/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

import * as _$testapis$multipkgs$subpkg1$types_pb from \\"./testapis/multipkgs/subpkg1/types_pb\\";
export const SubpkgMessage = builder.objectRef<_$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage>(\\"SubpkgMessage\\");
builder.objectType(SubpkgMessage, {
    name: \\"SubpkgMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage | {
            $type: string & {};
        }).$type === \\"testapis.multipkgs.subpkg1.SubpkgMessage\\";
    }
});
export const SubpkgMessageInput = builder.inputRef<Omit<_$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage, \\"$type\\">>(\\"SubpkgMessageInput\\");
SubpkgMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const SubpkgEnum = builder.enumType(\\"SubpkgEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            value: 2
        }
    }
});
"
`;

exports[`multipkgs with native protobuf generates nexus DSLs: multipkgs/subpkg2/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

import * as __$subpkg1$types_pb_nexus from \\"../subpkg1/types_pb_nexus\\";
import * as _$testapis$multipkgs$subpkg1$types_pb from \\"./testapis/multipkgs/subpkg1/types_pb\\";
import * as _$testapis$multipkgs$subpkg2$types_pb from \\"./testapis/multipkgs/subpkg2/types_pb\\";
export const MessageWithSubpkg = builder.objectRef<_$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg>(\\"MessageWithSubpkg\\");
builder.objectType(MessageWithSubpkg, {
    name: \\"MessageWithSubpkg\\",
    fields: t => ({
        message: t.expose(\\"message\\", {
            type: \\"SubpkgMessage\\",
            nullable: true
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"SubpkgEnum\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg | {
            $type: string & {};
        }).$type === \\"testapis.multipkgs.subpkg1.MessageWithSubpkg\\";
    }
});
export const MessageWithSubpkgInput = builder.inputRef<Omit<_$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg, \\"$type\\">>(\\"MessageWithSubpkgInput\\");
MessageWithSubpkgInput.implement({
    fields: t => ({
        message: t.expose(\\"message\\", {
            type: \\"SubpkgMessageInput\\",
            nullable: true
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"SubpkgEnum\\",
            nullable: true
        })
    })
});
"
`;

exports[`multipkgs with protobufjs generates nexus DSLs: multipkgs/subpkg1/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

import * as _$testapis$multipkgs$subpkg1 from \\"./testapis/multipkgs/subpkg1\\";
export const SubpkgMessage = builder.objectRef<_$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage>(\\"SubpkgMessage\\");
builder.objectType(SubpkgMessage, {
    name: \\"SubpkgMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage | {
            $type: string & {};
        }).$type === \\"testapis.multipkgs.subpkg1.SubpkgMessage\\";
    }
});
export const SubpkgMessageInput = builder.inputRef<Omit<_$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage, \\"$type\\">>(\\"SubpkgMessageInput\\");
SubpkgMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const SubpkgEnum = builder.enumType(\\"SubpkgEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            value: 2
        }
    }
});
"
`;

exports[`multipkgs with protobufjs generates nexus DSLs: multipkgs/subpkg2/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

import * as __$subpkg1$types_pb_nexus from \\"../subpkg1/types_pb_nexus\\";
import * as _$testapis$multipkgs$subpkg1 from \\"./testapis/multipkgs/subpkg1\\";
import * as _$testapis$multipkgs$subpkg2 from \\"./testapis/multipkgs/subpkg2\\";
export const MessageWithSubpkg = builder.objectRef<_$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg>(\\"MessageWithSubpkg\\");
builder.objectType(MessageWithSubpkg, {
    name: \\"MessageWithSubpkg\\",
    fields: t => ({
        message: t.expose(\\"message\\", {
            type: \\"SubpkgMessage\\",
            nullable: true
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"SubpkgEnum\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg | {
            $type: string & {};
        }).$type === \\"testapis.multipkgs.subpkg1.MessageWithSubpkg\\";
    }
});
export const MessageWithSubpkgInput = builder.inputRef<Omit<_$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg, \\"$type\\">>(\\"MessageWithSubpkgInput\\");
MessageWithSubpkgInput.implement({
    fields: t => ({
        message: t.expose(\\"message\\", {
            type: \\"SubpkgMessageInput\\",
            nullable: true
        }),
        enum: t.expose(\\"enum\\", {
            type: \\"SubpkgEnum\\",
            nullable: true
        })
    })
});
"
`;

exports[`nested protobuf types with native protobuf generates nexus DSLs: nested/nested_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/nested/nested.proto

import * as _$testapis$nested$nested_pb from \\"./testapis/nested/nested_pb\\";
export const ParentMessage = builder.objectRef<_$testapis$nested$nested_pb.ParentMessage>(\\"ParentMessage\\");
builder.objectType(ParentMessage, {
    name: \\"ParentMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        nested: t.expose(\\"nested\\", {
            type: \\"ParentMessageNestedMessage\\",
            nullable: true
        }),
        nestedEnum: t.expose(\\"nestedEnum\\", {
            type: \\"ParentMessageNestedEnum\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$nested$nested_pb.ParentMessage | {
            $type: string & {};
        }).$type === \\"testapis.nested.ParentMessage\\";
    }
});
export const ParentMessageNestedMessage = builder.objectRef<_$testapis$nested$nested_pb.ParentMessage.NestedMessage>(\\"ParentMessageNestedMessage\\");
builder.objectType(ParentMessageNestedMessage, {
    name: \\"ParentMessageNestedMessage\\",
    fields: t => ({
        nestedBody: t.expose(\\"nestedBody\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$nested$nested_pb.ParentMessage.NestedMessage | {
            $type: string & {};
        }).$type === \\"testapis.nested.ParentMessage.NestedMessage\\";
    }
});
export const ParentMessageInput = builder.inputRef<Omit<_$testapis$nested$nested_pb.ParentMessage, \\"$type\\">>(\\"ParentMessageInput\\");
ParentMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        nested: t.expose(\\"nested\\", {
            type: \\"ParentMessageNestedMessageInput\\",
            nullable: true
        }),
        nestedEnum: t.expose(\\"nestedEnum\\", {
            type: \\"ParentMessageNestedEnum\\",
            nullable: true
        })
    })
});
export const ParentMessageNestedMessageInput = builder.inputRef<Omit<_$testapis$nested$nested_pb.ParentMessage.NestedMessage, \\"$type\\">>(\\"ParentMessageNestedMessageInput\\");
ParentMessageNestedMessageInput.implement({
    fields: t => ({
        nestedBody: t.expose(\\"nestedBody\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const ParentMessageNestedEnum = builder.enumType(\\"ParentMessageNestedEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            value: 2
        }
    }
});
"
`;

exports[`nested protobuf types with protobufjs generates nexus DSLs: nested/nested_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/nested/nested.proto

import * as _$testapis$nested from \\"./testapis/nested\\";
export const ParentMessage = builder.objectRef<_$testapis$nested.testapis.nested.ParentMessage>(\\"ParentMessage\\");
builder.objectType(ParentMessage, {
    name: \\"ParentMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        nested: t.expose(\\"nested\\", {
            type: \\"ParentMessageNestedMessage\\",
            nullable: true
        }),
        nestedEnum: t.expose(\\"nestedEnum\\", {
            type: \\"ParentMessageNestedEnum\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$nested.testapis.nested.ParentMessage | {
            $type: string & {};
        }).$type === \\"testapis.nested.ParentMessage\\";
    }
});
export const ParentMessageNestedMessage = builder.objectRef<_$testapis$nested.testapis.nested.ParentMessage.NestedMessage>(\\"ParentMessageNestedMessage\\");
builder.objectType(ParentMessageNestedMessage, {
    name: \\"ParentMessageNestedMessage\\",
    fields: t => ({
        nestedBody: t.expose(\\"nestedBody\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$nested.testapis.nested.ParentMessage.NestedMessage | {
            $type: string & {};
        }).$type === \\"testapis.nested.ParentMessage.NestedMessage\\";
    }
});
export const ParentMessageInput = builder.inputRef<Omit<_$testapis$nested.testapis.nested.ParentMessage, \\"$type\\">>(\\"ParentMessageInput\\");
ParentMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        nested: t.expose(\\"nested\\", {
            type: \\"ParentMessageNestedMessageInput\\",
            nullable: true
        }),
        nestedEnum: t.expose(\\"nestedEnum\\", {
            type: \\"ParentMessageNestedEnum\\",
            nullable: true
        })
    })
});
export const ParentMessageNestedMessageInput = builder.inputRef<Omit<_$testapis$nested.testapis.nested.ParentMessage.NestedMessage, \\"$type\\">>(\\"ParentMessageNestedMessageInput\\");
ParentMessageNestedMessageInput.implement({
    fields: t => ({
        nestedBody: t.expose(\\"nestedBody\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const ParentMessageNestedEnum = builder.enumType(\\"ParentMessageNestedEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixIgnoredMessageNotIgnored.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixIgnoredMessageNotIgnored = builder.objectRef<_$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored>(\\"TestPrefixIgnoredMessageNotIgnored\\");
builder.objectType(TestPrefixIgnoredMessageNotIgnored, {
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored | {
            $type: string & {};
        }).$type === \\"testapis.extensions.IgnoredMessage.NotIgnored\\";
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixIgnoredMessageNotIgnoredInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

export const TestPrefixIgnoredMessageNotIgnoredInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored, \\"$type\\">>(\\"TestPrefixIgnoredMessageNotIgnoredInput\\");
TestPrefixIgnoredMessageNotIgnoredInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixInterfaceMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.InterfaceMessage>(\\"TestPrefixInterfaceMessage\\");
builder.objectType(TestPrefixInterfaceMessage, {
    name: \\"TestPrefixInterfaceMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
export const TestPrefixInterfaceMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.InterfaceMessage, \\"$type\\">>(\\"TestPrefixInterfaceMessageInput\\");
TestPrefixInterfaceMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessageType.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

export const TestPrefixInterfaceMessageType = builder.enumType(\\"TestPrefixInterfaceMessageType\\", {
    values: {
        INNER: {
            value: 1
        },
        INNER2: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedEnum.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

export const TestPrefixPrefixedEnum = builder.enumType(\\"TestPrefixPrefixedEnum\\", {
    values: {
        PREFIXED_FOO: {
            value: 1
        },
        PREFIXED_BAR: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$TestPrefixIgnoredMessageNotIgnored_nexus from \\"./TestPrefixIgnoredMessageNotIgnored.nexus\\";
import * as _$TestPrefixPrefixedEnum_nexus from \\"./TestPrefixPrefixedEnum.nexus\\";
import * as _$TestPrefixPrefixedMessagePartialIgnoreOneof_nexus from \\"./TestPrefixPrefixedMessagePartialIgnoreOneof.nexus\\";
import * as _$TestPrefixPrefixedMessageSquashedMessage_nexus from \\"./TestPrefixPrefixedMessageSquashedMessage.nexus\\";
import * as _$TestPrefixRenamedMessage_nexus from \\"./TestPrefixRenamedMessage.nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixPrefixedMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage>(\\"TestPrefixPrefixedMessage\\");
builder.objectType(TestPrefixPrefixedMessage, {
    name: \\"TestPrefixPrefixedMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Output only.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnored\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessage\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessage\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessage\\",
            nullable: true
        }),
        partialIgnoreOneof: t.expose(\\"partialIgnoreOneof\\", {
            type: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage\\";
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixPrefixedMessageInnerMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage>(\\"TestPrefixPrefixedMessageInnerMessage\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage, {
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage\\";
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage2.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixPrefixedMessageInnerMessage2 = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2>(\\"TestPrefixPrefixedMessageInnerMessage2\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage2, {
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage2\\";
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage2Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
export const TestPrefixPrefixedMessageInnerMessage2Input = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessage2Input\\");
TestPrefixPrefixedMessageInnerMessage2Input.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
export const TestPrefixPrefixedMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessageInput\\");
TestPrefixPrefixedMessageInnerMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$TestPrefixIgnoredMessageNotIgnoredInput_nexus from \\"./TestPrefixIgnoredMessageNotIgnoredInput.nexus\\";
import * as _$TestPrefixPrefixedEnum_nexus from \\"./TestPrefixPrefixedEnum.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessageInput_nexus from \\"./TestPrefixPrefixedMessageInnerMessageInput.nexus\\";
import * as _$TestPrefixPrefixedMessageSquashedMessageInput_nexus from \\"./TestPrefixPrefixedMessageSquashedMessageInput.nexus\\";
import * as _$TestPrefixRenamedMessageInput_nexus from \\"./TestPrefixRenamedMessageInput.nexus\\";
export const TestPrefixPrefixedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInput\\");
TestPrefixPrefixedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        oneofNotIgnoredField: t.expose(\\"oneofNotIgnoredField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessageInput\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessageInput\\",
            nullable: true
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessagePartialIgnoreOneof.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$TestPrefixPrefixedMessageInnerMessage_nexus from \\"./TestPrefixPrefixedMessageInnerMessage.nexus\\";
export const TestPrefixPrefixedMessagePartialIgnoreOneof = builder.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\"
    ]
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageSquashedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$TestPrefixPrefixedMessageInnerMessage_nexus from \\"./TestPrefixPrefixedMessageInnerMessage.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessage2_nexus from \\"./TestPrefixPrefixedMessageInnerMessage2.nexus\\";
export const TestPrefixPrefixedMessageSquashedMessage = builder.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\",
        \\"TestPrefixPrefixedMessageInnerMessage2\\"
    ]
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageSquashedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$TestPrefixPrefixedMessageInnerMessage2Input_nexus from \\"./TestPrefixPrefixedMessageInnerMessage2Input.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessageInput_nexus from \\"./TestPrefixPrefixedMessageInnerMessageInput.nexus\\";
export const TestPrefixPrefixedMessageSquashedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageSquashedMessageInput\\");
TestPrefixPrefixedMessageSquashedMessageInput.implement({
    fields: t => ({
        oneofField: t.expose(\\"oneofField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        oneofField2: t.expose(\\"oneofField_2\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
            nullable: true
        })
    })
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixRenamedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixRenamedMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.MessageWillRename>(\\"TestPrefixRenamedMessage\\");
builder.objectType(TestPrefixRenamedMessage, {
    name: \\"TestPrefixRenamedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.MessageWillRename | {
            $type: string & {};
        }).$type === \\"testapis.extensions.MessageWillRename\\";
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixRenamedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

export const TestPrefixRenamedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.MessageWillRename, \\"$type\\">>(\\"TestPrefixRenamedMessageInput\\");
TestPrefixRenamedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf custom options with native protobuf generates nexus DSLs: extensions/extensions_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$extensions$extensions_pb from \\"./testapis/extensions/extensions_pb\\";
export const TestPrefixPrefixedMessage = builder.objectRef<_$testapis$extensions$extensions_pb.PrefixedMessage>(\\"TestPrefixPrefixedMessage\\");
builder.objectType(TestPrefixPrefixedMessage, {
    name: \\"TestPrefixPrefixedMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Output only.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnored\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessage\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessage\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessage\\",
            nullable: true
        }),
        partialIgnoreOneof: t.expose(\\"partialIgnoreOneof\\", {
            type: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$extensions_pb.PrefixedMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage\\";
    }
});
export const TestPrefixRenamedMessage = builder.objectRef<_$testapis$extensions$extensions_pb.MessageWillRename>(\\"TestPrefixRenamedMessage\\");
builder.objectType(TestPrefixRenamedMessage, {
    name: \\"TestPrefixRenamedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$extensions_pb.MessageWillRename | {
            $type: string & {};
        }).$type === \\"testapis.extensions.MessageWillRename\\";
    }
});
export const TestPrefixPrefixedMessageInnerMessage = builder.objectRef<_$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage>(\\"TestPrefixPrefixedMessageInnerMessage\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage, {
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage\\";
    }
});
export const TestPrefixPrefixedMessageInnerMessage2 = builder.objectRef<_$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2>(\\"TestPrefixPrefixedMessageInnerMessage2\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage2, {
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage2\\";
    }
});
export const TestPrefixIgnoredMessageNotIgnored = builder.objectRef<_$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored>(\\"TestPrefixIgnoredMessageNotIgnored\\");
builder.objectType(TestPrefixIgnoredMessageNotIgnored, {
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored | {
            $type: string & {};
        }).$type === \\"testapis.extensions.IgnoredMessage.NotIgnored\\";
    }
});
export const TestPrefixPrefixedMessageInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.PrefixedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInput\\");
TestPrefixPrefixedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        oneofNotIgnoredField: t.expose(\\"oneofNotIgnoredField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessageInput\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessageInput\\",
            nullable: true
        })
    })
});
export const TestPrefixRenamedMessageInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.MessageWillRename, \\"$type\\">>(\\"TestPrefixRenamedMessageInput\\");
TestPrefixRenamedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixInterfaceMessageInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.InterfaceMessage, \\"$type\\">>(\\"TestPrefixInterfaceMessageInput\\");
TestPrefixInterfaceMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessageInput\\");
TestPrefixPrefixedMessageInnerMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageInnerMessage2Input = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessage2Input\\");
TestPrefixPrefixedMessageInnerMessage2Input.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageSquashedMessageInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageSquashedMessageInput\\");
TestPrefixPrefixedMessageSquashedMessageInput.implement({
    fields: t => ({
        oneofField: t.expose(\\"oneofField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        oneofField2: t.expose(\\"oneofField2\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
            nullable: true
        })
    })
});
export const TestPrefixIgnoredMessageNotIgnoredInput = builder.inputRef<Omit<_$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored, \\"$type\\">>(\\"TestPrefixIgnoredMessageNotIgnoredInput\\");
TestPrefixIgnoredMessageNotIgnoredInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixInterfaceMessage = builder.objectRef<_$testapis$extensions$extensions_pb.InterfaceMessage>(\\"TestPrefixInterfaceMessage\\");
builder.objectType(TestPrefixInterfaceMessage, {
    name: \\"TestPrefixInterfaceMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageSquashedMessage = builder.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\",
        \\"TestPrefixPrefixedMessageInnerMessage2\\"
    ]
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = builder.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\"
    ]
});
export const TestPrefixPrefixedEnum = builder.enumType(\\"TestPrefixPrefixedEnum\\", {
    values: {
        PREFIXED_FOO: {
            value: 1
        },
        PREFIXED_BAR: {
            value: 2
        }
    }
});
export const TestPrefixInterfaceMessageType = builder.enumType(\\"TestPrefixInterfaceMessageType\\", {
    values: {
        INNER: {
            value: 1
        },
        INNER2: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf custom options with native protobuf generates nexus DSLs: extensions/ignored_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

export {};
"
`;

exports[`protobuf custom options with protobufjs generates nexus DSLs: extensions/extensions_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export const TestPrefixPrefixedMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage>(\\"TestPrefixPrefixedMessage\\");
builder.objectType(TestPrefixPrefixedMessage, {
    name: \\"TestPrefixPrefixedMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Output only.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnored\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessage\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessage\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessage\\",
            nullable: true
        }),
        partialIgnoreOneof: t.expose(\\"partialIgnoreOneof\\", {
            type: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage\\";
    }
});
export const TestPrefixRenamedMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.MessageWillRename>(\\"TestPrefixRenamedMessage\\");
builder.objectType(TestPrefixRenamedMessage, {
    name: \\"TestPrefixRenamedMessage\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.MessageWillRename | {
            $type: string & {};
        }).$type === \\"testapis.extensions.MessageWillRename\\";
    }
});
export const TestPrefixPrefixedMessageInnerMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage>(\\"TestPrefixPrefixedMessageInnerMessage\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage, {
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage\\";
    }
});
export const TestPrefixPrefixedMessageInnerMessage2 = builder.objectRef<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2>(\\"TestPrefixPrefixedMessageInnerMessage2\\");
builder.objectType(TestPrefixPrefixedMessageInnerMessage2, {
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.extensions.PrefixedMessage.InnerMessage2\\";
    }
});
export const TestPrefixIgnoredMessageNotIgnored = builder.objectRef<_$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored>(\\"TestPrefixIgnoredMessageNotIgnored\\");
builder.objectType(TestPrefixIgnoredMessageNotIgnored, {
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored | {
            $type: string & {};
        }).$type === \\"testapis.extensions.IgnoredMessage.NotIgnored\\";
    }
});
export const TestPrefixPrefixedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInput\\");
TestPrefixPrefixedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        }),
        prefixedEnum: t.expose(\\"prefixedEnum\\", {
            type: \\"TestPrefixPrefixedEnum\\",
            nullable: true
        }),
        notIgnoredMessage: t.expose(\\"notIgnoredMessage\\", {
            type: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
            nullable: true
        }),
        squashedMessage: t.expose(\\"squashedMessage\\", {
            type: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
            nullable: true
        }),
        thisFieldWasRenamed: t.expose(\\"thisFieldWillBeRenamed\\", {
            type: \\"String\\",
            nullable: false
        }),
        oneofNotIgnoredField: t.expose(\\"oneofNotIgnoredField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        skipResolver: t.expose(\\"skipResolver\\", {
            type: \\"String\\",
            nullable: false
        }),
        squashedMessages: t.expose(\\"squashedMessages\\", {
            type: [\\"TestPrefixPrefixedMessageSquashedMessageInput\\"],
            nullable: { list: true, item: false }
        }),
        renamedMessage: t.expose(\\"renamedMessage\\", {
            type: \\"TestPrefixRenamedMessageInput\\",
            nullable: true
        })
    })
});
export const TestPrefixRenamedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.MessageWillRename, \\"$type\\">>(\\"TestPrefixRenamedMessageInput\\");
TestPrefixRenamedMessageInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixInterfaceMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.InterfaceMessage, \\"$type\\">>(\\"TestPrefixInterfaceMessageInput\\");
TestPrefixInterfaceMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageInnerMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessageInput\\");
TestPrefixPrefixedMessageInnerMessageInput.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageInnerMessage2Input = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2, \\"$type\\">>(\\"TestPrefixPrefixedMessageInnerMessage2Input\\");
TestPrefixPrefixedMessageInnerMessage2Input.implement({
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageSquashedMessageInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage, \\"$type\\">>(\\"TestPrefixPrefixedMessageSquashedMessageInput\\");
TestPrefixPrefixedMessageSquashedMessageInput.implement({
    fields: t => ({
        oneofField: t.expose(\\"oneofField\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
            nullable: true
        }),
        oneofField2: t.expose(\\"oneofField_2\\", {
            type: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
            nullable: true
        })
    })
});
export const TestPrefixIgnoredMessageNotIgnoredInput = builder.inputRef<Omit<_$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored, \\"$type\\">>(\\"TestPrefixIgnoredMessageNotIgnoredInput\\");
TestPrefixIgnoredMessageNotIgnoredInput.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixInterfaceMessage = builder.objectRef<_$testapis$extensions.testapis.extensions.InterfaceMessage>(\\"TestPrefixInterfaceMessage\\");
builder.objectType(TestPrefixInterfaceMessage, {
    name: \\"TestPrefixInterfaceMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const TestPrefixPrefixedMessageSquashedMessage = builder.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\",
        \\"TestPrefixPrefixedMessageInnerMessage2\\"
    ]
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = builder.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    types: [
        \\"TestPrefixPrefixedMessageInnerMessage\\"
    ]
});
export const TestPrefixPrefixedEnum = builder.enumType(\\"TestPrefixPrefixedEnum\\", {
    values: {
        PREFIXED_FOO: {
            value: 1
        },
        PREFIXED_BAR: {
            value: 2
        }
    }
});
export const TestPrefixInterfaceMessageType = builder.enumType(\\"TestPrefixInterfaceMessageType\\", {
    values: {
        INNER: {
            value: 1
        },
        INNER2: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf custom options with protobufjs generates nexus DSLs: extensions/ignored_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

export {};
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MessageWithEnums.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as _$MyEnum_nexus from \\"./MyEnum.nexus\\";
import * as _$MyEnumWithoutUnspecified_nexus from \\"./MyEnumWithoutUnspecified.nexus\\";
import * as _$testapis$enums from \\"./testapis/enums\\";
export const MessageWithEnums = builder.objectRef<_$testapis$enums.testapi.enums.MessageWithEnums>(\\"MessageWithEnums\\");
builder.objectType(MessageWithEnums, {
    name: \\"MessageWithEnums\\",
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$enums.testapi.enums.MessageWithEnums | {
            $type: string & {};
        }).$type === \\"testapi.enums.MessageWithEnums\\";
    }
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MessageWithEnumsInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as _$MyEnum_nexus from \\"./MyEnum.nexus\\";
import * as _$MyEnumWithoutUnspecified_nexus from \\"./MyEnumWithoutUnspecified.nexus\\";
export const MessageWithEnumsInput = builder.inputRef<Omit<_$testapis$enums.testapi.enums.MessageWithEnums, \\"$type\\">>(\\"MessageWithEnumsInput\\");
MessageWithEnumsInput.implement({
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MyEnum.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

export const MyEnum = builder.enumType(\\"MyEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            description: \\"This is Bar.\\",
            value: 2
        },
        BAZ: {
            value: 3
        }
    }
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MyEnumWithoutUnspecified.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

export const MyEnumWithoutUnspecified = builder.enumType(\\"MyEnumWithoutUnspecified\\", {
    values: {
        FOO: {
            value: 0
        },
        BAR: {
            value: 1
        },
        BAZ: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf enums with native protobuf generates nexus DSLs: enums/enums_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as _$testapis$enums$enums_pb from \\"./testapis/enums/enums_pb\\";
export const MessageWithEnums = builder.objectRef<_$testapis$enums$enums_pb.MessageWithEnums>(\\"MessageWithEnums\\");
builder.objectType(MessageWithEnums, {
    name: \\"MessageWithEnums\\",
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$enums$enums_pb.MessageWithEnums | {
            $type: string & {};
        }).$type === \\"testapi.enums.MessageWithEnums\\";
    }
});
export const MessageWithEnumsInput = builder.inputRef<Omit<_$testapis$enums$enums_pb.MessageWithEnums, \\"$type\\">>(\\"MessageWithEnumsInput\\");
MessageWithEnumsInput.implement({
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const MyEnum = builder.enumType(\\"MyEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            description: \\"This is Bar.\\",
            value: 2
        },
        BAZ: {
            value: 3
        }
    }
});
export const MyEnumWithoutUnspecified = builder.enumType(\\"MyEnumWithoutUnspecified\\", {
    values: {
        FOO: {
            value: 0
        },
        BAR: {
            value: 1
        },
        BAZ: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf enums with protobufjs generates nexus DSLs: enums/enums_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as _$testapis$enums from \\"./testapis/enums\\";
export const MessageWithEnums = builder.objectRef<_$testapis$enums.testapi.enums.MessageWithEnums>(\\"MessageWithEnums\\");
builder.objectType(MessageWithEnums, {
    name: \\"MessageWithEnums\\",
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$enums.testapi.enums.MessageWithEnums | {
            $type: string & {};
        }).$type === \\"testapi.enums.MessageWithEnums\\";
    }
});
export const MessageWithEnumsInput = builder.inputRef<Omit<_$testapis$enums.testapi.enums.MessageWithEnums, \\"$type\\">>(\\"MessageWithEnumsInput\\");
MessageWithEnumsInput.implement({
    fields: t => ({
        requiredMyEnum: t.expose(\\"requiredMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnum: t.expose(\\"optionalMyEnum\\", {
            type: \\"MyEnum\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecified: t.expose(\\"requiredMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecified: t.expose(\\"optionalMyEnumWithoutUnspecified\\", {
            type: \\"MyEnumWithoutUnspecified\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredMyEnums: t.expose(\\"requiredMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnums: t.expose(\\"optionalMyEnums\\", {
            type: [\\"MyEnum\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        }),
        requiredMyEnumWithoutUnspecifieds: t.expose(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalMyEnumWithoutUnspecifieds: t.expose(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: [\\"MyEnumWithoutUnspecified\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const MyEnum = builder.enumType(\\"MyEnum\\", {
    values: {
        FOO: {
            value: 1
        },
        BAR: {
            description: \\"This is Bar.\\",
            value: 2
        },
        BAZ: {
            value: 3
        }
    }
});
export const MyEnumWithoutUnspecified = builder.enumType(\\"MyEnumWithoutUnspecified\\", {
    values: {
        FOO: {
            value: 0
        },
        BAR: {
            value: 1
        },
        BAZ: {
            value: 2
        }
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage1.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$testapis$oneof from \\"./testapis/oneof\\";
export const OneofMemberMessage1 = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofMemberMessage1>(\\"OneofMemberMessage1\\");
builder.objectType(OneofMemberMessage1, {
    name: \\"OneofMemberMessage1\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofMemberMessage1 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage1\\";
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage1Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

export const OneofMemberMessage1Input = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofMemberMessage1, \\"$type\\">>(\\"OneofMemberMessage1Input\\");
OneofMemberMessage1Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage2.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$testapis$oneof from \\"./testapis/oneof\\";
export const OneofMemberMessage2 = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofMemberMessage2>(\\"OneofMemberMessage2\\");
builder.objectType(OneofMemberMessage2, {
    name: \\"OneofMemberMessage2\\",
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofMemberMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage2\\";
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage2Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

export const OneofMemberMessage2Input = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofMemberMessage2, \\"$type\\">>(\\"OneofMemberMessage2Input\\");
OneofMemberMessage2Input.implement({
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParent.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$OneofParentOptionalOneofMembers_nexus from \\"./OneofParentOptionalOneofMembers.nexus\\";
import * as _$OneofParentRequiredOneofMembers_nexus from \\"./OneofParentRequiredOneofMembers.nexus\\";
import * as _$testapis$oneof from \\"./testapis/oneof\\";
export const OneofParent = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofParent>(\\"OneofParent\\");
builder.objectType(OneofParent, {
    name: \\"OneofParent\\",
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredOneofMembers: t.expose(\\"requiredOneofMembers\\", {
            type: \\"OneofParentRequiredOneofMembers\\",
            nullable: false,
            description: \\"Required. disallow not_set.\\"
        }),
        optionalOneofMembers: t.expose(\\"optionalOneofMembers\\", {
            type: \\"OneofParentOptionalOneofMembers\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofParent | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofParent\\";
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$OneofMemberMessage1Input_nexus from \\"./OneofMemberMessage1Input.nexus\\";
import * as _$OneofMemberMessage2Input_nexus from \\"./OneofMemberMessage2Input.nexus\\";
export const OneofParentInput = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofParent, \\"$type\\">>(\\"OneofParentInput\\");
OneofParentInput.implement({
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredMessage1: t.expose(\\"requiredMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        requiredMessage2: t.expose(\\"requiredMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        }),
        optoinalMessage1: t.expose(\\"optoinalMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        optoinalMessage2: t.expose(\\"optoinalMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        })
    })
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentOptionalOneofMembers.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$OneofMemberMessage1_nexus from \\"./OneofMemberMessage1.nexus\\";
import * as _$OneofMemberMessage2_nexus from \\"./OneofMemberMessage2.nexus\\";
export const OneofParentOptionalOneofMembers = builder.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentRequiredOneofMembers.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$OneofMemberMessage1_nexus from \\"./OneofMemberMessage1.nexus\\";
import * as _$OneofMemberMessage2_nexus from \\"./OneofMemberMessage2.nexus\\";
export const OneofParentRequiredOneofMembers = builder.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
"
`;

exports[`protobuf oneof with native protobuf generates nexus DSLs: oneof/oneof_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$testapis$oneof$oneof_pb from \\"./testapis/oneof/oneof_pb\\";
export const OneofParent = builder.objectRef<_$testapis$oneof$oneof_pb.OneofParent>(\\"OneofParent\\");
builder.objectType(OneofParent, {
    name: \\"OneofParent\\",
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredOneofMembers: t.expose(\\"requiredOneofMembers\\", {
            type: \\"OneofParentRequiredOneofMembers\\",
            nullable: false,
            description: \\"Required. disallow not_set.\\"
        }),
        optionalOneofMembers: t.expose(\\"optionalOneofMembers\\", {
            type: \\"OneofParentOptionalOneofMembers\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof$oneof_pb.OneofParent | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofParent\\";
    }
});
export const OneofMemberMessage1 = builder.objectRef<_$testapis$oneof$oneof_pb.OneofMemberMessage1>(\\"OneofMemberMessage1\\");
builder.objectType(OneofMemberMessage1, {
    name: \\"OneofMemberMessage1\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof$oneof_pb.OneofMemberMessage1 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage1\\";
    }
});
export const OneofMemberMessage2 = builder.objectRef<_$testapis$oneof$oneof_pb.OneofMemberMessage2>(\\"OneofMemberMessage2\\");
builder.objectType(OneofMemberMessage2, {
    name: \\"OneofMemberMessage2\\",
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof$oneof_pb.OneofMemberMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage2\\";
    }
});
export const OneofParentInput = builder.inputRef<Omit<_$testapis$oneof$oneof_pb.OneofParent, \\"$type\\">>(\\"OneofParentInput\\");
OneofParentInput.implement({
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredMessage1: t.expose(\\"requiredMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        requiredMessage2: t.expose(\\"requiredMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        }),
        optoinalMessage1: t.expose(\\"optoinalMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        optoinalMessage2: t.expose(\\"optoinalMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        })
    })
});
export const OneofMemberMessage1Input = builder.inputRef<Omit<_$testapis$oneof$oneof_pb.OneofMemberMessage1, \\"$type\\">>(\\"OneofMemberMessage1Input\\");
OneofMemberMessage1Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const OneofMemberMessage2Input = builder.inputRef<Omit<_$testapis$oneof$oneof_pb.OneofMemberMessage2, \\"$type\\">>(\\"OneofMemberMessage2Input\\");
OneofMemberMessage2Input.implement({
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const OneofParentRequiredOneofMembers = builder.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
export const OneofParentOptionalOneofMembers = builder.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
"
`;

exports[`protobuf oneof with protobufjs generates nexus DSLs: oneof/oneof_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as _$testapis$oneof from \\"./testapis/oneof\\";
export const OneofParent = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofParent>(\\"OneofParent\\");
builder.objectType(OneofParent, {
    name: \\"OneofParent\\",
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredOneofMembers: t.expose(\\"requiredOneofMembers\\", {
            type: \\"OneofParentRequiredOneofMembers\\",
            nullable: false,
            description: \\"Required. disallow not_set.\\"
        }),
        optionalOneofMembers: t.expose(\\"optionalOneofMembers\\", {
            type: \\"OneofParentOptionalOneofMembers\\",
            nullable: true
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofParent | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofParent\\";
    }
});
export const OneofMemberMessage1 = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofMemberMessage1>(\\"OneofMemberMessage1\\");
builder.objectType(OneofMemberMessage1, {
    name: \\"OneofMemberMessage1\\",
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofMemberMessage1 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage1\\";
    }
});
export const OneofMemberMessage2 = builder.objectRef<_$testapis$oneof.testapis.oneof.OneofMemberMessage2>(\\"OneofMemberMessage2\\");
builder.objectType(OneofMemberMessage2, {
    name: \\"OneofMemberMessage2\\",
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$oneof.testapis.oneof.OneofMemberMessage2 | {
            $type: string & {};
        }).$type === \\"testapis.oneof.OneofMemberMessage2\\";
    }
});
export const OneofParentInput = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofParent, \\"$type\\">>(\\"OneofParentInput\\");
OneofParentInput.implement({
    fields: t => ({
        normalField: t.expose(\\"normalField\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredMessage1: t.expose(\\"requiredMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        requiredMessage2: t.expose(\\"requiredMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        }),
        optoinalMessage1: t.expose(\\"optoinalMessage1\\", {
            type: \\"OneofMemberMessage1Input\\",
            nullable: true
        }),
        optoinalMessage2: t.expose(\\"optoinalMessage2\\", {
            type: \\"OneofMemberMessage2Input\\",
            nullable: true
        })
    })
});
export const OneofMemberMessage1Input = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofMemberMessage1, \\"$type\\">>(\\"OneofMemberMessage1Input\\");
OneofMemberMessage1Input.implement({
    fields: t => ({
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const OneofMemberMessage2Input = builder.inputRef<Omit<_$testapis$oneof.testapis.oneof.OneofMemberMessage2, \\"$type\\">>(\\"OneofMemberMessage2Input\\");
OneofMemberMessage2Input.implement({
    fields: t => ({
        imageUrl: t.expose(\\"imageUrl\\", {
            type: \\"String\\",
            nullable: false
        })
    })
});
export const OneofParentRequiredOneofMembers = builder.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
export const OneofParentOptionalOneofMembers = builder.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    types: [
        \\"OneofMemberMessage1\\",
        \\"OneofMemberMessage2\\"
    ]
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: primitives/Message.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as _$Primitives_nexus from \\"./Primitives.nexus\\";
import * as _$testapis$primitives from \\"./testapis/primitives\\";
export const Message = builder.objectRef<_$testapis$primitives.testapis.primitives.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"Primitives\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"Primitives\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Message | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Message\\";
    }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: primitives/MessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as _$PrimitivesInput_nexus from \\"./PrimitivesInput.nexus\\";
export const MessageInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: primitives/Primitives.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$primitives from \\"./testapis/primitives\\";
export const Primitives = builder.objectRef<_$testapis$primitives.testapis.primitives.Primitives>(\\"Primitives\\");
builder.objectType(Primitives, {
    name: \\"Primitives\\",
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Primitives | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Primitives\\";
    }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: primitives/PrimitivesInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as proto_nexus from \\"proto-nexus\\";
export const PrimitivesInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Primitives, \\"$type\\">>(\\"PrimitivesInput\\");
PrimitivesInput.implement({
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    })
});
"
`;

exports[`simple proto file generates nexus DSLs with partial inputs: primitives/primitives_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$primitives from \\"./testapis/primitives\\";
export const Message = builder.objectRef<_$testapis$primitives.testapis.primitives.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"Primitives\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"Primitives\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Message | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Message\\";
    }
});
export const Primitives = builder.objectRef<_$testapis$primitives.testapis.primitives.Primitives>(\\"Primitives\\");
builder.objectType(Primitives, {
    name: \\"Primitives\\",
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Primitives | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Primitives\\";
    }
});
export const MessageInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const MessagePartialInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Message, \\"$type\\">>(\\"MessagePartialInput\\");
MessagePartialInput.implement({
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"PrimitivesPartialInput\\",
            nullable: true,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"PrimitivesPartialInput\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"PrimitivesPartialInput\\"],
            nullable: { list: true, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"PrimitivesPartialInput\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const PrimitivesInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Primitives, \\"$type\\">>(\\"PrimitivesInput\\");
PrimitivesInput.implement({
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    })
});
export const PrimitivesPartialInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Primitives, \\"$type\\">>(\\"PrimitivesPartialInput\\");
PrimitivesPartialInput.implement({
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: true
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: true
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: true, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        })
    })
});
"
`;

exports[`simple proto file with native protobuf generates nexus DSLs: primitives/primitives_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$primitives$primitives_pb from \\"./testapis/primitives/primitives_pb\\";
export const Message = builder.objectRef<_$testapis$primitives$primitives_pb.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"Primitives\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"Primitives\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives$primitives_pb.Message | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Message\\";
    }
});
export const Primitives = builder.objectRef<_$testapis$primitives$primitives_pb.Primitives>(\\"Primitives\\");
builder.objectType(Primitives, {
    name: \\"Primitives\\",
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives$primitives_pb.Primitives | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Primitives\\";
    }
});
export const MessageInput = builder.inputRef<Omit<_$testapis$primitives$primitives_pb.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const PrimitivesInput = builder.inputRef<Omit<_$testapis$primitives$primitives_pb.Primitives, \\"$type\\">>(\\"PrimitivesInput\\");
PrimitivesInput.implement({
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    })
});
"
`;

exports[`simple proto file with protobufjs generates nexus DSLs: primitives/primitives_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$primitives from \\"./testapis/primitives\\";
export const Message = builder.objectRef<_$testapis$primitives.testapis.primitives.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"Primitives\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"Primitives\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"Primitives\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Message | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Message\\";
    }
});
export const Primitives = builder.objectRef<_$testapis$primitives.testapis.primitives.Primitives>(\\"Primitives\\");
builder.objectType(Primitives, {
    name: \\"Primitives\\",
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$primitives.testapis.primitives.Primitives | {
            $type: string & {};
        }).$type === \\"testapis.primitives.Primitives\\";
    }
});
export const MessageInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        requiredPrimitives: t.expose(\\"requiredPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        optionalPrimitives: t.expose(\\"optionalPrimitives\\", {
            type: \\"PrimitivesInput\\",
            nullable: true,
            description: \\"Optional.\\"
        }),
        requiredPrimitivesList: t.expose(\\"requiredPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: false, item: false },
            description: \\"Required.\\"
        }),
        optionalPrimitivesList: t.expose(\\"optionalPrimitivesList\\", {
            type: [\\"PrimitivesInput\\"],
            nullable: { list: true, item: false },
            description: \\"Optional.\\"
        })
    })
});
export const PrimitivesInput = builder.inputRef<Omit<_$testapis$primitives.testapis.primitives.Primitives, \\"$type\\">>(\\"PrimitivesInput\\");
PrimitivesInput.implement({
    fields: t => ({
        requiredDoubleValue: t.expose(\\"requiredDoubleValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredFloatValue: t.expose(\\"requiredFloatValue\\", {
            type: \\"Float\\",
            nullable: false
        }),
        requiredInt32Value: t.expose(\\"requiredInt32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredInt64Value: t.expose(\\"requiredInt64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredUint32Value: t.expose(\\"requiredUint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredUint64Value: t.expose(\\"requiredUint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSint32Value: t.expose(\\"requiredSint32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSint64Value: t.expose(\\"requiredSint64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredFixed32Value: t.expose(\\"requiredFixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredFixed64Value: t.expose(\\"requiredFixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredSfixed32Value: t.expose(\\"requiredSfixed32Value\\", {
            type: \\"Int\\",
            nullable: false
        }),
        requiredSfixed64Value: t.expose(\\"requiredSfixed64Value\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredBoolValue: t.expose(\\"requiredBoolValue\\", {
            type: \\"Boolean\\",
            nullable: false
        }),
        requiredStringValue: t.expose(\\"requiredStringValue\\", {
            type: \\"String\\",
            nullable: false
        }),
        requiredDoubleValues: t.expose(\\"requiredDoubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredFloatValues: t.expose(\\"requiredFloatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt32Values: t.expose(\\"requiredInt32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredInt64Values: t.expose(\\"requiredInt64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint32Values: t.expose(\\"requiredUint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredUint64Values: t.expose(\\"requiredUint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint32Values: t.expose(\\"requiredSint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSint64Values: t.expose(\\"requiredSint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed32Values: t.expose(\\"requiredFixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredFixed64Values: t.expose(\\"requiredFixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed32Values: t.expose(\\"requiredSfixed32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: false, item: false }
        }),
        requiredSfixed64Values: t.expose(\\"requiredSfixed64Values\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        }),
        requiredBoolValues: t.expose(\\"requiredBoolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: false, item: false }
        }),
        requiredStringValues: t.expose(\\"requiredStringValues\\", {
            type: [\\"String\\"],
            nullable: { list: false, item: false }
        })
    })
});
"
`;

exports[`well-known protobuf types with native protobuf generates nexus DSLs: wktypes/well_known_types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$wktypes$well_known_types_pb from \\"./testapis/wktypes/well_known_types_pb\\";
export const Message = builder.objectRef<_$testapis$wktypes$well_known_types_pb.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        timestamp: t.expose(\\"timestamp\\", {
            type: \\"DateTime\\",
            nullable: true
        }),
        int32Value: t.expose(\\"int32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        int64Value: t.expose(\\"int64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        uint32Value: t.expose(\\"uint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        uint64Value: t.expose(\\"uint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        floatValue: t.expose(\\"floatValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        doubleValue: t.expose(\\"doubleValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        boolValue: t.expose(\\"boolValue\\", {
            type: \\"Boolean\\",
            nullable: true
        }),
        stringValue: t.expose(\\"stringValue\\", {
            type: \\"String\\",
            nullable: true
        }),
        timestamps: t.expose(\\"timestamps\\", {
            type: [\\"DateTime\\"],
            nullable: { list: true, item: false }
        }),
        int32Values: t.expose(\\"int32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        int64Values: t.expose(\\"int64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        uint32Values: t.expose(\\"uint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        uint64Values: t.expose(\\"uint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        floatValues: t.expose(\\"floatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        doubleValues: t.expose(\\"doubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        boolValues: t.expose(\\"boolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: true, item: false }
        }),
        stringValues: t.expose(\\"stringValues\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$wktypes$well_known_types_pb.Message | {
            $type: string & {};
        }).$type === \\"testapis.wktypes.Message\\";
    }
});
export const MessageInput = builder.inputRef<Omit<_$testapis$wktypes$well_known_types_pb.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        timestamp: t.expose(\\"timestamp\\", {
            type: \\"DateTime\\",
            nullable: true
        }),
        int32Value: t.expose(\\"int32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        int64Value: t.expose(\\"int64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        uint32Value: t.expose(\\"uint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        uint64Value: t.expose(\\"uint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        floatValue: t.expose(\\"floatValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        doubleValue: t.expose(\\"doubleValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        boolValue: t.expose(\\"boolValue\\", {
            type: \\"Boolean\\",
            nullable: true
        }),
        stringValue: t.expose(\\"stringValue\\", {
            type: \\"String\\",
            nullable: true
        }),
        timestamps: t.expose(\\"timestamps\\", {
            type: [\\"DateTime\\"],
            nullable: { list: true, item: false }
        }),
        int32Values: t.expose(\\"int32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        int64Values: t.expose(\\"int64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        uint32Values: t.expose(\\"uint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        uint64Values: t.expose(\\"uint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        floatValues: t.expose(\\"floatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        doubleValues: t.expose(\\"doubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        boolValues: t.expose(\\"boolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: true, item: false }
        }),
        stringValues: t.expose(\\"stringValues\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        })
    })
});
"
`;

exports[`well-known protobuf types with protobufjs generates nexus DSLs: wktypes/well_known_types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

import * as proto_nexus from \\"proto-nexus\\";
import * as _$testapis$wktypes from \\"./testapis/wktypes\\";
export const Message = builder.objectRef<_$testapis$wktypes.testapis.wktypes.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        timestamp: t.expose(\\"timestamp\\", {
            type: \\"DateTime\\",
            nullable: true
        }),
        int32Value: t.expose(\\"int32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        int64Value: t.expose(\\"int64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        uint32Value: t.expose(\\"uint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        uint64Value: t.expose(\\"uint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        floatValue: t.expose(\\"floatValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        doubleValue: t.expose(\\"doubleValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        boolValue: t.expose(\\"boolValue\\", {
            type: \\"Boolean\\",
            nullable: true
        }),
        stringValue: t.expose(\\"stringValue\\", {
            type: \\"String\\",
            nullable: true
        }),
        timestamps: t.expose(\\"timestamps\\", {
            type: [\\"DateTime\\"],
            nullable: { list: true, item: false }
        }),
        int32Values: t.expose(\\"int32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        int64Values: t.expose(\\"int64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        uint32Values: t.expose(\\"uint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        uint64Values: t.expose(\\"uint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        floatValues: t.expose(\\"floatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        doubleValues: t.expose(\\"doubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        boolValues: t.expose(\\"boolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: true, item: false }
        }),
        stringValues: t.expose(\\"stringValues\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$wktypes.testapis.wktypes.Message | {
            $type: string & {};
        }).$type === \\"testapis.wktypes.Message\\";
    }
});
export const MessageInput = builder.inputRef<Omit<_$testapis$wktypes.testapis.wktypes.Message, \\"$type\\">>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        timestamp: t.expose(\\"timestamp\\", {
            type: \\"DateTime\\",
            nullable: true
        }),
        int32Value: t.expose(\\"int32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        int64Value: t.expose(\\"int64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        uint32Value: t.expose(\\"uint32Value\\", {
            type: \\"Int\\",
            nullable: true
        }),
        uint64Value: t.expose(\\"uint64Value\\", {
            type: \\"String\\",
            nullable: true
        }),
        floatValue: t.expose(\\"floatValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        doubleValue: t.expose(\\"doubleValue\\", {
            type: \\"Float\\",
            nullable: true
        }),
        boolValue: t.expose(\\"boolValue\\", {
            type: \\"Boolean\\",
            nullable: true
        }),
        stringValue: t.expose(\\"stringValue\\", {
            type: \\"String\\",
            nullable: true
        }),
        timestamps: t.expose(\\"timestamps\\", {
            type: [\\"DateTime\\"],
            nullable: { list: true, item: false }
        }),
        int32Values: t.expose(\\"int32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        int64Values: t.expose(\\"int64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        uint32Values: t.expose(\\"uint32Values\\", {
            type: [\\"Int\\"],
            nullable: { list: true, item: false }
        }),
        uint64Values: t.expose(\\"uint64Values\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        }),
        floatValues: t.expose(\\"floatValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        doubleValues: t.expose(\\"doubleValues\\", {
            type: [\\"Float\\"],
            nullable: { list: true, item: false }
        }),
        boolValues: t.expose(\\"boolValues\\", {
            type: [\\"Boolean\\"],
            nullable: { list: true, item: false }
        }),
        stringValues: t.expose(\\"stringValues\\", {
            type: [\\"String\\"],
            nullable: { list: true, item: false }
        })
    })
});
"
`;
