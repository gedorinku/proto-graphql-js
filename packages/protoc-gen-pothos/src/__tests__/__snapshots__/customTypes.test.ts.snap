// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom types generates pothos DSLs: custom_types/date.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/date.proto

import { builder } from \\"../../builder\\";
import * as _$testapis$custom_types$date from \\"./testapis/custom_types/date\\";
export const Date = builder.objectRef<_$testapis$custom_types$date.Date>(\\"Date\\");
builder.objectType(Date, {
    name: \\"Date\\",
    fields: t => ({
        year: t.expose(\\"year\\", {
            type: \\"Int\\",
            nullable: false
        }),
        month: t.expose(\\"month\\", {
            type: \\"Int\\",
            nullable: false
        }),
        day: t.expose(\\"day\\", {
            type: \\"Int\\",
            nullable: false
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$custom_types$date.Date | {
            $type: string & {};
        }).$type === \\"testapis.custom_types.Date\\";
    }
});
export type DateInput_Shape = {
    year: _$testapis$custom_types$date.Date[\\"year\\"];
    month: _$testapis$custom_types$date.Date[\\"month\\"];
    day: _$testapis$custom_types$date.Date[\\"day\\"];
};
export const DateInput = builder.inputRef<DateInput_Shape>(\\"DateInput\\");
DateInput.implement({
    fields: t => ({
        year: t.field({
            type: \\"Int\\",
            required: true
        }),
        month: t.field({
            type: \\"Int\\",
            required: true
        }),
        day: t.field({
            type: \\"Int\\",
            required: true
        })
    })
});
"
`;

exports[`custom types generates pothos DSLs: custom_types/post.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/post.proto

import { builder } from \\"../../builder\\";
import * as _$testapis$custom_types$post from \\"./testapis/custom_types/post\\";
export const Post = builder.objectRef<_$testapis$custom_types$post.Post>(\\"Post\\");
builder.objectType(Post, {
    name: \\"Post\\",
    fields: t => ({
        title: t.expose(\\"title\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        publishedDate: t.expose(\\"publishedDate\\", {
            type: \\"Date\\",
            nullable: true,
            description: \\"Optional.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$custom_types$post.Post | {
            $type: string & {};
        }).$type === \\"testapis.custom_types.Post\\";
    }
});
export type PostInput_Shape = {
    title: _$testapis$custom_types$post.Post[\\"title\\"];
    publishedDate?: _$testapis$custom_types$post.Post[\\"publishedDate\\"] | null;
};
export const PostInput = builder.inputRef<PostInput_Shape>(\\"PostInput\\");
PostInput.implement({
    fields: t => ({
        title: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        }),
        publishedDate: t.field({
            type: \\"Date\\",
            required: false,
            description: \\"Optional.\\"
        })
    })
});
"
`;
