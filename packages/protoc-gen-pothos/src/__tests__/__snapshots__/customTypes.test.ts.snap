// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom types generates pothos DSLs: custom_types/date.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { InputObjectRef } from \\"@pothos/core\\";
import { builder } from \\"../../builder\\";
import { Date } from \\"./testapis/custom_types/date\\";

export const Date$Ref = builder.objectRef<Date>(\\"Date\\");
builder.objectType(Date$Ref, {
  name: \\"Date\\",
  fields: (t) => ({
    year: t.expose(\\"year\\", {
      type: \\"Int\\",
      nullable: false,
      extensions: { protobufField: { name: \\"year\\", typeFullName: \\"uint32\\" } },
    }),
    month: t.expose(\\"month\\", {
      type: \\"Int\\",
      nullable: false,
      extensions: { protobufField: { name: \\"month\\", typeFullName: \\"uint32\\" } },
    }),
    day: t.expose(\\"day\\", {
      type: \\"Int\\",
      nullable: false,
      extensions: { protobufField: { name: \\"day\\", typeFullName: \\"uint32\\" } },
    }),
  }),
  isTypeOf: (source) => {
    return (source as Date | { $type: string & {}; }).$type ===
      \\"testapis.custom_types.Date\\";
  },
  extensions: {
    protobufMessage: {
      fullName: \\"testapis.custom_types.Date\\",
      name: \\"Date\\",
      package: \\"testapis.custom_types\\",
    },
  },
});

export type DateInput$Shape = {
  year: Date[\\"year\\"];
  month: Date[\\"month\\"];
  day: Date[\\"day\\"];
};

export const DateInput$Ref: InputObjectRef<DateInput$Shape> = builder.inputRef<
  DateInput$Shape
>(\\"DateInput\\").implement({
  fields: (t) => ({
    year: t.field({
      type: \\"Int\\",
      required: true,
      extensions: { protobufField: { name: \\"year\\", typeFullName: \\"uint32\\" } },
    }),
    month: t.field({
      type: \\"Int\\",
      required: true,
      extensions: { protobufField: { name: \\"month\\", typeFullName: \\"uint32\\" } },
    }),
    day: t.field({
      type: \\"Int\\",
      required: true,
      extensions: { protobufField: { name: \\"day\\", typeFullName: \\"uint32\\" } },
    }),
  }),
  extensions: {
    protobufMessage: {
      fullName: \\"testapis.custom_types.Date\\",
      name: \\"Date\\",
      package: \\"testapis.custom_types\\",
    },
  },
});
"
`;

exports[`custom types generates pothos DSLs: custom_types/post.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { InputObjectRef } from \\"@pothos/core\\";
import { builder } from \\"../../builder\\";
import { Post } from \\"./testapis/custom_types/post\\";

export const Post$Ref = builder.objectRef<Post>(\\"Post\\");
builder.objectType(Post$Ref, {
  name: \\"Post\\",
  fields: (t) => ({
    title: t.expose(\\"title\\", {
      type: \\"String\\",
      nullable: false,
      description: \\"Required.\\",
      extensions: { protobufField: { name: \\"title\\", typeFullName: \\"string\\" } },
    }),
    publishedDate: t.expose(\\"publishedDate\\", {
      type: \\"Date\\",
      nullable: true,
      description: \\"Optional.\\",
      extensions: {
        protobufField: {
          name: \\"published_date\\",
          typeFullName: \\"testapis.custom_types.Date\\",
        },
      },
    }),
  }),
  isTypeOf: (source) => {
    return (source as Post | { $type: string & {}; }).$type ===
      \\"testapis.custom_types.Post\\";
  },
  extensions: {
    protobufMessage: {
      fullName: \\"testapis.custom_types.Post\\",
      name: \\"Post\\",
      package: \\"testapis.custom_types\\",
    },
  },
});

export type PostInput$Shape = {
  title: Post[\\"title\\"];
  publishedDate?: Post[\\"publishedDate\\"] | null;
};

export const PostInput$Ref: InputObjectRef<PostInput$Shape> = builder.inputRef<
  PostInput$Shape
>(\\"PostInput\\").implement({
  fields: (t) => ({
    title: t.field({
      type: \\"String\\",
      required: true,
      description: \\"Required.\\",
      extensions: { protobufField: { name: \\"title\\", typeFullName: \\"string\\" } },
    }),
    publishedDate: t.field({
      type: \\"Date\\",
      required: false,
      description: \\"Optional.\\",
      extensions: {
        protobufField: {
          name: \\"published_date\\",
          typeFullName: \\"testapis.custom_types.Date\\",
        },
      },
    }),
  }),
  extensions: {
    protobufMessage: {
      fullName: \\"testapis.custom_types.Post\\",
      name: \\"Post\\",
      package: \\"testapis.custom_types\\",
    },
  },
});
"
`;
