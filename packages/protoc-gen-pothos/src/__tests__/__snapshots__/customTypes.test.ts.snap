// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom types generates pothos DSLs: custom_types/date.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { builder } from \\"../../builder\\";
import * as _$testapis$custom_types$date from \\"./testapis/custom_types/date\\";
export const Date$Ref = builder.objectRef<_$testapis$custom_types$date.Date>(\\"Date\\");
builder.objectType(Date$Ref, {
    name: \\"Date\\",
    fields: t => ({
        year: t.expose(\\"year\\", {
            type: \\"Int\\",
            nullable: false,
            extensions: {
                protobufField: {
                    name: \\"year\\"
                }
            }
        }),
        month: t.expose(\\"month\\", {
            type: \\"Int\\",
            nullable: false,
            extensions: {
                protobufField: {
                    name: \\"month\\"
                }
            }
        }),
        day: t.expose(\\"day\\", {
            type: \\"Int\\",
            nullable: false,
            extensions: {
                protobufField: {
                    name: \\"day\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$custom_types$date.Date | {
            $type: string & {};
        }).$type === \\"testapis.custom_types.Date\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.custom_types.Date\\",
            name: \\"Date\\",
            package: \\"testapis.custom_types\\"
        }
    }
});
export type DateInput$Shape = {
    year: _$testapis$custom_types$date.Date[\\"year\\"];
    month: _$testapis$custom_types$date.Date[\\"month\\"];
    day: _$testapis$custom_types$date.Date[\\"day\\"];
};
export const DateInput$Ref = builder.inputRef<DateInput$Shape>(\\"DateInput\\");
DateInput$Ref.implement({
    fields: t => ({
        year: t.field({
            type: \\"Int\\",
            required: true,
            extensions: {
                protobufField: {
                    name: \\"year\\"
                }
            }
        }),
        month: t.field({
            type: \\"Int\\",
            required: true,
            extensions: {
                protobufField: {
                    name: \\"month\\"
                }
            }
        }),
        day: t.field({
            type: \\"Int\\",
            required: true,
            extensions: {
                protobufField: {
                    name: \\"day\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.custom_types.Date\\",
            name: \\"Date\\",
            package: \\"testapis.custom_types\\"
        }
    }
});
"
`;

exports[`custom types generates pothos DSLs: custom_types/post.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { builder } from \\"../../builder\\";
import * as _$testapis$custom_types$post from \\"./testapis/custom_types/post\\";
export const Post$Ref = builder.objectRef<_$testapis$custom_types$post.Post>(\\"Post\\");
builder.objectType(Post$Ref, {
    name: \\"Post\\",
    fields: t => ({
        title: t.expose(\\"title\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"title\\"
                }
            }
        }),
        publishedDate: t.expose(\\"publishedDate\\", {
            type: \\"Date\\",
            nullable: true,
            description: \\"Optional.\\",
            extensions: {
                protobufField: {
                    name: \\"published_date\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$custom_types$post.Post | {
            $type: string & {};
        }).$type === \\"testapis.custom_types.Post\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.custom_types.Post\\",
            name: \\"Post\\",
            package: \\"testapis.custom_types\\"
        }
    }
});
export type PostInput$Shape = {
    title: _$testapis$custom_types$post.Post[\\"title\\"];
    publishedDate?: _$testapis$custom_types$post.Post[\\"publishedDate\\"] | null;
};
export const PostInput$Ref = builder.inputRef<PostInput$Shape>(\\"PostInput\\");
PostInput$Ref.implement({
    fields: t => ({
        title: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"title\\"
                }
            }
        }),
        publishedDate: t.field({
            type: \\"Date\\",
            required: false,
            description: \\"Optional.\\",
            extensions: {
                protobufField: {
                    name: \\"published_date\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.custom_types.Post\\",
            name: \\"Post\\",
            package: \\"testapis.custom_types\\"
        }
    }
});
"
`;
