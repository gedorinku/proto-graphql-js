// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`field_nullability generates pothos DSLs with partial inputs: extensions/field_nullability/nullability.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { builder } from \\"../../../builder\\";
import * as _$testapis$extensions$field_nullability$nullability from \\"./testapis/extensions/field_nullability/nullability\\";
export const Message$Ref = builder.objectRef<_$testapis$extensions$field_nullability$nullability.Message>(\\"Message\\");
builder.objectType(Message$Ref, {
    name: \\"Message\\",
    fields: t => ({
        userId: t.expose(\\"userId\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"user_id\\"
                }
            }
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        }),
        status: t.field({
            type: MessageStatus$Ref,
            nullable: true,
            description: \\"Required.\\",
            resolve: source => {
                if (source.status === _$testapis$extensions$field_nullability$nullability.Message_Status.STATUS_UNSPECIFIED) {
                    return null;
                }
                return source.status;
            },
            extensions: {
                protobufField: {
                    name: \\"status\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$field_nullability$nullability.Message | {
            $type: string & {};
        }).$type === \\"testapis.extensions.field_nullability.Message\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.field_nullability.Message\\",
            name: \\"Message\\",
            package: \\"testapis.extensions.field_nullability\\"
        }
    }
});
export type MessageInput$Shape = {
    userId?: _$testapis$extensions$field_nullability$nullability.Message[\\"userId\\"] | null;
    body: _$testapis$extensions$field_nullability$nullability.Message[\\"body\\"];
    status?: _$testapis$extensions$field_nullability$nullability.Message[\\"status\\"] | null;
};
export const MessageInput$Ref = builder.inputRef<MessageInput$Shape>(\\"MessageInput\\");
MessageInput$Ref.implement({
    fields: t => ({
        userId: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"user_id\\"
                }
            }
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        }),
        status: t.field({
            type: MessageStatus$Ref,
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"status\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.field_nullability.Message\\",
            name: \\"Message\\",
            package: \\"testapis.extensions.field_nullability\\"
        }
    }
});
export type MessagePartialInput$Shape = {
    userId: _$testapis$extensions$field_nullability$nullability.Message[\\"userId\\"];
    body?: _$testapis$extensions$field_nullability$nullability.Message[\\"body\\"] | null;
    status?: _$testapis$extensions$field_nullability$nullability.Message[\\"status\\"] | null;
};
export const MessagePartialInput$Ref = builder.inputRef<MessagePartialInput$Shape>(\\"MessagePartialInput\\");
MessagePartialInput$Ref.implement({
    fields: t => ({
        userId: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"user_id\\"
                }
            }
        }),
        body: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        }),
        status: t.field({
            type: MessageStatus$Ref,
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"status\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.field_nullability.Message\\",
            name: \\"Message\\",
            package: \\"testapis.extensions.field_nullability\\"
        }
    }
});
export const MessageStatus$Ref = builder.enumType(\\"MessageStatus\\", {
    values: {
        DRAFT: {
            value: 1,
            extensions: {
                protobufEnumValue: {
                    name: \\"DRAFT\\"
                }
            }
        },
        PUBLISHED: {
            value: 2,
            extensions: {
                protobufEnumValue: {
                    name: \\"PUBLISHED\\"
                }
            }
        }
    } as const,
    extensions: {
        protobufEnum: {
            name: \\"Status\\",
            fullName: \\"testapis.extensions.field_nullability.Message.Status\\",
            package: \\"testapis.extensions.field_nullability\\"
        }
    }
});
"
`;

exports[`no_partial generates pothos DSLs with partial inputs: extensions/no_partial/no_partial.pb.pothos.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { builder } from \\"../../../builder\\";
import * as _$testapis$extensions$no_partial$no_partial from \\"./testapis/extensions/no_partial/no_partial\\";
export const ParentMessage$Ref = builder.objectRef<_$testapis$extensions$no_partial$no_partial.ParentMessage>(\\"ParentMessage\\");
builder.objectType(ParentMessage$Ref, {
    name: \\"ParentMessage\\",
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessage$Ref,
            nullable: false,
            description: \\"Required.\\",
            resolve: source => {
                return source.partialableInputMessage!;
            },
            extensions: {
                protobufField: {
                    name: \\"partialable_input_message\\"
                }
            }
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessage$Ref,
            nullable: false,
            description: \\"Required.\\",
            resolve: source => {
                return source.noPartialInputMessage!;
            },
            extensions: {
                protobufField: {
                    name: \\"no_partial_input_message\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.ParentMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.ParentMessage\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.ParentMessage\\",
            name: \\"ParentMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export const PartialableInputMessage$Ref = builder.objectRef<_$testapis$extensions$no_partial$no_partial.PartialableInputMessage>(\\"PartialableInputMessage\\");
builder.objectType(PartialableInputMessage$Ref, {
    name: \\"PartialableInputMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"id\\"
                }
            }
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.PartialableInputMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.PartialableInputMessage\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.PartialableInputMessage\\",
            name: \\"PartialableInputMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export const NoPartialInputMessage$Ref = builder.objectRef<_$testapis$extensions$no_partial$no_partial.NoPartialInputMessage>(\\"NoPartialInputMessage\\");
builder.objectType(NoPartialInputMessage$Ref, {
    name: \\"NoPartialInputMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"id\\"
                }
            }
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.NoPartialInputMessage\\";
    },
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.NoPartialInputMessage\\",
            name: \\"NoPartialInputMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export type ParentMessageInput$Shape = {
    partialableInputMessage: PartialableInputMessageInput$Shape;
    noPartialInputMessage: NoPartialInputMessageInput$Shape;
};
export const ParentMessageInput$Ref = builder.inputRef<ParentMessageInput$Shape>(\\"ParentMessageInput\\");
ParentMessageInput$Ref.implement({
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessageInput$Ref,
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"partialable_input_message\\"
                }
            }
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessageInput$Ref,
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"no_partial_input_message\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.ParentMessage\\",
            name: \\"ParentMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export type ParentMessagePartialInput$Shape = {
    partialableInputMessage?: PartialableInputMessagePartialInput$Shape | null;
    noPartialInputMessage?: NoPartialInputMessageInput$Shape | null;
};
export const ParentMessagePartialInput$Ref = builder.inputRef<ParentMessagePartialInput$Shape>(\\"ParentMessagePartialInput\\");
ParentMessagePartialInput$Ref.implement({
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessagePartialInput$Ref,
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"partialable_input_message\\"
                }
            }
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessageInput$Ref,
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"no_partial_input_message\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.ParentMessage\\",
            name: \\"ParentMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export type PartialableInputMessageInput$Shape = {
    id: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"id\\"];
    body: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"body\\"];
};
export const PartialableInputMessageInput$Ref = builder.inputRef<PartialableInputMessageInput$Shape>(\\"PartialableInputMessageInput\\");
PartialableInputMessageInput$Ref.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"id\\"
                }
            }
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.PartialableInputMessage\\",
            name: \\"PartialableInputMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export type PartialableInputMessagePartialInput$Shape = {
    id?: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"id\\"] | null;
    body?: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"body\\"] | null;
};
export const PartialableInputMessagePartialInput$Ref = builder.inputRef<PartialableInputMessagePartialInput$Shape>(\\"PartialableInputMessagePartialInput\\");
PartialableInputMessagePartialInput$Ref.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"id\\"
                }
            }
        }),
        body: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.PartialableInputMessage\\",
            name: \\"PartialableInputMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
export type NoPartialInputMessageInput$Shape = {
    id: _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage[\\"id\\"];
    body: _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage[\\"body\\"];
};
export const NoPartialInputMessageInput$Ref = builder.inputRef<NoPartialInputMessageInput$Shape>(\\"NoPartialInputMessageInput\\");
NoPartialInputMessageInput$Ref.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"id\\"
                }
            }
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\",
            extensions: {
                protobufField: {
                    name: \\"body\\"
                }
            }
        })
    }),
    extensions: {
        protobufMessage: {
            fullName: \\"testapis.extensions.no_partial.NoPartialInputMessage\\",
            name: \\"NoPartialInputMessage\\",
            package: \\"testapis.extensions.no_partial\\"
        }
    }
});
"
`;
