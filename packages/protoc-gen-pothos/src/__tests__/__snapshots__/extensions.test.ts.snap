// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`field_nullability generates pothos DSLs with partial inputs: extensions/field_nullability/nullability_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

import { builder } from \\"../../../builder\\";
import * as _$testapis$extensions$field_nullability$nullability from \\"./testapis/extensions/field_nullability/nullability\\";
export const Message = builder.objectRef<_$testapis$extensions$field_nullability$nullability.Message>(\\"Message\\");
builder.objectType(Message, {
    name: \\"Message\\",
    fields: t => ({
        userId: t.expose(\\"userId\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        status: t.field({
            type: MessageStatus,
            nullable: true,
            description: \\"Required.\\",
            resolve: source => {
                if (source.status === _$testapis$extensions$field_nullability$nullability.Message_Status.STATUS_UNSPECIFIED) {
                    return null;
                }
                return source.status;
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$field_nullability$nullability.Message | {
            $type: string & {};
        }).$type === \\"testapis.extensions.field_nullability.Message\\";
    }
});
export type MessageInput_Shape = {
    userId?: _$testapis$extensions$field_nullability$nullability.Message[\\"userId\\"] | null;
    body: _$testapis$extensions$field_nullability$nullability.Message[\\"body\\"];
    status?: _$testapis$extensions$field_nullability$nullability.Message[\\"status\\"] | null;
};
export const MessageInput = builder.inputRef<MessageInput_Shape>(\\"MessageInput\\");
MessageInput.implement({
    fields: t => ({
        userId: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\"
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        }),
        status: t.field({
            type: MessageStatus,
            required: false,
            description: \\"Required.\\"
        })
    })
});
export type MessagePartialInput_Shape = {
    userId: _$testapis$extensions$field_nullability$nullability.Message[\\"userId\\"];
    body?: _$testapis$extensions$field_nullability$nullability.Message[\\"body\\"] | null;
    status?: _$testapis$extensions$field_nullability$nullability.Message[\\"status\\"] | null;
};
export const MessagePartialInput = builder.inputRef<MessagePartialInput_Shape>(\\"MessagePartialInput\\");
MessagePartialInput.implement({
    fields: t => ({
        userId: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        }),
        body: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\"
        }),
        status: t.field({
            type: MessageStatus,
            required: false,
            description: \\"Required.\\"
        })
    })
});
export const MessageStatus = builder.enumType(\\"MessageStatus\\", {
    values: {
        DRAFT: {
            value: 1
        },
        PUBLISHED: {
            value: 2
        }
    } as const
});


type _RemoveTypeRecursively<T> = (
  T extends Array<infer U>
    ? Array<_RemoveTypeRecursively<U>>
    : T extends Record<string, any>
    ? Omit<{ [K in keyof T]: _RemoveTypeRecursively<T[K]> }, \\"$type\\">
    : T
) extends infer P
  ? { [K in keyof P]: P[K] }
  : never;
"
`;

exports[`no_partial generates pothos DSLs with partial inputs: extensions/no_partial/no_partial_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-pothos. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

import { builder } from \\"../../../builder\\";
import * as _$testapis$extensions$no_partial$no_partial from \\"./testapis/extensions/no_partial/no_partial\\";
export const ParentMessage = builder.objectRef<_$testapis$extensions$no_partial$no_partial.ParentMessage>(\\"ParentMessage\\");
builder.objectType(ParentMessage, {
    name: \\"ParentMessage\\",
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessage,
            nullable: false,
            description: \\"Required.\\",
            resolve: source => {
                return source.partialableInputMessage!;
            }
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessage,
            nullable: false,
            description: \\"Required.\\",
            resolve: source => {
                return source.noPartialInputMessage!;
            }
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.ParentMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.ParentMessage\\";
    }
});
export const PartialableInputMessage = builder.objectRef<_$testapis$extensions$no_partial$no_partial.PartialableInputMessage>(\\"PartialableInputMessage\\");
builder.objectType(PartialableInputMessage, {
    name: \\"PartialableInputMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.PartialableInputMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.PartialableInputMessage\\";
    }
});
export const NoPartialInputMessage = builder.objectRef<_$testapis$extensions$no_partial$no_partial.NoPartialInputMessage>(\\"NoPartialInputMessage\\");
builder.objectType(NoPartialInputMessage, {
    name: \\"NoPartialInputMessage\\",
    fields: t => ({
        id: t.expose(\\"id\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        }),
        body: t.expose(\\"body\\", {
            type: \\"String\\",
            nullable: false,
            description: \\"Required.\\"
        })
    }),
    isTypeOf: source => {
        return (source as _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage | {
            $type: string & {};
        }).$type === \\"testapis.extensions.no_partial.NoPartialInputMessage\\";
    }
});
export type ParentMessageInput_Shape = {
    partialableInputMessage: PartialableInputMessageInput_Shape;
    noPartialInputMessage: NoPartialInputMessageInput_Shape;
};
export const ParentMessageInput = builder.inputRef<ParentMessageInput_Shape>(\\"ParentMessageInput\\");
ParentMessageInput.implement({
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessageInput,
            required: true,
            description: \\"Required.\\"
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessageInput,
            required: true,
            description: \\"Required.\\"
        })
    })
});
export type ParentMessagePartialInput_Shape = {
    partialableInputMessage?: PartialableInputMessagePartialInput_Shape | null;
    noPartialInputMessage?: NoPartialInputMessageInput_Shape | null;
};
export const ParentMessagePartialInput = builder.inputRef<ParentMessagePartialInput_Shape>(\\"ParentMessagePartialInput\\");
ParentMessagePartialInput.implement({
    fields: t => ({
        partialableInputMessage: t.field({
            type: PartialableInputMessagePartialInput,
            required: false,
            description: \\"Required.\\"
        }),
        noPartialInputMessage: t.field({
            type: NoPartialInputMessageInput,
            required: false,
            description: \\"Required.\\"
        })
    })
});
export type PartialableInputMessageInput_Shape = {
    id: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"id\\"];
    body: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"body\\"];
};
export const PartialableInputMessageInput = builder.inputRef<PartialableInputMessageInput_Shape>(\\"PartialableInputMessageInput\\");
PartialableInputMessageInput.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        })
    })
});
export type PartialableInputMessagePartialInput_Shape = {
    id?: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"id\\"] | null;
    body?: _$testapis$extensions$no_partial$no_partial.PartialableInputMessage[\\"body\\"] | null;
};
export const PartialableInputMessagePartialInput = builder.inputRef<PartialableInputMessagePartialInput_Shape>(\\"PartialableInputMessagePartialInput\\");
PartialableInputMessagePartialInput.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\"
        }),
        body: t.field({
            type: \\"String\\",
            required: false,
            description: \\"Required.\\"
        })
    })
});
export type NoPartialInputMessageInput_Shape = {
    id: _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage[\\"id\\"];
    body: _$testapis$extensions$no_partial$no_partial.NoPartialInputMessage[\\"body\\"];
};
export const NoPartialInputMessageInput = builder.inputRef<NoPartialInputMessageInput_Shape>(\\"NoPartialInputMessageInput\\");
NoPartialInputMessageInput.implement({
    fields: t => ({
        id: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        }),
        body: t.field({
            type: \\"String\\",
            required: true,
            description: \\"Required.\\"
        })
    })
});


type _RemoveTypeRecursively<T> = (
  T extends Array<infer U>
    ? Array<_RemoveTypeRecursively<U>>
    : T extends Record<string, any>
    ? Omit<{ [K in keyof T]: _RemoveTypeRecursively<T[K]> }, \\"$type\\">
    : T
) extends infer P
  ? { [K in keyof P]: P[K] }
  : never;
"
`;
