// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`deprecation with native protobuf generates nexus DSLs: deprecation/deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$deprecation$deprecation_pb from \\"./testapis/deprecation/deprecation_pb\\";
export type _$testapis$deprecation$deprecation_pb$DeprecatedMessage = _$testapis$deprecation$deprecation_pb.DeprecatedMessage;
export type _$testapis$deprecation$deprecation_pb$NotDeprecatedMessage = _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage;
export type _$testapis$deprecation$deprecation_pb$DeprecatedMessageInnerMessage = _$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage;
export type _$testapis$deprecation$deprecation_pb$NotDeprecatedMessageInnerMessage1 = _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1;
export type _$testapis$deprecation$deprecation_pb$NotDeprecatedMessageInnerMessage2 = _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2;
export const DeprecatedMessage = nexus.objectType({
    name: \\"DeprecatedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"NotDeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.getEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation$deprecation_pb.NotDeprecatedEnum.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$deprecation_pb.DeprecatedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$deprecation_pb$DeprecatedMessage\\" }
});
export const NotDeprecatedMessage = nexus.objectType({
    name: \\"NotDeprecatedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.getEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation$deprecation_pb.DeprecatedEnum.DEPRECATED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"notDeprecatedOneof\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageNotDeprecatedOneof\\"),
            resolve(root) {
                switch (root.getNotDeprecatedOneofCase()) {
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.NotDeprecatedOneofCase.NOT_DEPRECATED_ONEOF_NOT_SET: {
                        return null;
                    }
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.NotDeprecatedOneofCase.MSG_1: {
                        return root.getMsg1()!;
                    }
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.NotDeprecatedOneofCase.MSG_2: {
                        return root.getMsg2()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
        t.field(\\"deprecatedOneof\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageDeprecatedOneof\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                switch (root.getDeprecatedOneofCase()) {
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.DeprecatedOneofCase.DEPRECATED_ONEOF_NOT_SET: {
                        return null;
                    }
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.DeprecatedOneofCase.MSG_3: {
                        return root.getMsg3()!;
                    }
                    case _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.DeprecatedOneofCase.MSG_4: {
                        return root.getMsg4()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$deprecation_pb$NotDeprecatedMessage\\" }
});
export const DeprecatedMessageInnerMessage = nexus.objectType({
    name: \\"DeprecatedMessageInnerMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$deprecation_pb$DeprecatedMessageInnerMessage\\" }
});
export const NotDeprecatedMessageInnerMessage1 = nexus.objectType({
    name: \\"NotDeprecatedMessageInnerMessage1\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$deprecation_pb$NotDeprecatedMessageInnerMessage1\\" }
});
export const NotDeprecatedMessageInnerMessage2 = nexus.objectType({
    name: \\"NotDeprecatedMessageInnerMessage2\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$deprecation_pb$NotDeprecatedMessageInnerMessage2\\" }
});
export const DeprecatedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"NotDeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedMessageInput\\"]): _$testapis$deprecation$deprecation_pb.DeprecatedMessage => {
        const output = new _$testapis$deprecation$deprecation_pb.DeprecatedMessage();
        output.setBody(input.body);
        if (input.enum != null) {
            output.setEnum(input.enum);
        }
        return output;
    }
});
export const NotDeprecatedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg1\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage1Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg2\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage2Input\\")
        });
        t.field(\\"msg3\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage1Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg4\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage2Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInput\\"]): _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage => {
        const output = new _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage();
        output.setBody(input.body);
        if (input.enum != null) {
            output.setEnum(input.enum);
        }
        if (input.msg1 != null) {
            output.setMsg1(NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1));
        }
        if (input.msg2 != null) {
            output.setMsg2(NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2));
        }
        if (input.msg3 != null) {
            output.setMsg3(NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3));
        }
        if (input.msg4 != null) {
            output.setMsg4(NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4));
        }
        return output;
    }
});
export const DeprecatedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedMessageInnerMessageInput\\"]): _$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage => {
        const output = new _$testapis$deprecation$deprecation_pb.DeprecatedMessage.InnerMessage();
        output.setBody(input.body);
        return output;
    }
});
export const NotDeprecatedMessageInnerMessage1Input = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInnerMessage1Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInnerMessage1Input\\"]): _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1 => {
        const output = new _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage1();
        output.setBody(input.body);
        return output;
    }
});
export const NotDeprecatedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInnerMessage2Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInnerMessage2Input\\"]): _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2 => {
        const output = new _$testapis$deprecation$deprecation_pb.NotDeprecatedMessage.InnerMessage2();
        output.setBody(input.body);
        return output;
    }
});
export const NotDeprecatedMessageNotDeprecatedOneof = nexus.unionType({
    name: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
    definition(t) {
        t.members(NotDeprecatedMessageInnerMessage1, NotDeprecatedMessageInnerMessage2);
    }
});
export const NotDeprecatedMessageDeprecatedOneof = nexus.unionType({
    name: \\"NotDeprecatedMessageDeprecatedOneof\\",
    definition(t) {
        t.members(NotDeprecatedMessageInnerMessage1, NotDeprecatedMessageInnerMessage2);
    }
});
export const NotDeprecatedEnum = nexus.enumType({
    name: \\"NotDeprecatedEnum\\",
    members: [
        {
            name: \\"NOT_DEPRECATED_FOO\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_BAR\\",
            deprecation: \\"testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    ]
});
export const DeprecatedEnum = nexus.enumType({
    name: \\"DeprecatedEnum\\",
    members: [
        {
            name: \\"DEPRECATED_BAZ\\",
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_QUX\\",
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    ]
});
"
`;

exports[`deprecation with native protobuf generates nexus DSLs: deprecation/file_deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$deprecation$file_deprecation_pb from \\"./testapis/deprecation/file_deprecation_pb\\";
export type _$testapis$deprecation$file_deprecation_pb$DeprecatedFileMessage = _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage;
export type _$testapis$deprecation$file_deprecation_pb$DeprecatedFileMessageInnerMessage = _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage;
export const DeprecatedFileMessage = nexus.objectType({
    name: \\"DeprecatedFileMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedFileEnum\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.getEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation$file_deprecation_pb.DeprecatedFileEnum.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$file_deprecation_pb$DeprecatedFileMessage\\" }
});
export const DeprecatedFileMessageInnerMessage = nexus.objectType({
    name: \\"DeprecatedFileMessageInnerMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$file_deprecation_pb$DeprecatedFileMessageInnerMessage\\" }
});
export const DeprecatedFileMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedFileMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedFileEnum\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedFileMessageInput\\"]): _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage => {
        const output = new _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage();
        output.setBody(input.body);
        if (input.enum != null) {
            output.setEnum(input.enum);
        }
        return output;
    }
});
export const DeprecatedFileMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedFileMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedFileMessageInnerMessageInput\\"]): _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage => {
        const output = new _$testapis$deprecation$file_deprecation_pb.DeprecatedFileMessage.InnerMessage();
        output.setBody(input.body);
        return output;
    }
});
export const DeprecatedFileEnum = nexus.enumType({
    name: \\"DeprecatedFileEnum\\",
    members: [
        {
            name: \\"DEPRECATED_FILE_FOO\\",
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_FILE_BAR\\",
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 2
        }
    ]
});
"
`;

exports[`deprecation with protobufjs generates nexus DSLs: deprecation/deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$deprecation from \\"./testapis/deprecation\\";
export type _$testapis$deprecation$testapis$deprecation$DeprecatedMessage = _$testapis$deprecation.testapis.deprecation.DeprecatedMessage;
export type _$testapis$deprecation$testapis$deprecation$NotDeprecatedMessage = _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage;
export type _$testapis$deprecation$testapis$deprecation$DeprecatedMessageInnerMessage = _$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage;
export type _$testapis$deprecation$testapis$deprecation$NotDeprecatedMessageInnerMessage1 = _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1;
export type _$testapis$deprecation$testapis$deprecation$NotDeprecatedMessageInnerMessage2 = _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2;
export const DeprecatedMessage = nexus.objectType({
    name: \\"DeprecatedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"NotDeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.enum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation.testapis.deprecation.NotDeprecatedEnum.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.DeprecatedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$DeprecatedMessage\\" }
});
export const NotDeprecatedMessage = nexus.objectType({
    name: \\"NotDeprecatedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.enum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation.testapis.deprecation.DeprecatedEnum.DEPRECATED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"notDeprecatedOneof\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageNotDeprecatedOneof\\"),
            resolve(root) {
                if (root.msg1) {
                    return root.msg1;
                }
                if (root.msg2) {
                    return root.msg2;
                }
                return null;
            }
        });
        t.field(\\"deprecatedOneof\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageDeprecatedOneof\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                if (root.msg3) {
                    return root.msg3;
                }
                if (root.msg4) {
                    return root.msg4;
                }
                return null;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$NotDeprecatedMessage\\" }
});
export const DeprecatedMessageInnerMessage = nexus.objectType({
    name: \\"DeprecatedMessageInnerMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\",
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$DeprecatedMessageInnerMessage\\" }
});
export const NotDeprecatedMessageInnerMessage1 = nexus.objectType({
    name: \\"NotDeprecatedMessageInnerMessage1\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$NotDeprecatedMessageInnerMessage1\\" }
});
export const NotDeprecatedMessageInnerMessage2 = nexus.objectType({
    name: \\"NotDeprecatedMessageInnerMessage2\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$NotDeprecatedMessageInnerMessage2\\" }
});
export const DeprecatedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"NotDeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedMessageInput\\"]): _$testapis$deprecation.testapis.deprecation.DeprecatedMessage => {
        const output = new _$testapis$deprecation.testapis.deprecation.DeprecatedMessage();
        output.body = input.body;
        if (input.enum != null) {
            output.enum = input.enum;
        }
        return output;
    }
});
export const NotDeprecatedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedEnum\\"),
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg1\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage1Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg2\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage2Input\\")
        });
        t.field(\\"msg3\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage1Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.\\"
        });
        t.field(\\"msg4\\", {
            type: nexus.nullable(\\"NotDeprecatedMessageInnerMessage2Input\\"),
            deprecation: \\"testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInput\\"]): _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage => {
        const output = new _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage();
        output.body = input.body;
        if (input.enum != null) {
            output.enum = input.enum;
        }
        if (input.msg1 != null) {
            output.msg1 = NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1);
        }
        if (input.msg2 != null) {
            output.msg2 = NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2);
        }
        if (input.msg3 != null) {
            output.msg3 = NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3);
        }
        if (input.msg4 != null) {
            output.msg4 = NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4);
        }
        return output;
    }
});
export const DeprecatedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedMessageInnerMessageInput\\"]): _$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage => {
        const output = new _$testapis$deprecation.testapis.deprecation.DeprecatedMessage.InnerMessage();
        output.body = input.body;
        return output;
    }
});
export const NotDeprecatedMessageInnerMessage1Input = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInnerMessage1Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInnerMessage1Input\\"]): _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1 => {
        const output = new _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage1();
        output.body = input.body;
        return output;
    }
});
export const NotDeprecatedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"NotDeprecatedMessageInnerMessage2Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"NotDeprecatedMessageInnerMessage2Input\\"]): _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2 => {
        const output = new _$testapis$deprecation.testapis.deprecation.NotDeprecatedMessage.InnerMessage2();
        output.body = input.body;
        return output;
    }
});
export const NotDeprecatedMessageNotDeprecatedOneof = nexus.unionType({
    name: \\"NotDeprecatedMessageNotDeprecatedOneof\\",
    definition(t) {
        t.members(NotDeprecatedMessageInnerMessage1, NotDeprecatedMessageInnerMessage2);
    }
});
export const NotDeprecatedMessageDeprecatedOneof = nexus.unionType({
    name: \\"NotDeprecatedMessageDeprecatedOneof\\",
    definition(t) {
        t.members(NotDeprecatedMessageInnerMessage1, NotDeprecatedMessageInnerMessage2);
    }
});
export const NotDeprecatedEnum = nexus.enumType({
    name: \\"NotDeprecatedEnum\\",
    members: [
        {
            name: \\"NOT_DEPRECATED_FOO\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_BAR\\",
            deprecation: \\"testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    ]
});
export const DeprecatedEnum = nexus.enumType({
    name: \\"DeprecatedEnum\\",
    members: [
        {
            name: \\"DEPRECATED_BAZ\\",
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_QUX\\",
            deprecation: \\"testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.\\",
            value: 2
        }
    ]
});
"
`;

exports[`deprecation with protobufjs generates nexus DSLs: deprecation/file_deprecation_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$deprecation from \\"./testapis/deprecation\\";
export type _$testapis$deprecation$testapis$deprecation$DeprecatedFileMessage = _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage;
export type _$testapis$deprecation$testapis$deprecation$DeprecatedFileMessageInnerMessage = _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage;
export const DeprecatedFileMessage = nexus.objectType({
    name: \\"DeprecatedFileMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedFileEnum\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.enum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$deprecation.testapis.deprecation.DeprecatedFileEnum.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$DeprecatedFileMessage\\" }
});
export const DeprecatedFileMessageInnerMessage = nexus.objectType({
    name: \\"DeprecatedFileMessageInnerMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$deprecation$testapis$deprecation$DeprecatedFileMessageInnerMessage\\" }
});
export const DeprecatedFileMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedFileMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"DeprecatedFileEnum\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedFileMessageInput\\"]): _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage => {
        const output = new _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage();
        output.body = input.body;
        if (input.enum != null) {
            output.enum = input.enum;
        }
        return output;
    }
});
export const DeprecatedFileMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"DeprecatedFileMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"DeprecatedFileMessageInnerMessageInput\\"]): _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage => {
        const output = new _$testapis$deprecation.testapis.deprecation.DeprecatedFileMessage.InnerMessage();
        output.body = input.body;
        return output;
    }
});
export const DeprecatedFileEnum = nexus.enumType({
    name: \\"DeprecatedFileEnum\\",
    members: [
        {
            name: \\"DEPRECATED_FILE_FOO\\",
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 1
        },
        {
            name: \\"DEPRECATED_FILE_BAR\\",
            deprecation: \\"testapis/deprecation/file_deprecation.proto is mark as deprecated.\\",
            value: 2
        }
    ]
});
"
`;

exports[`field_behavior with native protobuf generates nexus DSLs: field_behavior/comments_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$field_behavior$comments_pb from \\"./testapis/field_behavior/comments_pb\\";
export type _$testapis$field_behavior$comments_pb$FieldBehaviorComentsMessage = _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage;
export type _$testapis$field_behavior$comments_pb$FieldBehaviorComentsMessagePost = _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post;
export const FieldBehaviorComentsMessage = nexus.objectType({
    name: \\"FieldBehaviorComentsMessage\\",
    definition(t) {
        t.field(\\"requiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredField();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredOutputOnlyField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Required. Output only.\\",
            resolve(root) {
                const value = root.getRequiredOutputOnlyField();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"outputOnlyRequiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Output only. Required.\\",
            resolve(root) {
                const value = root.getOutputOnlyRequiredField();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"outputOnlyField\\", {
            type: nexus.nullable(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Output only.\\",
            resolve(root) {
                const value = root.getOutputOnlyField();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$field_behavior$comments_pb$FieldBehaviorComentsMessage\\" }
});
export const FieldBehaviorComentsMessagePost = nexus.objectType({
    name: \\"FieldBehaviorComentsMessagePost\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post;
    },
    sourceType: { module: __filename, export: \\"_$testapis$field_behavior$comments_pb$FieldBehaviorComentsMessagePost\\" }
});
export const FieldBehaviorComentsMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"FieldBehaviorComentsMessageInput\\",
    definition(t) {
        t.field(\\"requiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Required.\\"
        });
        t.field(\\"requiredInputOnlyField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Required. Input only.\\"
        });
        t.field(\\"inputOnlyRequiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Input only. Required.\\"
        });
        t.field(\\"inputOnlyField\\", {
            type: nexus.nullable(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Input only.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"FieldBehaviorComentsMessageInput\\"]): _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage => {
        const output = new _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage();
        output.setRequiredField(FieldBehaviorComentsMessagePostInput.toProto(input.requiredField));
        output.setRequiredInputOnlyField(FieldBehaviorComentsMessagePostInput.toProto(input.requiredInputOnlyField));
        output.setInputOnlyRequiredField(FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyRequiredField));
        if (input.inputOnlyField != null) {
            output.setInputOnlyField(FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField));
        }
        return output;
    }
});
export const FieldBehaviorComentsMessagePostInput = Object.assign(nexus.inputObjectType({
    name: \\"FieldBehaviorComentsMessagePostInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"FieldBehaviorComentsMessagePostInput\\"]): _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post => {
        const output = new _$testapis$field_behavior$comments_pb.FieldBehaviorComentsMessage.Post();
        output.setBody(input.body);
        return output;
    }
});
"
`;

exports[`field_behavior with protobufjs generates nexus DSLs: field_behavior/comments_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$field_behavior from \\"./testapis/field_behavior\\";
export type _$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessage = _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage;
export type _$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessagePost = _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post;
export const FieldBehaviorComentsMessage = nexus.objectType({
    name: \\"FieldBehaviorComentsMessage\\",
    definition(t) {
        t.field(\\"requiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredField;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredOutputOnlyField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Required. Output only.\\",
            resolve(root) {
                const value = root.requiredOutputOnlyField;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"outputOnlyRequiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Output only. Required.\\",
            resolve(root) {
                const value = root.outputOnlyRequiredField;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"outputOnlyField\\", {
            type: nexus.nullable(\\"FieldBehaviorComentsMessagePost\\"),
            description: \\"Output only.\\",
            resolve(root) {
                const value = root.outputOnlyField;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessage\\" }
});
export const FieldBehaviorComentsMessagePost = nexus.objectType({
    name: \\"FieldBehaviorComentsMessagePost\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post;
    },
    sourceType: { module: __filename, export: \\"_$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessagePost\\" }
});
export const FieldBehaviorComentsMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"FieldBehaviorComentsMessageInput\\",
    definition(t) {
        t.field(\\"requiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Required.\\"
        });
        t.field(\\"requiredInputOnlyField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Required. Input only.\\"
        });
        t.field(\\"inputOnlyRequiredField\\", {
            type: nexus.nonNull(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Input only. Required.\\"
        });
        t.field(\\"inputOnlyField\\", {
            type: nexus.nullable(\\"FieldBehaviorComentsMessagePostInput\\"),
            description: \\"Input only.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"FieldBehaviorComentsMessageInput\\"]): _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage => {
        const output = new _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage();
        output.requiredField = FieldBehaviorComentsMessagePostInput.toProto(input.requiredField);
        output.requiredInputOnlyField = FieldBehaviorComentsMessagePostInput.toProto(input.requiredInputOnlyField);
        output.inputOnlyRequiredField = FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyRequiredField);
        if (input.inputOnlyField != null) {
            output.inputOnlyField = FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField);
        }
        return output;
    }
});
export const FieldBehaviorComentsMessagePostInput = Object.assign(nexus.inputObjectType({
    name: \\"FieldBehaviorComentsMessagePostInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"FieldBehaviorComentsMessagePostInput\\"]): _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post => {
        const output = new _$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post();
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`multipkgs with native protobuf generates nexus DSLs: multipkgs/subpkg1/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$multipkgs$subpkg1$types_pb from \\"./testapis/multipkgs/subpkg1/types_pb\\";
export type _$testapis$multipkgs$subpkg1$types_pb$SubpkgMessage = _$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage;
export const SubpkgMessage = nexus.objectType({
    name: \\"SubpkgMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$multipkgs$subpkg1$types_pb$SubpkgMessage\\" }
});
export const SubpkgMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"SubpkgMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"SubpkgMessageInput\\"]): _$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage => {
        const output = new _$testapis$multipkgs$subpkg1$types_pb.SubpkgMessage();
        output.setBody(input.body);
        return output;
    }
});
export const SubpkgEnum = nexus.enumType({
    name: \\"SubpkgEnum\\",
    members: [
        {
            name: \\"FOO\\",
            value: 1
        },
        {
            name: \\"BAR\\",
            value: 2
        }
    ]
});
"
`;

exports[`multipkgs with native protobuf generates nexus DSLs: multipkgs/subpkg2/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

import * as nexus from \\"nexus\\";
import * as __$subpkg1$types_pb_nexus from \\"../subpkg1/types_pb_nexus\\";
import * as _$testapis$multipkgs$subpkg1$types_pb from \\"./testapis/multipkgs/subpkg1/types_pb\\";
import * as _$testapis$multipkgs$subpkg2$types_pb from \\"./testapis/multipkgs/subpkg2/types_pb\\";
export type _$testapis$multipkgs$subpkg2$types_pb$MessageWithSubpkg = _$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg;
export const MessageWithSubpkg = nexus.objectType({
    name: \\"MessageWithSubpkg\\",
    definition(t) {
        t.field(\\"message\\", {
            type: nexus.nullable(\\"SubpkgMessage\\"),
            resolve(root) {
                const value = root.getMessage();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"SubpkgEnum\\"),
            resolve(root) {
                const value = root.getEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$multipkgs$subpkg1$types_pb.SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg;
    },
    sourceType: { module: __filename, export: \\"_$testapis$multipkgs$subpkg2$types_pb$MessageWithSubpkg\\" }
});
export const MessageWithSubpkgInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageWithSubpkgInput\\",
    definition(t) {
        t.field(\\"message\\", {
            type: nexus.nullable(\\"SubpkgMessageInput\\")
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"SubpkgEnum\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageWithSubpkgInput\\"]): _$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg => {
        const output = new _$testapis$multipkgs$subpkg2$types_pb.MessageWithSubpkg();
        if (input.message != null) {
            output.setMessage(__$subpkg1$types_pb_nexus.SubpkgMessageInput.toProto(input.message));
        }
        if (input.enum != null) {
            output.setEnum(input.enum);
        }
        return output;
    }
});
"
`;

exports[`multipkgs with protobufjs generates nexus DSLs: multipkgs/subpkg1/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$multipkgs$subpkg1 from \\"./testapis/multipkgs/subpkg1\\";
export type _$testapis$multipkgs$subpkg1$testapis$multipkgs$subpkg1$SubpkgMessage = _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage;
export const SubpkgMessage = nexus.objectType({
    name: \\"SubpkgMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$multipkgs$subpkg1$testapis$multipkgs$subpkg1$SubpkgMessage\\" }
});
export const SubpkgMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"SubpkgMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"SubpkgMessageInput\\"]): _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage => {
        const output = new _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgMessage();
        output.body = input.body;
        return output;
    }
});
export const SubpkgEnum = nexus.enumType({
    name: \\"SubpkgEnum\\",
    members: [
        {
            name: \\"FOO\\",
            value: 1
        },
        {
            name: \\"BAR\\",
            value: 2
        }
    ]
});
"
`;

exports[`multipkgs with protobufjs generates nexus DSLs: multipkgs/subpkg2/types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

import * as nexus from \\"nexus\\";
import * as __$subpkg1$types_pb_nexus from \\"../subpkg1/types_pb_nexus\\";
import * as _$testapis$multipkgs$subpkg1 from \\"./testapis/multipkgs/subpkg1\\";
import * as _$testapis$multipkgs$subpkg2 from \\"./testapis/multipkgs/subpkg2\\";
export type _$testapis$multipkgs$subpkg2$testapis$multipkgs$subpkg1$MessageWithSubpkg = _$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg;
export const MessageWithSubpkg = nexus.objectType({
    name: \\"MessageWithSubpkg\\",
    definition(t) {
        t.field(\\"message\\", {
            type: nexus.nullable(\\"SubpkgMessage\\"),
            resolve(root) {
                const value = root.message;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"SubpkgEnum\\"),
            resolve(root) {
                const value = root.enum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$multipkgs$subpkg1.testapis.multipkgs.subpkg1.SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg;
    },
    sourceType: { module: __filename, export: \\"_$testapis$multipkgs$subpkg2$testapis$multipkgs$subpkg1$MessageWithSubpkg\\" }
});
export const MessageWithSubpkgInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageWithSubpkgInput\\",
    definition(t) {
        t.field(\\"message\\", {
            type: nexus.nullable(\\"SubpkgMessageInput\\")
        });
        t.field(\\"enum\\", {
            type: nexus.nullable(\\"SubpkgEnum\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageWithSubpkgInput\\"]): _$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg => {
        const output = new _$testapis$multipkgs$subpkg2.testapis.multipkgs.subpkg1.MessageWithSubpkg();
        if (input.message != null) {
            output.message = __$subpkg1$types_pb_nexus.SubpkgMessageInput.toProto(input.message);
        }
        if (input.enum != null) {
            output.enum = input.enum;
        }
        return output;
    }
});
"
`;

exports[`nested protobuf types with native protobuf generates nexus DSLs: nested/nested_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$nested$nested_pb from \\"./testapis/nested/nested_pb\\";
export type _$testapis$nested$nested_pb$ParentMessage = _$testapis$nested$nested_pb.ParentMessage;
export type _$testapis$nested$nested_pb$ParentMessageNestedMessage = _$testapis$nested$nested_pb.ParentMessage.NestedMessage;
export const ParentMessage = nexus.objectType({
    name: \\"ParentMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
        t.field(\\"nested\\", {
            type: nexus.nullable(\\"ParentMessageNestedMessage\\"),
            resolve(root) {
                const value = root.getNested();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"nestedEnum\\", {
            type: nexus.nullable(\\"ParentMessageNestedEnum\\"),
            resolve(root) {
                const value = root.getNestedEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$nested$nested_pb.ParentMessage.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$nested$nested_pb.ParentMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$nested$nested_pb$ParentMessage\\" }
});
export const ParentMessageNestedMessage = nexus.objectType({
    name: \\"ParentMessageNestedMessage\\",
    definition(t) {
        t.field(\\"nestedBody\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getNestedBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$nested$nested_pb.ParentMessage.NestedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$nested$nested_pb$ParentMessageNestedMessage\\" }
});
export const ParentMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"ParentMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"nested\\", {
            type: nexus.nullable(\\"ParentMessageNestedMessageInput\\")
        });
        t.field(\\"nestedEnum\\", {
            type: nexus.nullable(\\"ParentMessageNestedEnum\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"ParentMessageInput\\"]): _$testapis$nested$nested_pb.ParentMessage => {
        const output = new _$testapis$nested$nested_pb.ParentMessage();
        output.setBody(input.body);
        if (input.nested != null) {
            output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
        }
        if (input.nestedEnum != null) {
            output.setNestedEnum(input.nestedEnum);
        }
        return output;
    }
});
export const ParentMessageNestedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"ParentMessageNestedMessageInput\\",
    definition(t) {
        t.field(\\"nestedBody\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"ParentMessageNestedMessageInput\\"]): _$testapis$nested$nested_pb.ParentMessage.NestedMessage => {
        const output = new _$testapis$nested$nested_pb.ParentMessage.NestedMessage();
        output.setNestedBody(input.nestedBody);
        return output;
    }
});
export const ParentMessageNestedEnum = nexus.enumType({
    name: \\"ParentMessageNestedEnum\\",
    members: [
        {
            name: \\"FOO\\",
            value: 1
        },
        {
            name: \\"BAR\\",
            value: 2
        }
    ]
});
"
`;

exports[`nested protobuf types with protobufjs generates nexus DSLs: nested/nested_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$nested from \\"./testapis/nested\\";
export type _$testapis$nested$testapis$nested$ParentMessage = _$testapis$nested.testapis.nested.ParentMessage;
export type _$testapis$nested$testapis$nested$ParentMessageNestedMessage = _$testapis$nested.testapis.nested.ParentMessage.NestedMessage;
export const ParentMessage = nexus.objectType({
    name: \\"ParentMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"nested\\", {
            type: nexus.nullable(\\"ParentMessageNestedMessage\\"),
            resolve(root) {
                const value = root.nested;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"nestedEnum\\", {
            type: nexus.nullable(\\"ParentMessageNestedEnum\\"),
            resolve(root) {
                const value = root.nestedEnum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$nested.testapis.nested.ParentMessage.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$nested.testapis.nested.ParentMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$nested$testapis$nested$ParentMessage\\" }
});
export const ParentMessageNestedMessage = nexus.objectType({
    name: \\"ParentMessageNestedMessage\\",
    definition(t) {
        t.field(\\"nestedBody\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.nestedBody;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$nested.testapis.nested.ParentMessage.NestedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$nested$testapis$nested$ParentMessageNestedMessage\\" }
});
export const ParentMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"ParentMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"nested\\", {
            type: nexus.nullable(\\"ParentMessageNestedMessageInput\\")
        });
        t.field(\\"nestedEnum\\", {
            type: nexus.nullable(\\"ParentMessageNestedEnum\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"ParentMessageInput\\"]): _$testapis$nested.testapis.nested.ParentMessage => {
        const output = new _$testapis$nested.testapis.nested.ParentMessage();
        output.body = input.body;
        if (input.nested != null) {
            output.nested = ParentMessageNestedMessageInput.toProto(input.nested);
        }
        if (input.nestedEnum != null) {
            output.nestedEnum = input.nestedEnum;
        }
        return output;
    }
});
export const ParentMessageNestedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"ParentMessageNestedMessageInput\\",
    definition(t) {
        t.field(\\"nestedBody\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"ParentMessageNestedMessageInput\\"]): _$testapis$nested.testapis.nested.ParentMessage.NestedMessage => {
        const output = new _$testapis$nested.testapis.nested.ParentMessage.NestedMessage();
        output.nestedBody = input.nestedBody;
        return output;
    }
});
export const ParentMessageNestedEnum = nexus.enumType({
    name: \\"ParentMessageNestedEnum\\",
    members: [
        {
            name: \\"FOO\\",
            value: 1
        },
        {
            name: \\"BAR\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixIgnoredMessageNotIgnored.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored = _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = nexus.objectType({
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored\\" }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixIgnoredMessageNotIgnoredInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixIgnoredMessageNotIgnoredInput\\"]): _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored => {
        const output = new _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored();
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixInterfaceMessage = _$testapis$extensions.testapis.extensions.InterfaceMessage;
export const TestPrefixInterfaceMessage = nexus.interfaceType({
    name: \\"TestPrefixInterfaceMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixInterfaceMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixInterfaceMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixInterfaceMessageInput\\"]): _$testapis$extensions.testapis.extensions.InterfaceMessage => {
        const output = new _$testapis$extensions.testapis.extensions.InterfaceMessage();
        output.id = parseInt(input.id);
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixInterfaceMessageType.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixInterfaceMessageType = nexus.enumType({
    name: \\"TestPrefixInterfaceMessageType\\",
    members: [
        {
            name: \\"INNER\\",
            value: 1
        },
        {
            name: \\"INNER2\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedEnum.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixPrefixedEnum = nexus.enumType({
    name: \\"TestPrefixPrefixedEnum\\",
    members: [
        {
            name: \\"PREFIXED_FOO\\",
            value: 1
        },
        {
            name: \\"PREFIXED_BAR\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$TestPrefixIgnoredMessageNotIgnored_nexus from \\"./TestPrefixIgnoredMessageNotIgnored.nexus\\";
import * as _$TestPrefixPrefixedEnum_nexus from \\"./TestPrefixPrefixedEnum.nexus\\";
import * as _$TestPrefixPrefixedMessagePartialIgnoreOneof_nexus from \\"./TestPrefixPrefixedMessagePartialIgnoreOneof.nexus\\";
import * as _$TestPrefixPrefixedMessageSquashedMessage_nexus from \\"./TestPrefixPrefixedMessageSquashedMessage.nexus\\";
import * as _$TestPrefixRenamedMessage_nexus from \\"./TestPrefixRenamedMessage.nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage = _$testapis$extensions.testapis.extensions.PrefixedMessage;
export const TestPrefixPrefixedMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            description: \\"Output only.\\",
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(_$TestPrefixPrefixedEnum_nexus.TestPrefixPrefixedEnum),
            resolve(root) {
                const value = root.prefixedEnum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
                    return null;
                }
                if (value === _$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_IGNORED) {
                    throw new Error(\\"PREFIXED_IGNORED is ignored in GraphQL schema\\");
                }
                return value;
            }
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(_$TestPrefixIgnoredMessageNotIgnored_nexus.TestPrefixIgnoredMessageNotIgnored),
            resolve(root) {
                const value = root.notIgnoredMessage;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessageSquashedMessage_nexus.TestPrefixPrefixedMessageSquashedMessage),
            resolve(root) {
                const value = root.squashedMessage;
                if (value == null) {
                    return null;
                }
                if (value.oneofField) {
                    return value.oneofField;
                }
                if (value.oneofField_2) {
                    return value.oneofField_2;
                }
                return null;
            }
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.thisFieldWillBeRenamed;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                throw new Error(\\"not implemented\\");
            }
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$TestPrefixPrefixedMessageSquashedMessage_nexus.TestPrefixPrefixedMessageSquashedMessage))),
            resolve(root) {
                const value = root.squashedMessages;
                return value.map(item => {
                    if (item.oneofField) {
                        return item.oneofField;
                    }
                    if (item.oneofField_2) {
                        return item.oneofField_2;
                    }
                    throw \\"unreachable\\";
                });
            }
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(_$TestPrefixRenamedMessage_nexus.TestPrefixRenamedMessage),
            resolve(root) {
                const value = root.renamedMessage;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"partialIgnoreOneof\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessagePartialIgnoreOneof_nexus.TestPrefixPrefixedMessagePartialIgnoreOneof),
            resolve(root) {
                if (root.oneofNotIgnoredField) {
                    return root.oneofNotIgnoredField;
                }
                return null;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage\\" }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage = _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage\\" }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage2.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2 = _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2\\" }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessage2Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessage2Input\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2 => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2();
        output.id = parseInt(input.id);
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInnerMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage();
        output.id = parseInt(input.id);
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$TestPrefixIgnoredMessageNotIgnoredInput_nexus from \\"./TestPrefixIgnoredMessageNotIgnoredInput.nexus\\";
import * as _$TestPrefixPrefixedEnum_nexus from \\"./TestPrefixPrefixedEnum.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessageInput_nexus from \\"./TestPrefixPrefixedMessageInnerMessageInput.nexus\\";
import * as _$TestPrefixPrefixedMessageSquashedMessageInput_nexus from \\"./TestPrefixPrefixedMessageSquashedMessageInput.nexus\\";
import * as _$TestPrefixRenamedMessageInput_nexus from \\"./TestPrefixRenamedMessageInput.nexus\\";
export const TestPrefixPrefixedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(_$TestPrefixPrefixedEnum_nexus.TestPrefixPrefixedEnum)
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(_$TestPrefixIgnoredMessageNotIgnoredInput_nexus.TestPrefixIgnoredMessageNotIgnoredInput)
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessageSquashedMessageInput_nexus.TestPrefixPrefixedMessageSquashedMessageInput)
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"oneofNotIgnoredField\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessageInnerMessageInput_nexus.TestPrefixPrefixedMessageInnerMessageInput)
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$TestPrefixPrefixedMessageSquashedMessageInput_nexus.TestPrefixPrefixedMessageSquashedMessageInput)))
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(_$TestPrefixRenamedMessageInput_nexus.TestPrefixRenamedMessageInput)
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage();
        output.body = input.body;
        if (input.prefixedEnum != null) {
            output.prefixedEnum = input.prefixedEnum;
        }
        if (input.notIgnoredMessage != null) {
            output.notIgnoredMessage = _$TestPrefixIgnoredMessageNotIgnoredInput_nexus.TestPrefixIgnoredMessageNotIgnoredInput.toProto(input.notIgnoredMessage);
        }
        if (input.squashedMessage != null) {
            output.squashedMessage = _$TestPrefixPrefixedMessageSquashedMessageInput_nexus.TestPrefixPrefixedMessageSquashedMessageInput.toProto(input.squashedMessage);
        }
        output.thisFieldWillBeRenamed = input.thisFieldWasRenamed;
        if (input.oneofNotIgnoredField != null) {
            output.oneofNotIgnoredField = _$TestPrefixPrefixedMessageInnerMessageInput_nexus.TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofNotIgnoredField);
        }
        output.skipResolver = input.skipResolver;
        output.squashedMessages = input.squashedMessages.map(v => _$TestPrefixPrefixedMessageSquashedMessageInput_nexus.TestPrefixPrefixedMessageSquashedMessageInput.toProto(v));
        if (input.renamedMessage != null) {
            output.renamedMessage = _$TestPrefixRenamedMessageInput_nexus.TestPrefixRenamedMessageInput.toProto(input.renamedMessage);
        }
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessagePartialIgnoreOneof.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessage_nexus from \\"./TestPrefixPrefixedMessageInnerMessage.nexus\\";
export const TestPrefixPrefixedMessagePartialIgnoreOneof = nexus.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    definition(t) {
        t.members(_$TestPrefixPrefixedMessageInnerMessage_nexus.TestPrefixPrefixedMessageInnerMessage);
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageSquashedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessage_nexus from \\"./TestPrefixPrefixedMessageInnerMessage.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessage2_nexus from \\"./TestPrefixPrefixedMessageInnerMessage2.nexus\\";
export const TestPrefixPrefixedMessageSquashedMessage = nexus.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    definition(t) {
        t.members(_$TestPrefixPrefixedMessageInnerMessage_nexus.TestPrefixPrefixedMessageInnerMessage, _$TestPrefixPrefixedMessageInnerMessage2_nexus.TestPrefixPrefixedMessageInnerMessage2);
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixPrefixedMessageSquashedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessage2Input_nexus from \\"./TestPrefixPrefixedMessageInnerMessage2Input.nexus\\";
import * as _$TestPrefixPrefixedMessageInnerMessageInput_nexus from \\"./TestPrefixPrefixedMessageInnerMessageInput.nexus\\";
export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
    definition(t) {
        t.field(\\"oneofField\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessageInnerMessageInput_nexus.TestPrefixPrefixedMessageInnerMessageInput)
        });
        t.field(\\"oneofField2\\", {
            type: nexus.nullable(_$TestPrefixPrefixedMessageInnerMessage2Input_nexus.TestPrefixPrefixedMessageInnerMessage2Input)
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageSquashedMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage();
        if (input.oneofField != null) {
            output.oneofField = _$TestPrefixPrefixedMessageInnerMessageInput_nexus.TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField);
        }
        if (input.oneofField2 != null) {
            output.oneofField_2 = _$TestPrefixPrefixedMessageInnerMessage2Input_nexus.TestPrefixPrefixedMessageInnerMessage2Input.toProto(input.oneofField2);
        }
        return output;
    }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixRenamedMessage.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage = _$testapis$extensions.testapis.extensions.MessageWillRename;
export const TestPrefixRenamedMessage = nexus.objectType({
    name: \\"TestPrefixRenamedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.MessageWillRename;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage\\" }
});
"
`;

exports[`protobuf custom options generates nexus DSLs with graphql_type file layout: extensions/TestPrefixRenamedMessageInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
export const TestPrefixRenamedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixRenamedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixRenamedMessageInput\\"]): _$testapis$extensions.testapis.extensions.MessageWillRename => {
        const output = new _$testapis$extensions.testapis.extensions.MessageWillRename();
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`protobuf custom options with native protobuf generates nexus DSLs: extensions/extensions_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions$extensions_pb from \\"./testapis/extensions/extensions_pb\\";
export type _$testapis$extensions$extensions_pb$TestPrefixPrefixedMessage = _$testapis$extensions$extensions_pb.PrefixedMessage;
export type _$testapis$extensions$extensions_pb$TestPrefixRenamedMessage = _$testapis$extensions$extensions_pb.MessageWillRename;
export type _$testapis$extensions$extensions_pb$TestPrefixPrefixedMessageInnerMessage = _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage;
export type _$testapis$extensions$extensions_pb$TestPrefixPrefixedMessageInnerMessage2 = _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2;
export type _$testapis$extensions$extensions_pb$TestPrefixIgnoredMessageNotIgnored = _$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored;
export type _$testapis$extensions$extensions_pb$TestPrefixInterfaceMessage = _$testapis$extensions$extensions_pb.InterfaceMessage;
export const TestPrefixPrefixedMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            description: \\"Output only.\\",
            resolve(root) {
                const value = root.getId();
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedEnum\\"),
            resolve(root) {
                const value = root.getPrefixedEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$extensions$extensions_pb.PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
                    return null;
                }
                if (value === _$testapis$extensions$extensions_pb.PrefixedEnum.PREFIXED_IGNORED) {
                    throw new Error(\\"PREFIXED_IGNORED is ignored in GraphQL schema\\");
                }
                return value;
            }
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(\\"TestPrefixIgnoredMessageNotIgnored\\"),
            resolve(root) {
                const value = root.getNotIgnoredMessage();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageSquashedMessage\\"),
            resolve(root) {
                const value = root.getSquashedMessage();
                if (value == null) {
                    return null;
                }
                switch (value.getSquashedMessageCase()) {
                    case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.SQUASHED_MESSAGE_NOT_SET: {
                        return null;
                    }
                    case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD: {
                        return value.getOneofField()!;
                    }
                    case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD_2: {
                        return value.getOneofField2()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getThisFieldWillBeRenamed();
                return value;
            }
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                throw new Error(\\"not implemented\\");
            }
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"TestPrefixPrefixedMessageSquashedMessage\\"))),
            resolve(root) {
                const value = root.getSquashedMessagesList();
                return value.map(item => {
                    switch (item.getSquashedMessageCase()) {
                        case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.SQUASHED_MESSAGE_NOT_SET: {
                            throw \\"unreachable\\";
                        }
                        case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD: {
                            return item.getOneofField()!;
                        }
                        case _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD_2: {
                            return item.getOneofField2()!;
                        }
                        default: {
                            throw \\"unreachable\\";
                        }
                    }
                });
            }
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(\\"TestPrefixRenamedMessage\\"),
            resolve(root) {
                const value = root.getRenamedMessage();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"partialIgnoreOneof\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessagePartialIgnoreOneof\\"),
            resolve(root) {
                switch (root.getPartialIgnoreOneofCase()) {
                    case _$testapis$extensions$extensions_pb.PrefixedMessage.PartialIgnoreOneofCase.PARTIAL_IGNORE_ONEOF_NOT_SET: {
                        return null;
                    }
                    case _$testapis$extensions$extensions_pb.PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
                        return root.getOneofNotIgnoredField()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions$extensions_pb.PrefixedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$extensions_pb$TestPrefixPrefixedMessage\\" }
});
export const TestPrefixRenamedMessage = nexus.objectType({
    name: \\"TestPrefixRenamedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions$extensions_pb.MessageWillRename;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$extensions_pb$TestPrefixRenamedMessage\\" }
});
export const TestPrefixPrefixedMessageInnerMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getId();
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$extensions_pb$TestPrefixPrefixedMessageInnerMessage\\" }
});
export const TestPrefixPrefixedMessageInnerMessage2 = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getId();
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$extensions_pb$TestPrefixPrefixedMessageInnerMessage2\\" }
});
export const TestPrefixIgnoredMessageNotIgnored = nexus.objectType({
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$extensions_pb$TestPrefixIgnoredMessageNotIgnored\\" }
});
export const TestPrefixPrefixedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedEnum\\")
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(\\"TestPrefixIgnoredMessageNotIgnoredInput\\")
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageSquashedMessageInput\\")
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"oneofNotIgnoredField\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessageInput\\")
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"TestPrefixPrefixedMessageSquashedMessageInput\\")))
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(\\"TestPrefixRenamedMessageInput\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInput\\"]): _$testapis$extensions$extensions_pb.PrefixedMessage => {
        const output = new _$testapis$extensions$extensions_pb.PrefixedMessage();
        output.setBody(input.body);
        if (input.prefixedEnum != null) {
            output.setPrefixedEnum(input.prefixedEnum);
        }
        if (input.notIgnoredMessage != null) {
            output.setNotIgnoredMessage(TestPrefixIgnoredMessageNotIgnoredInput.toProto(input.notIgnoredMessage));
        }
        if (input.squashedMessage != null) {
            output.setSquashedMessage(TestPrefixPrefixedMessageSquashedMessageInput.toProto(input.squashedMessage));
        }
        output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
        if (input.oneofNotIgnoredField != null) {
            output.setOneofNotIgnoredField(TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofNotIgnoredField));
        }
        output.setSkipResolver(input.skipResolver);
        output.setSquashedMessagesList(input.squashedMessages.map(v => TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)));
        if (input.renamedMessage != null) {
            output.setRenamedMessage(TestPrefixRenamedMessageInput.toProto(input.renamedMessage));
        }
        return output;
    }
});
export const TestPrefixRenamedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixRenamedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixRenamedMessageInput\\"]): _$testapis$extensions$extensions_pb.MessageWillRename => {
        const output = new _$testapis$extensions$extensions_pb.MessageWillRename();
        output.setBody(input.body);
        return output;
    }
});
export const TestPrefixInterfaceMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixInterfaceMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixInterfaceMessageInput\\"]): _$testapis$extensions$extensions_pb.InterfaceMessage => {
        const output = new _$testapis$extensions$extensions_pb.InterfaceMessage();
        output.setId(parseInt(input.id));
        return output;
    }
});
export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessageInput\\"]): _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage => {
        const output = new _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage();
        output.setId(parseInt(input.id));
        output.setBody(input.body);
        return output;
    }
});
export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessage2Input\\"]): _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2 => {
        const output = new _$testapis$extensions$extensions_pb.PrefixedMessage.InnerMessage2();
        output.setId(parseInt(input.id));
        output.setBody(input.body);
        return output;
    }
});
export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
    definition(t) {
        t.field(\\"oneofField\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessageInput\\")
        });
        t.field(\\"oneofField2\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessage2Input\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageSquashedMessageInput\\"]): _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage => {
        const output = new _$testapis$extensions$extensions_pb.PrefixedMessage.SquashedMessage();
        if (input.oneofField != null) {
            output.setOneofField(TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField));
        }
        if (input.oneofField2 != null) {
            output.setOneofField2(TestPrefixPrefixedMessageInnerMessage2Input.toProto(input.oneofField2));
        }
        return output;
    }
});
export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixIgnoredMessageNotIgnoredInput\\"]): _$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored => {
        const output = new _$testapis$extensions$extensions_pb.IgnoredMessage.NotIgnored();
        output.setBody(input.body);
        return output;
    }
});
export const TestPrefixInterfaceMessage = nexus.interfaceType({
    name: \\"TestPrefixInterfaceMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getId();
                return value.toString();
            }
        });
    }
});
export const TestPrefixPrefixedMessageSquashedMessage = nexus.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage, TestPrefixPrefixedMessageInnerMessage2);
    }
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = nexus.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage);
    }
});
export const TestPrefixPrefixedEnum = nexus.enumType({
    name: \\"TestPrefixPrefixedEnum\\",
    members: [
        {
            name: \\"PREFIXED_FOO\\",
            value: 1
        },
        {
            name: \\"PREFIXED_BAR\\",
            value: 2
        }
    ]
});
export const TestPrefixInterfaceMessageType = nexus.enumType({
    name: \\"TestPrefixInterfaceMessageType\\",
    members: [
        {
            name: \\"INNER\\",
            value: 1
        },
        {
            name: \\"INNER2\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf custom options with native protobuf generates nexus DSLs: extensions/ignored_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

export {};
"
`;

exports[`protobuf custom options with protobufjs generates nexus DSLs: extensions/extensions_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$extensions from \\"./testapis/extensions\\";
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage = _$testapis$extensions.testapis.extensions.PrefixedMessage;
export type _$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage = _$testapis$extensions.testapis.extensions.MessageWillRename;
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage = _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
export type _$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2 = _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
export type _$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored = _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
export type _$testapis$extensions$testapis$extensions$TestPrefixInterfaceMessage = _$testapis$extensions.testapis.extensions.InterfaceMessage;
export const TestPrefixPrefixedMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            description: \\"Output only.\\",
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedEnum\\"),
            resolve(root) {
                const value = root.prefixedEnum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
                    return null;
                }
                if (value === _$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_IGNORED) {
                    throw new Error(\\"PREFIXED_IGNORED is ignored in GraphQL schema\\");
                }
                return value;
            }
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(\\"TestPrefixIgnoredMessageNotIgnored\\"),
            resolve(root) {
                const value = root.notIgnoredMessage;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageSquashedMessage\\"),
            resolve(root) {
                const value = root.squashedMessage;
                if (value == null) {
                    return null;
                }
                if (value.oneofField) {
                    return value.oneofField;
                }
                if (value.oneofField_2) {
                    return value.oneofField_2;
                }
                return null;
            }
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.thisFieldWillBeRenamed;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                throw new Error(\\"not implemented\\");
            }
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"TestPrefixPrefixedMessageSquashedMessage\\"))),
            resolve(root) {
                const value = root.squashedMessages;
                return value.map(item => {
                    if (item.oneofField) {
                        return item.oneofField;
                    }
                    if (item.oneofField_2) {
                        return item.oneofField_2;
                    }
                    throw \\"unreachable\\";
                });
            }
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(\\"TestPrefixRenamedMessage\\"),
            resolve(root) {
                const value = root.renamedMessage;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"partialIgnoreOneof\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessagePartialIgnoreOneof\\"),
            resolve(root) {
                if (root.oneofNotIgnoredField) {
                    return root.oneofNotIgnoredField;
                }
                return null;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage\\" }
});
export const TestPrefixRenamedMessage = nexus.objectType({
    name: \\"TestPrefixRenamedMessage\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.MessageWillRename;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage\\" }
});
export const TestPrefixPrefixedMessageInnerMessage = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage\\" }
});
export const TestPrefixPrefixedMessageInnerMessage2 = nexus.objectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2\\" }
});
export const TestPrefixIgnoredMessageNotIgnored = nexus.objectType({
    name: \\"TestPrefixIgnoredMessageNotIgnored\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
    },
    sourceType: { module: __filename, export: \\"_$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored\\" }
});
export const TestPrefixPrefixedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"prefixedEnum\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedEnum\\")
        });
        t.field(\\"notIgnoredMessage\\", {
            type: nexus.nullable(\\"TestPrefixIgnoredMessageNotIgnoredInput\\")
        });
        t.field(\\"squashedMessage\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageSquashedMessageInput\\")
        });
        t.field(\\"thisFieldWasRenamed\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"oneofNotIgnoredField\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessageInput\\")
        });
        t.field(\\"skipResolver\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"squashedMessages\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"TestPrefixPrefixedMessageSquashedMessageInput\\")))
        });
        t.field(\\"renamedMessage\\", {
            type: nexus.nullable(\\"TestPrefixRenamedMessageInput\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage();
        output.body = input.body;
        if (input.prefixedEnum != null) {
            output.prefixedEnum = input.prefixedEnum;
        }
        if (input.notIgnoredMessage != null) {
            output.notIgnoredMessage = TestPrefixIgnoredMessageNotIgnoredInput.toProto(input.notIgnoredMessage);
        }
        if (input.squashedMessage != null) {
            output.squashedMessage = TestPrefixPrefixedMessageSquashedMessageInput.toProto(input.squashedMessage);
        }
        output.thisFieldWillBeRenamed = input.thisFieldWasRenamed;
        if (input.oneofNotIgnoredField != null) {
            output.oneofNotIgnoredField = TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofNotIgnoredField);
        }
        output.skipResolver = input.skipResolver;
        output.squashedMessages = input.squashedMessages.map(v => TestPrefixPrefixedMessageSquashedMessageInput.toProto(v));
        if (input.renamedMessage != null) {
            output.renamedMessage = TestPrefixRenamedMessageInput.toProto(input.renamedMessage);
        }
        return output;
    }
});
export const TestPrefixRenamedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixRenamedMessageInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixRenamedMessageInput\\"]): _$testapis$extensions.testapis.extensions.MessageWillRename => {
        const output = new _$testapis$extensions.testapis.extensions.MessageWillRename();
        output.body = input.body;
        return output;
    }
});
export const TestPrefixInterfaceMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixInterfaceMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixInterfaceMessageInput\\"]): _$testapis$extensions.testapis.extensions.InterfaceMessage => {
        const output = new _$testapis$extensions.testapis.extensions.InterfaceMessage();
        output.id = parseInt(input.id);
        return output;
    }
});
export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessageInput\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage();
        output.id = parseInt(input.id);
        output.body = input.body;
        return output;
    }
});
export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageInnerMessage2Input\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageInnerMessage2Input\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2 => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2();
        output.id = parseInt(input.id);
        output.body = input.body;
        return output;
    }
});
export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixPrefixedMessageSquashedMessageInput\\",
    definition(t) {
        t.field(\\"oneofField\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessageInput\\")
        });
        t.field(\\"oneofField2\\", {
            type: nexus.nullable(\\"TestPrefixPrefixedMessageInnerMessage2Input\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixPrefixedMessageSquashedMessageInput\\"]): _$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage => {
        const output = new _$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage();
        if (input.oneofField != null) {
            output.oneofField = TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField);
        }
        if (input.oneofField2 != null) {
            output.oneofField_2 = TestPrefixPrefixedMessageInnerMessage2Input.toProto(input.oneofField2);
        }
        return output;
    }
});
export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(nexus.inputObjectType({
    name: \\"TestPrefixIgnoredMessageNotIgnoredInput\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"TestPrefixIgnoredMessageNotIgnoredInput\\"]): _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored => {
        const output = new _$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored();
        output.body = input.body;
        return output;
    }
});
export const TestPrefixInterfaceMessage = nexus.interfaceType({
    name: \\"TestPrefixInterfaceMessage\\",
    definition(t) {
        t.field(\\"id\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
    }
});
export const TestPrefixPrefixedMessageSquashedMessage = nexus.unionType({
    name: \\"TestPrefixPrefixedMessageSquashedMessage\\",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage, TestPrefixPrefixedMessageInnerMessage2);
    }
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = nexus.unionType({
    name: \\"TestPrefixPrefixedMessagePartialIgnoreOneof\\",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage);
    }
});
export const TestPrefixPrefixedEnum = nexus.enumType({
    name: \\"TestPrefixPrefixedEnum\\",
    members: [
        {
            name: \\"PREFIXED_FOO\\",
            value: 1
        },
        {
            name: \\"PREFIXED_BAR\\",
            value: 2
        }
    ]
});
export const TestPrefixInterfaceMessageType = nexus.enumType({
    name: \\"TestPrefixInterfaceMessageType\\",
    members: [
        {
            name: \\"INNER\\",
            value: 1
        },
        {
            name: \\"INNER2\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf custom options with protobufjs generates nexus DSLs: extensions/ignored_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

export {};
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MessageWithEnums.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
import * as _$MyEnum_nexus from \\"./MyEnum.nexus\\";
import * as _$MyEnumWithoutUnspecified_nexus from \\"./MyEnumWithoutUnspecified.nexus\\";
import * as _$testapis$enums from \\"./testapis/enums\\";
export type _$testapis$enums$testapi$enums$MessageWithEnums = _$testapis$enums.testapi.enums.MessageWithEnums;
export const MessageWithEnums = nexus.objectType({
    name: \\"MessageWithEnums\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(_$MyEnum_nexus.MyEnum),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnum;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                if (value === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                    throw new Error(\\"requiredMyEnum is required field. But got unspecified.\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(_$MyEnum_nexus.MyEnum),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnumWithoutUnspecified;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnumWithoutUnspecified;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnum_nexus.MyEnum))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnums;
                return value.map(item => {
                    if (item === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"requiredMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnum_nexus.MyEnum))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnums;
                return value.map(item => {
                    if (item === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"optionalMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnumWithoutUnspecifieds;
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnumWithoutUnspecifieds;
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$enums.testapi.enums.MessageWithEnums;
    },
    sourceType: { module: __filename, export: \\"_$testapis$enums$testapi$enums$MessageWithEnums\\" }
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MessageWithEnumsInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
import * as _$MyEnum_nexus from \\"./MyEnum.nexus\\";
import * as _$MyEnumWithoutUnspecified_nexus from \\"./MyEnumWithoutUnspecified.nexus\\";
export const MessageWithEnumsInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageWithEnumsInput\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(_$MyEnum_nexus.MyEnum),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(_$MyEnum_nexus.MyEnum),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnum_nexus.MyEnum))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnum_nexus.MyEnum))),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$MyEnumWithoutUnspecified_nexus.MyEnumWithoutUnspecified))),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageWithEnumsInput\\"]): _$testapis$enums.testapi.enums.MessageWithEnums => {
        const output = new _$testapis$enums.testapi.enums.MessageWithEnums();
        output.requiredMyEnum = input.requiredMyEnum;
        if (input.optionalMyEnum != null) {
            output.optionalMyEnum = input.optionalMyEnum;
        }
        output.requiredMyEnumWithoutUnspecified = input.requiredMyEnumWithoutUnspecified;
        if (input.optionalMyEnumWithoutUnspecified != null) {
            output.optionalMyEnumWithoutUnspecified = input.optionalMyEnumWithoutUnspecified;
        }
        output.requiredMyEnums = input.requiredMyEnums.map(v => v);
        output.optionalMyEnums = input.optionalMyEnums.map(v => v);
        output.requiredMyEnumWithoutUnspecifieds = input.requiredMyEnumWithoutUnspecifieds.map(v => v);
        output.optionalMyEnumWithoutUnspecifieds = input.optionalMyEnumWithoutUnspecifieds.map(v => v);
        return output;
    }
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MyEnum.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
export const MyEnum = nexus.enumType({
    name: \\"MyEnum\\",
    members: [
        {
            name: \\"MY_ENUM_FOO\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_BAR\\",
            description: \\"This is Bar.\\",
            value: 2
        },
        {
            name: \\"MY_ENUM_BAZ\\",
            value: 3
        }
    ]
});
"
`;

exports[`protobuf enums generates nexus DSLs with graphql_type file layout: enums/MyEnumWithoutUnspecified.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
export const MyEnumWithoutUnspecified = nexus.enumType({
    name: \\"MyEnumWithoutUnspecified\\",
    members: [
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_FOO\\",
            value: 0
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAR\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAZ\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf enums with native protobuf generates nexus DSLs: enums/enums_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$enums$enums_pb from \\"./testapis/enums/enums_pb\\";
export type _$testapis$enums$enums_pb$MessageWithEnums = _$testapis$enums$enums_pb.MessageWithEnums;
export const MessageWithEnums = nexus.objectType({
    name: \\"MessageWithEnums\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(\\"MyEnum\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredMyEnum();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                if (value === _$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                    throw new Error(\\"requiredMyEnum is required field. But got unspecified.\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(\\"MyEnum\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalMyEnum();
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredMyEnumWithoutUnspecified();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalMyEnumWithoutUnspecified();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredMyEnumsList();
                return value.map(item => {
                    if (item === _$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"requiredMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalMyEnumsList();
                return value.map(item => {
                    if (item === _$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"optionalMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredMyEnumWithoutUnspecifiedsList();
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalMyEnumWithoutUnspecifiedsList();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$enums$enums_pb.MessageWithEnums;
    },
    sourceType: { module: __filename, export: \\"_$testapis$enums$enums_pb$MessageWithEnums\\" }
});
export const MessageWithEnumsInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageWithEnumsInput\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(\\"MyEnum\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(\\"MyEnum\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageWithEnumsInput\\"]): _$testapis$enums$enums_pb.MessageWithEnums => {
        const output = new _$testapis$enums$enums_pb.MessageWithEnums();
        output.setRequiredMyEnum(input.requiredMyEnum);
        if (input.optionalMyEnum != null) {
            output.setOptionalMyEnum(input.optionalMyEnum);
        }
        output.setRequiredMyEnumWithoutUnspecified(input.requiredMyEnumWithoutUnspecified);
        if (input.optionalMyEnumWithoutUnspecified != null) {
            output.setOptionalMyEnumWithoutUnspecified(input.optionalMyEnumWithoutUnspecified);
        }
        output.setRequiredMyEnumsList(input.requiredMyEnums.map(v => v));
        output.setOptionalMyEnumsList(input.optionalMyEnums.map(v => v));
        output.setRequiredMyEnumWithoutUnspecifiedsList(input.requiredMyEnumWithoutUnspecifieds.map(v => v));
        output.setOptionalMyEnumWithoutUnspecifiedsList(input.optionalMyEnumWithoutUnspecifieds.map(v => v));
        return output;
    }
});
export const MyEnum = nexus.enumType({
    name: \\"MyEnum\\",
    members: [
        {
            name: \\"MY_ENUM_FOO\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_BAR\\",
            description: \\"This is Bar.\\",
            value: 2
        },
        {
            name: \\"MY_ENUM_BAZ\\",
            value: 3
        }
    ]
});
export const MyEnumWithoutUnspecified = nexus.enumType({
    name: \\"MyEnumWithoutUnspecified\\",
    members: [
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_FOO\\",
            value: 0
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAR\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAZ\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf enums with protobufjs generates nexus DSLs: enums/enums_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$enums from \\"./testapis/enums\\";
export type _$testapis$enums$testapi$enums$MessageWithEnums = _$testapis$enums.testapi.enums.MessageWithEnums;
export const MessageWithEnums = nexus.objectType({
    name: \\"MessageWithEnums\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(\\"MyEnum\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnum;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                if (value === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                    throw new Error(\\"requiredMyEnum is required field. But got unspecified.\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(\\"MyEnum\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnum;
                if (value == null) {
                    return null;
                }
                if (value === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnumWithoutUnspecified;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnumWithoutUnspecified;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnums;
                return value.map(item => {
                    if (item === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"requiredMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnums;
                return value.map(item => {
                    if (item === _$testapis$enums.testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error(\\"optionalMyEnums is required field. But got unspecified.\\");
                    }
                    return item;
                });
            }
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredMyEnumWithoutUnspecifieds;
                return value;
            }
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalMyEnumWithoutUnspecifieds;
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$enums.testapi.enums.MessageWithEnums;
    },
    sourceType: { module: __filename, export: \\"_$testapis$enums$testapi$enums$MessageWithEnums\\" }
});
export const MessageWithEnumsInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageWithEnumsInput\\",
    definition(t) {
        t.field(\\"requiredMyEnum\\", {
            type: nexus.nonNull(\\"MyEnum\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnum\\", {
            type: nexus.nullable(\\"MyEnum\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecified\\", {
            type: nexus.nonNull(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecified\\", {
            type: nexus.nullable(\\"MyEnumWithoutUnspecified\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnums\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnum\\"))),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalMyEnumWithoutUnspecifieds\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"MyEnumWithoutUnspecified\\"))),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageWithEnumsInput\\"]): _$testapis$enums.testapi.enums.MessageWithEnums => {
        const output = new _$testapis$enums.testapi.enums.MessageWithEnums();
        output.requiredMyEnum = input.requiredMyEnum;
        if (input.optionalMyEnum != null) {
            output.optionalMyEnum = input.optionalMyEnum;
        }
        output.requiredMyEnumWithoutUnspecified = input.requiredMyEnumWithoutUnspecified;
        if (input.optionalMyEnumWithoutUnspecified != null) {
            output.optionalMyEnumWithoutUnspecified = input.optionalMyEnumWithoutUnspecified;
        }
        output.requiredMyEnums = input.requiredMyEnums.map(v => v);
        output.optionalMyEnums = input.optionalMyEnums.map(v => v);
        output.requiredMyEnumWithoutUnspecifieds = input.requiredMyEnumWithoutUnspecifieds.map(v => v);
        output.optionalMyEnumWithoutUnspecifieds = input.optionalMyEnumWithoutUnspecifieds.map(v => v);
        return output;
    }
});
export const MyEnum = nexus.enumType({
    name: \\"MyEnum\\",
    members: [
        {
            name: \\"MY_ENUM_FOO\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_BAR\\",
            description: \\"This is Bar.\\",
            value: 2
        },
        {
            name: \\"MY_ENUM_BAZ\\",
            value: 3
        }
    ]
});
export const MyEnumWithoutUnspecified = nexus.enumType({
    name: \\"MyEnumWithoutUnspecified\\",
    members: [
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_FOO\\",
            value: 0
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAR\\",
            value: 1
        },
        {
            name: \\"MY_ENUM_WITHOUT_UNSPECIFIED_BAZ\\",
            value: 2
        }
    ]
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage1.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$oneof from \\"./testapis/oneof\\";
export type _$testapis$oneof$testapis$oneof$OneofMemberMessage1 = _$testapis$oneof.testapis.oneof.OneofMemberMessage1;
export const OneofMemberMessage1 = nexus.objectType({
    name: \\"OneofMemberMessage1\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofMemberMessage1;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofMemberMessage1\\" }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage1Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
export const OneofMemberMessage1Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage1Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage1Input\\"]): _$testapis$oneof.testapis.oneof.OneofMemberMessage1 => {
        const output = new _$testapis$oneof.testapis.oneof.OneofMemberMessage1();
        output.body = input.body;
        return output;
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage2.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$oneof from \\"./testapis/oneof\\";
export type _$testapis$oneof$testapis$oneof$OneofMemberMessage2 = _$testapis$oneof.testapis.oneof.OneofMemberMessage2;
export const OneofMemberMessage2 = nexus.objectType({
    name: \\"OneofMemberMessage2\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.imageUrl;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofMemberMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofMemberMessage2\\" }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofMemberMessage2Input.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
export const OneofMemberMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage2Input\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage2Input\\"]): _$testapis$oneof.testapis.oneof.OneofMemberMessage2 => {
        const output = new _$testapis$oneof.testapis.oneof.OneofMemberMessage2();
        output.imageUrl = input.imageUrl;
        return output;
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParent.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$OneofParentOptionalOneofMembers_nexus from \\"./OneofParentOptionalOneofMembers.nexus\\";
import * as _$OneofParentRequiredOneofMembers_nexus from \\"./OneofParentRequiredOneofMembers.nexus\\";
import * as _$testapis$oneof from \\"./testapis/oneof\\";
export type _$testapis$oneof$testapis$oneof$OneofParent = _$testapis$oneof.testapis.oneof.OneofParent;
export const OneofParent = nexus.objectType({
    name: \\"OneofParent\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.normalField;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredOneofMembers\\", {
            type: nexus.nonNull(_$OneofParentRequiredOneofMembers_nexus.OneofParentRequiredOneofMembers),
            description: \\"Required. disallow not_set.\\",
            resolve(root) {
                if (root.requiredMessage1) {
                    return root.requiredMessage1;
                }
                if (root.requiredMessage2) {
                    return root.requiredMessage2;
                }
                throw \\"unreachable\\";
            }
        });
        t.field(\\"optionalOneofMembers\\", {
            type: nexus.nullable(_$OneofParentOptionalOneofMembers_nexus.OneofParentOptionalOneofMembers),
            resolve(root) {
                if (root.optoinalMessage1) {
                    return root.optoinalMessage1;
                }
                if (root.optoinalMessage2) {
                    return root.optoinalMessage2;
                }
                return null;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofParent;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofParent\\" }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$OneofMemberMessage1Input_nexus from \\"./OneofMemberMessage1Input.nexus\\";
import * as _$OneofMemberMessage2Input_nexus from \\"./OneofMemberMessage2Input.nexus\\";
export const OneofParentInput = Object.assign(nexus.inputObjectType({
    name: \\"OneofParentInput\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredMessage1\\", {
            type: nexus.nullable(_$OneofMemberMessage1Input_nexus.OneofMemberMessage1Input)
        });
        t.field(\\"requiredMessage2\\", {
            type: nexus.nullable(_$OneofMemberMessage2Input_nexus.OneofMemberMessage2Input)
        });
        t.field(\\"optoinalMessage1\\", {
            type: nexus.nullable(_$OneofMemberMessage1Input_nexus.OneofMemberMessage1Input)
        });
        t.field(\\"optoinalMessage2\\", {
            type: nexus.nullable(_$OneofMemberMessage2Input_nexus.OneofMemberMessage2Input)
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofParentInput\\"]): _$testapis$oneof.testapis.oneof.OneofParent => {
        const output = new _$testapis$oneof.testapis.oneof.OneofParent();
        output.normalField = input.normalField;
        if (input.requiredMessage1 != null) {
            output.requiredMessage1 = _$OneofMemberMessage1Input_nexus.OneofMemberMessage1Input.toProto(input.requiredMessage1);
        }
        if (input.requiredMessage2 != null) {
            output.requiredMessage2 = _$OneofMemberMessage2Input_nexus.OneofMemberMessage2Input.toProto(input.requiredMessage2);
        }
        if (input.optoinalMessage1 != null) {
            output.optoinalMessage1 = _$OneofMemberMessage1Input_nexus.OneofMemberMessage1Input.toProto(input.optoinalMessage1);
        }
        if (input.optoinalMessage2 != null) {
            output.optoinalMessage2 = _$OneofMemberMessage2Input_nexus.OneofMemberMessage2Input.toProto(input.optoinalMessage2);
        }
        return output;
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentOptionalOneofMembers.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$OneofMemberMessage1_nexus from \\"./OneofMemberMessage1.nexus\\";
import * as _$OneofMemberMessage2_nexus from \\"./OneofMemberMessage2.nexus\\";
export const OneofParentOptionalOneofMembers = nexus.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    definition(t) {
        t.members(_$OneofMemberMessage1_nexus.OneofMemberMessage1, _$OneofMemberMessage2_nexus.OneofMemberMessage2);
    }
});
"
`;

exports[`protobuf oneof generates nexus DSLs with graphql_type file layout: oneof/OneofParentRequiredOneofMembers.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$OneofMemberMessage1_nexus from \\"./OneofMemberMessage1.nexus\\";
import * as _$OneofMemberMessage2_nexus from \\"./OneofMemberMessage2.nexus\\";
export const OneofParentRequiredOneofMembers = nexus.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    definition(t) {
        t.members(_$OneofMemberMessage1_nexus.OneofMemberMessage1, _$OneofMemberMessage2_nexus.OneofMemberMessage2);
    }
});
"
`;

exports[`protobuf oneof with native protobuf generates nexus DSLs: oneof/oneof_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$oneof$oneof_pb from \\"./testapis/oneof/oneof_pb\\";
export type _$testapis$oneof$oneof_pb$OneofParent = _$testapis$oneof$oneof_pb.OneofParent;
export type _$testapis$oneof$oneof_pb$OneofMemberMessage1 = _$testapis$oneof$oneof_pb.OneofMemberMessage1;
export type _$testapis$oneof$oneof_pb$OneofMemberMessage2 = _$testapis$oneof$oneof_pb.OneofMemberMessage2;
export const OneofParent = nexus.objectType({
    name: \\"OneofParent\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getNormalField();
                return value;
            }
        });
        t.field(\\"requiredOneofMembers\\", {
            type: nexus.nonNull(\\"OneofParentRequiredOneofMembers\\"),
            description: \\"Required. disallow not_set.\\",
            resolve(root) {
                switch (root.getRequiredOneofMembersCase()) {
                    case _$testapis$oneof$oneof_pb.OneofParent.RequiredOneofMembersCase.REQUIRED_ONEOF_MEMBERS_NOT_SET: {
                        throw \\"unreachable\\";
                    }
                    case _$testapis$oneof$oneof_pb.OneofParent.RequiredOneofMembersCase.REQUIRED_MESSAGE_1: {
                        return root.getRequiredMessage1()!;
                    }
                    case _$testapis$oneof$oneof_pb.OneofParent.RequiredOneofMembersCase.REQUIRED_MESSAGE_2: {
                        return root.getRequiredMessage2()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
        t.field(\\"optionalOneofMembers\\", {
            type: nexus.nullable(\\"OneofParentOptionalOneofMembers\\"),
            resolve(root) {
                switch (root.getOptionalOneofMembersCase()) {
                    case _$testapis$oneof$oneof_pb.OneofParent.OptionalOneofMembersCase.OPTIONAL_ONEOF_MEMBERS_NOT_SET: {
                        return null;
                    }
                    case _$testapis$oneof$oneof_pb.OneofParent.OptionalOneofMembersCase.OPTOINAL_MESSAGE_1: {
                        return root.getOptoinalMessage1()!;
                    }
                    case _$testapis$oneof$oneof_pb.OneofParent.OptionalOneofMembersCase.OPTOINAL_MESSAGE_2: {
                        return root.getOptoinalMessage2()!;
                    }
                    default: {
                        throw \\"unreachable\\";
                    }
                }
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof$oneof_pb.OneofParent;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$oneof_pb$OneofParent\\" }
});
export const OneofMemberMessage1 = nexus.objectType({
    name: \\"OneofMemberMessage1\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getBody();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof$oneof_pb.OneofMemberMessage1;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$oneof_pb$OneofMemberMessage1\\" }
});
export const OneofMemberMessage2 = nexus.objectType({
    name: \\"OneofMemberMessage2\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getImageUrl();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof$oneof_pb.OneofMemberMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$oneof_pb$OneofMemberMessage2\\" }
});
export const OneofParentInput = Object.assign(nexus.inputObjectType({
    name: \\"OneofParentInput\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredMessage1\\", {
            type: nexus.nullable(\\"OneofMemberMessage1Input\\")
        });
        t.field(\\"requiredMessage2\\", {
            type: nexus.nullable(\\"OneofMemberMessage2Input\\")
        });
        t.field(\\"optoinalMessage1\\", {
            type: nexus.nullable(\\"OneofMemberMessage1Input\\")
        });
        t.field(\\"optoinalMessage2\\", {
            type: nexus.nullable(\\"OneofMemberMessage2Input\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofParentInput\\"]): _$testapis$oneof$oneof_pb.OneofParent => {
        const output = new _$testapis$oneof$oneof_pb.OneofParent();
        output.setNormalField(input.normalField);
        if (input.requiredMessage1 != null) {
            output.setRequiredMessage1(OneofMemberMessage1Input.toProto(input.requiredMessage1));
        }
        if (input.requiredMessage2 != null) {
            output.setRequiredMessage2(OneofMemberMessage2Input.toProto(input.requiredMessage2));
        }
        if (input.optoinalMessage1 != null) {
            output.setOptoinalMessage1(OneofMemberMessage1Input.toProto(input.optoinalMessage1));
        }
        if (input.optoinalMessage2 != null) {
            output.setOptoinalMessage2(OneofMemberMessage2Input.toProto(input.optoinalMessage2));
        }
        return output;
    }
});
export const OneofMemberMessage1Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage1Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage1Input\\"]): _$testapis$oneof$oneof_pb.OneofMemberMessage1 => {
        const output = new _$testapis$oneof$oneof_pb.OneofMemberMessage1();
        output.setBody(input.body);
        return output;
    }
});
export const OneofMemberMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage2Input\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage2Input\\"]): _$testapis$oneof$oneof_pb.OneofMemberMessage2 => {
        const output = new _$testapis$oneof$oneof_pb.OneofMemberMessage2();
        output.setImageUrl(input.imageUrl);
        return output;
    }
});
export const OneofParentRequiredOneofMembers = nexus.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    definition(t) {
        t.members(OneofMemberMessage1, OneofMemberMessage2);
    }
});
export const OneofParentOptionalOneofMembers = nexus.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    definition(t) {
        t.members(OneofMemberMessage1, OneofMemberMessage2);
    }
});
"
`;

exports[`protobuf oneof with protobufjs generates nexus DSLs: oneof/oneof_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$oneof from \\"./testapis/oneof\\";
export type _$testapis$oneof$testapis$oneof$OneofParent = _$testapis$oneof.testapis.oneof.OneofParent;
export type _$testapis$oneof$testapis$oneof$OneofMemberMessage1 = _$testapis$oneof.testapis.oneof.OneofMemberMessage1;
export type _$testapis$oneof$testapis$oneof$OneofMemberMessage2 = _$testapis$oneof.testapis.oneof.OneofMemberMessage2;
export const OneofParent = nexus.objectType({
    name: \\"OneofParent\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.normalField;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredOneofMembers\\", {
            type: nexus.nonNull(\\"OneofParentRequiredOneofMembers\\"),
            description: \\"Required. disallow not_set.\\",
            resolve(root) {
                if (root.requiredMessage1) {
                    return root.requiredMessage1;
                }
                if (root.requiredMessage2) {
                    return root.requiredMessage2;
                }
                throw \\"unreachable\\";
            }
        });
        t.field(\\"optionalOneofMembers\\", {
            type: nexus.nullable(\\"OneofParentOptionalOneofMembers\\"),
            resolve(root) {
                if (root.optoinalMessage1) {
                    return root.optoinalMessage1;
                }
                if (root.optoinalMessage2) {
                    return root.optoinalMessage2;
                }
                return null;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofParent;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofParent\\" }
});
export const OneofMemberMessage1 = nexus.objectType({
    name: \\"OneofMemberMessage1\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofMemberMessage1;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofMemberMessage1\\" }
});
export const OneofMemberMessage2 = nexus.objectType({
    name: \\"OneofMemberMessage2\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.imageUrl;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$oneof.testapis.oneof.OneofMemberMessage2;
    },
    sourceType: { module: __filename, export: \\"_$testapis$oneof$testapis$oneof$OneofMemberMessage2\\" }
});
export const OneofParentInput = Object.assign(nexus.inputObjectType({
    name: \\"OneofParentInput\\",
    definition(t) {
        t.field(\\"normalField\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredMessage1\\", {
            type: nexus.nullable(\\"OneofMemberMessage1Input\\")
        });
        t.field(\\"requiredMessage2\\", {
            type: nexus.nullable(\\"OneofMemberMessage2Input\\")
        });
        t.field(\\"optoinalMessage1\\", {
            type: nexus.nullable(\\"OneofMemberMessage1Input\\")
        });
        t.field(\\"optoinalMessage2\\", {
            type: nexus.nullable(\\"OneofMemberMessage2Input\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofParentInput\\"]): _$testapis$oneof.testapis.oneof.OneofParent => {
        const output = new _$testapis$oneof.testapis.oneof.OneofParent();
        output.normalField = input.normalField;
        if (input.requiredMessage1 != null) {
            output.requiredMessage1 = OneofMemberMessage1Input.toProto(input.requiredMessage1);
        }
        if (input.requiredMessage2 != null) {
            output.requiredMessage2 = OneofMemberMessage2Input.toProto(input.requiredMessage2);
        }
        if (input.optoinalMessage1 != null) {
            output.optoinalMessage1 = OneofMemberMessage1Input.toProto(input.optoinalMessage1);
        }
        if (input.optoinalMessage2 != null) {
            output.optoinalMessage2 = OneofMemberMessage2Input.toProto(input.optoinalMessage2);
        }
        return output;
    }
});
export const OneofMemberMessage1Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage1Input\\",
    definition(t) {
        t.field(\\"body\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage1Input\\"]): _$testapis$oneof.testapis.oneof.OneofMemberMessage1 => {
        const output = new _$testapis$oneof.testapis.oneof.OneofMemberMessage1();
        output.body = input.body;
        return output;
    }
});
export const OneofMemberMessage2Input = Object.assign(nexus.inputObjectType({
    name: \\"OneofMemberMessage2Input\\",
    definition(t) {
        t.field(\\"imageUrl\\", {
            type: nexus.nonNull(\\"String\\")
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"OneofMemberMessage2Input\\"]): _$testapis$oneof.testapis.oneof.OneofMemberMessage2 => {
        const output = new _$testapis$oneof.testapis.oneof.OneofMemberMessage2();
        output.imageUrl = input.imageUrl;
        return output;
    }
});
export const OneofParentRequiredOneofMembers = nexus.unionType({
    name: \\"OneofParentRequiredOneofMembers\\",
    description: \\"Required. disallow not_set.\\",
    definition(t) {
        t.members(OneofMemberMessage1, OneofMemberMessage2);
    }
});
export const OneofParentOptionalOneofMembers = nexus.unionType({
    name: \\"OneofParentOptionalOneofMembers\\",
    definition(t) {
        t.members(OneofMemberMessage1, OneofMemberMessage2);
    }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: hello/Hello.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
import * as _$Primitives_nexus from \\"./Primitives.nexus\\";
import * as _$testapis$hello from \\"./testapis/hello\\";
export type _$testapis$hello$testapis$hello$Hello = _$testapis$hello.testapis.hello.Hello;
export const Hello = nexus.objectType({
    name: \\"Hello\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(_$Primitives_nexus.Primitives),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredPrimitives;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(_$Primitives_nexus.Primitives),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalPrimitives;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$Primitives_nexus.Primitives))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredPrimitivesList;
                return value;
            }
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(_$Primitives_nexus.Primitives),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalPrimitivesList;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello.testapis.hello.Hello;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$testapis$hello$Hello\\" }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: hello/HelloInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
import * as _$PrimitivesInput_nexus from \\"./PrimitivesInput.nexus\\";
export const HelloInput = Object.assign(nexus.inputObjectType({
    name: \\"HelloInput\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(_$PrimitivesInput_nexus.PrimitivesInput),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(_$PrimitivesInput_nexus.PrimitivesInput),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(_$PrimitivesInput_nexus.PrimitivesInput))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(_$PrimitivesInput_nexus.PrimitivesInput),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"HelloInput\\"]): _$testapis$hello.testapis.hello.Hello => {
        const output = new _$testapis$hello.testapis.hello.Hello();
        output.requiredPrimitives = _$PrimitivesInput_nexus.PrimitivesInput.toProto(input.requiredPrimitives);
        if (input.optionalPrimitives != null) {
            output.optionalPrimitives = _$PrimitivesInput_nexus.PrimitivesInput.toProto(input.optionalPrimitives);
        }
        output.requiredPrimitivesList = input.requiredPrimitivesList.map(v => _$PrimitivesInput_nexus.PrimitivesInput.toProto(v));
        if (input.optionalPrimitivesList != null) {
            output.optionalPrimitivesList = _$PrimitivesInput_nexus.PrimitivesInput.toProto(input.optionalPrimitivesList);
        }
        return output;
    }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: hello/Primitives.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$hello from \\"./testapis/hello\\";
export type _$testapis$hello$testapis$hello$Primitives = _$testapis$hello.testapis.hello.Primitives;
export const Primitives = nexus.objectType({
    name: \\"Primitives\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.requiredDoubleValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.requiredFloatValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredInt32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredInt64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredUint32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredUint64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredSint32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredSint64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredFixed32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredFixed64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredSfixed32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredSfixed64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\"),
            resolve(root) {
                const value = root.requiredBoolValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredStringValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.requiredDoubleValues;
                return value;
            }
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.requiredFloatValues;
                return value;
            }
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredInt32Values;
                return value;
            }
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredInt64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredUint32Values;
                return value;
            }
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredUint64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredSint32Values;
                return value;
            }
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredSint64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredFixed32Values;
                return value;
            }
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredFixed64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredSfixed32Values;
                return value;
            }
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredSfixed64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\"))),
            resolve(root) {
                const value = root.requiredBoolValues;
                return value;
            }
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredStringValues;
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello.testapis.hello.Primitives;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$testapis$hello$Primitives\\" }
});
"
`;

exports[`simple proto file generates nexus DSLs with graphql_type file layout: hello/PrimitivesInput.nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
export const PrimitivesInput = Object.assign(nexus.inputObjectType({
    name: \\"PrimitivesInput\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\")
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\")))
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"PrimitivesInput\\"]): _$testapis$hello.testapis.hello.Primitives => {
        const output = new _$testapis$hello.testapis.hello.Primitives();
        output.requiredDoubleValue = input.requiredDoubleValue;
        output.requiredFloatValue = input.requiredFloatValue;
        output.requiredInt32Value = input.requiredInt32Value;
        output.requiredInt64Value = parseInt(input.requiredInt64Value);
        output.requiredUint32Value = input.requiredUint32Value;
        output.requiredUint64Value = parseInt(input.requiredUint64Value);
        output.requiredSint32Value = input.requiredSint32Value;
        output.requiredSint64Value = parseInt(input.requiredSint64Value);
        output.requiredFixed32Value = input.requiredFixed32Value;
        output.requiredFixed64Value = parseInt(input.requiredFixed64Value);
        output.requiredSfixed32Value = input.requiredSfixed32Value;
        output.requiredSfixed64Value = parseInt(input.requiredSfixed64Value);
        output.requiredBoolValue = input.requiredBoolValue;
        output.requiredStringValue = input.requiredStringValue;
        output.requiredDoubleValues = input.requiredDoubleValues.map(v => v);
        output.requiredFloatValues = input.requiredFloatValues.map(v => v);
        output.requiredInt32Values = input.requiredInt32Values.map(v => v);
        output.requiredInt64Values = input.requiredInt64Values.map(v => parseInt(v));
        output.requiredUint32Values = input.requiredUint32Values.map(v => v);
        output.requiredUint64Values = input.requiredUint64Values.map(v => parseInt(v));
        output.requiredSint32Values = input.requiredSint32Values.map(v => v);
        output.requiredSint64Values = input.requiredSint64Values.map(v => parseInt(v));
        output.requiredFixed32Values = input.requiredFixed32Values.map(v => v);
        output.requiredFixed64Values = input.requiredFixed64Values.map(v => parseInt(v));
        output.requiredSfixed32Values = input.requiredSfixed32Values.map(v => v);
        output.requiredSfixed64Values = input.requiredSfixed64Values.map(v => parseInt(v));
        output.requiredBoolValues = input.requiredBoolValues.map(v => v);
        output.requiredStringValues = input.requiredStringValues.map(v => v);
        return output;
    }
});
"
`;

exports[`simple proto file with native protobuf generates nexus DSLs: hello/hello_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$hello$hello_pb from \\"./testapis/hello/hello_pb\\";
export type _$testapis$hello$hello_pb$Hello = _$testapis$hello$hello_pb.Hello;
export type _$testapis$hello$hello_pb$Primitives = _$testapis$hello$hello_pb.Primitives;
export const Hello = nexus.objectType({
    name: \\"Hello\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(\\"Primitives\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredPrimitives();
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(\\"Primitives\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalPrimitives();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Primitives\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.getRequiredPrimitivesListList();
                return value;
            }
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(\\"Primitives\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.getOptionalPrimitivesList();
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello$hello_pb.Hello;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$hello_pb$Hello\\" }
});
export const Primitives = nexus.objectType({
    name: \\"Primitives\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.getRequiredDoubleValue();
                return value;
            }
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.getRequiredFloatValue();
                return value;
            }
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.getRequiredInt32Value();
                return value;
            }
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredInt64Value();
                return value.toString();
            }
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.getRequiredUint32Value();
                return value;
            }
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredUint64Value();
                return value.toString();
            }
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.getRequiredSint32Value();
                return value;
            }
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredSint64Value();
                return value.toString();
            }
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.getRequiredFixed32Value();
                return value;
            }
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredFixed64Value();
                return value.toString();
            }
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.getRequiredSfixed32Value();
                return value;
            }
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredSfixed64Value();
                return value.toString();
            }
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\"),
            resolve(root) {
                const value = root.getRequiredBoolValue();
                return value;
            }
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.getRequiredStringValue();
                return value;
            }
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.getRequiredDoubleValuesList();
                return value;
            }
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.getRequiredFloatValuesList();
                return value;
            }
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getRequiredInt32ValuesList();
                return value;
            }
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredInt64ValuesList();
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getRequiredUint32ValuesList();
                return value;
            }
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredUint64ValuesList();
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getRequiredSint32ValuesList();
                return value;
            }
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredSint64ValuesList();
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getRequiredFixed32ValuesList();
                return value;
            }
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredFixed64ValuesList();
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getRequiredSfixed32ValuesList();
                return value;
            }
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredSfixed64ValuesList();
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\"))),
            resolve(root) {
                const value = root.getRequiredBoolValuesList();
                return value;
            }
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getRequiredStringValuesList();
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello$hello_pb.Primitives;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$hello_pb$Primitives\\" }
});
export const HelloInput = Object.assign(nexus.inputObjectType({
    name: \\"HelloInput\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(\\"PrimitivesInput\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(\\"PrimitivesInput\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"PrimitivesInput\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(\\"PrimitivesInput\\"),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"HelloInput\\"]): _$testapis$hello$hello_pb.Hello => {
        const output = new _$testapis$hello$hello_pb.Hello();
        output.setRequiredPrimitives(PrimitivesInput.toProto(input.requiredPrimitives));
        if (input.optionalPrimitives != null) {
            output.setOptionalPrimitives(PrimitivesInput.toProto(input.optionalPrimitives));
        }
        output.setRequiredPrimitivesListList(input.requiredPrimitivesList.map(v => PrimitivesInput.toProto(v)));
        if (input.optionalPrimitivesList != null) {
            output.setOptionalPrimitivesList(PrimitivesInput.toProto(input.optionalPrimitivesList));
        }
        return output;
    }
});
export const PrimitivesInput = Object.assign(nexus.inputObjectType({
    name: \\"PrimitivesInput\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\")
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\")))
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"PrimitivesInput\\"]): _$testapis$hello$hello_pb.Primitives => {
        const output = new _$testapis$hello$hello_pb.Primitives();
        output.setRequiredDoubleValue(input.requiredDoubleValue);
        output.setRequiredFloatValue(input.requiredFloatValue);
        output.setRequiredInt32Value(input.requiredInt32Value);
        output.setRequiredInt64Value(parseInt(input.requiredInt64Value));
        output.setRequiredUint32Value(input.requiredUint32Value);
        output.setRequiredUint64Value(parseInt(input.requiredUint64Value));
        output.setRequiredSint32Value(input.requiredSint32Value);
        output.setRequiredSint64Value(parseInt(input.requiredSint64Value));
        output.setRequiredFixed32Value(input.requiredFixed32Value);
        output.setRequiredFixed64Value(parseInt(input.requiredFixed64Value));
        output.setRequiredSfixed32Value(input.requiredSfixed32Value);
        output.setRequiredSfixed64Value(parseInt(input.requiredSfixed64Value));
        output.setRequiredBoolValue(input.requiredBoolValue);
        output.setRequiredStringValue(input.requiredStringValue);
        output.setRequiredDoubleValuesList(input.requiredDoubleValues.map(v => v));
        output.setRequiredFloatValuesList(input.requiredFloatValues.map(v => v));
        output.setRequiredInt32ValuesList(input.requiredInt32Values.map(v => v));
        output.setRequiredInt64ValuesList(input.requiredInt64Values.map(v => parseInt(v)));
        output.setRequiredUint32ValuesList(input.requiredUint32Values.map(v => v));
        output.setRequiredUint64ValuesList(input.requiredUint64Values.map(v => parseInt(v)));
        output.setRequiredSint32ValuesList(input.requiredSint32Values.map(v => v));
        output.setRequiredSint64ValuesList(input.requiredSint64Values.map(v => parseInt(v)));
        output.setRequiredFixed32ValuesList(input.requiredFixed32Values.map(v => v));
        output.setRequiredFixed64ValuesList(input.requiredFixed64Values.map(v => parseInt(v)));
        output.setRequiredSfixed32ValuesList(input.requiredSfixed32Values.map(v => v));
        output.setRequiredSfixed64ValuesList(input.requiredSfixed64Values.map(v => parseInt(v)));
        output.setRequiredBoolValuesList(input.requiredBoolValues.map(v => v));
        output.setRequiredStringValuesList(input.requiredStringValues.map(v => v));
        return output;
    }
});
"
`;

exports[`simple proto file with protobufjs generates nexus DSLs: hello/hello_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/hello/hello.proto

import * as nexus from \\"nexus\\";
import * as _$testapis$hello from \\"./testapis/hello\\";
export type _$testapis$hello$testapis$hello$Hello = _$testapis$hello.testapis.hello.Hello;
export type _$testapis$hello$testapis$hello$Primitives = _$testapis$hello.testapis.hello.Primitives;
export const Hello = nexus.objectType({
    name: \\"Hello\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(\\"Primitives\\"),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredPrimitives;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(\\"Primitives\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalPrimitives;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Primitives\\"))),
            description: \\"Required.\\",
            resolve(root) {
                const value = root.requiredPrimitivesList;
                return value;
            }
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(\\"Primitives\\"),
            description: \\"Optional.\\",
            resolve(root) {
                const value = root.optionalPrimitivesList;
                if (value == null) {
                    return null;
                }
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello.testapis.hello.Hello;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$testapis$hello$Hello\\" }
});
export const Primitives = nexus.objectType({
    name: \\"Primitives\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.requiredDoubleValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\"),
            resolve(root) {
                const value = root.requiredFloatValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredInt32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredInt64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredUint32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredUint64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredSint32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredSint64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredFixed32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredFixed64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\"),
            resolve(root) {
                const value = root.requiredSfixed32Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredSfixed64Value;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value.toString();
            }
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\"),
            resolve(root) {
                const value = root.requiredBoolValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\"),
            resolve(root) {
                const value = root.requiredStringValue;
                if (value == null) {
                    throw new Error(\\"Cannot return null for non-nullable field\\");
                }
                return value;
            }
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.requiredDoubleValues;
                return value;
            }
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.requiredFloatValues;
                return value;
            }
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredInt32Values;
                return value;
            }
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredInt64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredUint32Values;
                return value;
            }
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredUint64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredSint32Values;
                return value;
            }
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredSint64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredFixed32Values;
                return value;
            }
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredFixed64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.requiredSfixed32Values;
                return value;
            }
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredSfixed64Values;
                return value.map(item => {
                    return item.toString();
                });
            }
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\"))),
            resolve(root) {
                const value = root.requiredBoolValues;
                return value;
            }
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.requiredStringValues;
                return value;
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$hello.testapis.hello.Primitives;
    },
    sourceType: { module: __filename, export: \\"_$testapis$hello$testapis$hello$Primitives\\" }
});
export const HelloInput = Object.assign(nexus.inputObjectType({
    name: \\"HelloInput\\",
    definition(t) {
        t.field(\\"requiredPrimitives\\", {
            type: nexus.nonNull(\\"PrimitivesInput\\"),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitives\\", {
            type: nexus.nullable(\\"PrimitivesInput\\"),
            description: \\"Optional.\\"
        });
        t.field(\\"requiredPrimitivesList\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"PrimitivesInput\\"))),
            description: \\"Required.\\"
        });
        t.field(\\"optionalPrimitivesList\\", {
            type: nexus.nullable(\\"PrimitivesInput\\"),
            description: \\"Optional.\\"
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"HelloInput\\"]): _$testapis$hello.testapis.hello.Hello => {
        const output = new _$testapis$hello.testapis.hello.Hello();
        output.requiredPrimitives = PrimitivesInput.toProto(input.requiredPrimitives);
        if (input.optionalPrimitives != null) {
            output.optionalPrimitives = PrimitivesInput.toProto(input.optionalPrimitives);
        }
        output.requiredPrimitivesList = input.requiredPrimitivesList.map(v => PrimitivesInput.toProto(v));
        if (input.optionalPrimitivesList != null) {
            output.optionalPrimitivesList = PrimitivesInput.toProto(input.optionalPrimitivesList);
        }
        return output;
    }
});
export const PrimitivesInput = Object.assign(nexus.inputObjectType({
    name: \\"PrimitivesInput\\",
    definition(t) {
        t.field(\\"requiredDoubleValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredFloatValue\\", {
            type: nexus.nonNull(\\"Float\\")
        });
        t.field(\\"requiredInt32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredInt64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredUint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredUint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSint32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSint64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredFixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredFixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredSfixed32Value\\", {
            type: nexus.nonNull(\\"Int\\")
        });
        t.field(\\"requiredSfixed64Value\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredBoolValue\\", {
            type: nexus.nonNull(\\"Boolean\\")
        });
        t.field(\\"requiredStringValue\\", {
            type: nexus.nonNull(\\"String\\")
        });
        t.field(\\"requiredDoubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredFloatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"requiredInt32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredInt64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredUint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredUint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredFixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredFixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredSfixed32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"requiredSfixed64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"requiredBoolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\")))
        });
        t.field(\\"requiredStringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"PrimitivesInput\\"]): _$testapis$hello.testapis.hello.Primitives => {
        const output = new _$testapis$hello.testapis.hello.Primitives();
        output.requiredDoubleValue = input.requiredDoubleValue;
        output.requiredFloatValue = input.requiredFloatValue;
        output.requiredInt32Value = input.requiredInt32Value;
        output.requiredInt64Value = parseInt(input.requiredInt64Value);
        output.requiredUint32Value = input.requiredUint32Value;
        output.requiredUint64Value = parseInt(input.requiredUint64Value);
        output.requiredSint32Value = input.requiredSint32Value;
        output.requiredSint64Value = parseInt(input.requiredSint64Value);
        output.requiredFixed32Value = input.requiredFixed32Value;
        output.requiredFixed64Value = parseInt(input.requiredFixed64Value);
        output.requiredSfixed32Value = input.requiredSfixed32Value;
        output.requiredSfixed64Value = parseInt(input.requiredSfixed64Value);
        output.requiredBoolValue = input.requiredBoolValue;
        output.requiredStringValue = input.requiredStringValue;
        output.requiredDoubleValues = input.requiredDoubleValues.map(v => v);
        output.requiredFloatValues = input.requiredFloatValues.map(v => v);
        output.requiredInt32Values = input.requiredInt32Values.map(v => v);
        output.requiredInt64Values = input.requiredInt64Values.map(v => parseInt(v));
        output.requiredUint32Values = input.requiredUint32Values.map(v => v);
        output.requiredUint64Values = input.requiredUint64Values.map(v => parseInt(v));
        output.requiredSint32Values = input.requiredSint32Values.map(v => v);
        output.requiredSint64Values = input.requiredSint64Values.map(v => parseInt(v));
        output.requiredFixed32Values = input.requiredFixed32Values.map(v => v);
        output.requiredFixed64Values = input.requiredFixed64Values.map(v => parseInt(v));
        output.requiredSfixed32Values = input.requiredSfixed32Values.map(v => v);
        output.requiredSfixed64Values = input.requiredSfixed64Values.map(v => parseInt(v));
        output.requiredBoolValues = input.requiredBoolValues.map(v => v);
        output.requiredStringValues = input.requiredStringValues.map(v => v);
        return output;
    }
});
"
`;

exports[`well-known protobuf types with native protobuf generates nexus DSLs: wktypes/well_known_types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

import * as $$proto_nexus$google_protobuf from \\"@proto-nexus/google-protobuf\\";
import * as nexus from \\"nexus\\";
import * as _$testapis$wktypes$well_known_types_pb from \\"./testapis/wktypes/well_known_types_pb\\";
export type _$testapis$wktypes$well_known_types_pb$Message = _$testapis$wktypes$well_known_types_pb.Message;
export const Message = nexus.objectType({
    name: \\"Message\\",
    definition(t) {
        t.field(\\"timestamp\\", {
            type: nexus.nullable(\\"DateTime\\"),
            resolve(root) {
                const value = root.getTimestamp();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.timestampToDate(value);
            }
        });
        t.field(\\"int32Value\\", {
            type: nexus.nullable(\\"Int\\"),
            resolve(root) {
                const value = root.getInt32Value();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapInt32Value(value);
            }
        });
        t.field(\\"int64Value\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.getInt64Value();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapInt64Value(value)?.toString() ?? null;
            }
        });
        t.field(\\"uint32Value\\", {
            type: nexus.nullable(\\"Int\\"),
            resolve(root) {
                const value = root.getUint32Value();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapUInt32Value(value);
            }
        });
        t.field(\\"uint64Value\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.getUint64Value();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapUInt64Value(value)?.toString() ?? null;
            }
        });
        t.field(\\"floatValue\\", {
            type: nexus.nullable(\\"Float\\"),
            resolve(root) {
                const value = root.getFloatValue();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapFloatValue(value);
            }
        });
        t.field(\\"doubleValue\\", {
            type: nexus.nullable(\\"Float\\"),
            resolve(root) {
                const value = root.getDoubleValue();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapDoubleValue(value);
            }
        });
        t.field(\\"boolValue\\", {
            type: nexus.nullable(\\"Boolean\\"),
            resolve(root) {
                const value = root.getBoolValue();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapBoolValue(value);
            }
        });
        t.field(\\"stringValue\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.getStringValue();
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$google_protobuf.unwrapStringValue(value);
            }
        });
        t.field(\\"timestamps\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"DateTime\\"))),
            resolve(root) {
                const value = root.getTimestampsList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.timestampToDate(item);
                });
            }
        });
        t.field(\\"int32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getInt32ValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapInt32Value(item);
                });
            }
        });
        t.field(\\"int64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getInt64ValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapInt64Value(item)?.toString() ?? null;
                });
            }
        });
        t.field(\\"uint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.getUint32ValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapUInt32Value(item);
                });
            }
        });
        t.field(\\"uint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getUint64ValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapUInt64Value(item)?.toString() ?? null;
                });
            }
        });
        t.field(\\"floatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.getFloatValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapFloatValue(item);
                });
            }
        });
        t.field(\\"doubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.getDoubleValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapDoubleValue(item);
                });
            }
        });
        t.field(\\"boolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\"))),
            resolve(root) {
                const value = root.getBoolValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapBoolValue(item);
                });
            }
        });
        t.field(\\"stringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.getStringValuesList();
                return value.map(item => {
                    return $$proto_nexus$google_protobuf.unwrapStringValue(item);
                });
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$wktypes$well_known_types_pb.Message;
    },
    sourceType: { module: __filename, export: \\"_$testapis$wktypes$well_known_types_pb$Message\\" }
});
export const MessageInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageInput\\",
    definition(t) {
        t.field(\\"timestamp\\", {
            type: nexus.nullable(\\"DateTime\\")
        });
        t.field(\\"int32Value\\", {
            type: nexus.nullable(\\"Int\\")
        });
        t.field(\\"int64Value\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"uint32Value\\", {
            type: nexus.nullable(\\"Int\\")
        });
        t.field(\\"uint64Value\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"floatValue\\", {
            type: nexus.nullable(\\"Float\\")
        });
        t.field(\\"doubleValue\\", {
            type: nexus.nullable(\\"Float\\")
        });
        t.field(\\"boolValue\\", {
            type: nexus.nullable(\\"Boolean\\")
        });
        t.field(\\"stringValue\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"timestamps\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"DateTime\\")))
        });
        t.field(\\"int32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"int64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"uint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"uint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"floatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"doubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"boolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\")))
        });
        t.field(\\"stringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageInput\\"]): _$testapis$wktypes$well_known_types_pb.Message => {
        const output = new _$testapis$wktypes$well_known_types_pb.Message();
        if (input.timestamp != null) {
            output.setTimestamp($$proto_nexus$google_protobuf.timestampFromDate(input.timestamp));
        }
        if (input.int32Value != null) {
            output.setInt32Value($$proto_nexus$google_protobuf.wrapInt32Value(input.int32Value));
        }
        if (input.int64Value != null) {
            output.setInt64Value($$proto_nexus$google_protobuf.wrapInt64Value(parseInt(input.int64Value)));
        }
        if (input.uint32Value != null) {
            output.setUint32Value($$proto_nexus$google_protobuf.wrapUInt32Value(input.uint32Value));
        }
        if (input.uint64Value != null) {
            output.setUint64Value($$proto_nexus$google_protobuf.wrapUInt64Value(parseInt(input.uint64Value)));
        }
        if (input.floatValue != null) {
            output.setFloatValue($$proto_nexus$google_protobuf.wrapFloatValue(input.floatValue));
        }
        if (input.doubleValue != null) {
            output.setDoubleValue($$proto_nexus$google_protobuf.wrapDoubleValue(input.doubleValue));
        }
        if (input.boolValue != null) {
            output.setBoolValue($$proto_nexus$google_protobuf.wrapBoolValue(input.boolValue));
        }
        if (input.stringValue != null) {
            output.setStringValue($$proto_nexus$google_protobuf.wrapStringValue(input.stringValue));
        }
        output.setTimestampsList(input.timestamps.map(v => $$proto_nexus$google_protobuf.timestampFromDate(v)));
        output.setInt32ValuesList(input.int32Values.map(v => $$proto_nexus$google_protobuf.wrapInt32Value(v)));
        output.setInt64ValuesList(input.int64Values.map(v => $$proto_nexus$google_protobuf.wrapInt64Value(parseInt(v))));
        output.setUint32ValuesList(input.uint32Values.map(v => $$proto_nexus$google_protobuf.wrapUInt32Value(v)));
        output.setUint64ValuesList(input.uint64Values.map(v => $$proto_nexus$google_protobuf.wrapUInt64Value(parseInt(v))));
        output.setFloatValuesList(input.floatValues.map(v => $$proto_nexus$google_protobuf.wrapFloatValue(v)));
        output.setDoubleValuesList(input.doubleValues.map(v => $$proto_nexus$google_protobuf.wrapDoubleValue(v)));
        output.setBoolValuesList(input.boolValues.map(v => $$proto_nexus$google_protobuf.wrapBoolValue(v)));
        output.setStringValuesList(input.stringValues.map(v => $$proto_nexus$google_protobuf.wrapStringValue(v)));
        return output;
    }
});
"
`;

exports[`well-known protobuf types with protobufjs generates nexus DSLs: wktypes/well_known_types_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

import * as $$proto_nexus$protobufjs from \\"@proto-nexus/protobufjs\\";
import * as nexus from \\"nexus\\";
import * as _$testapis$wktypes from \\"./testapis/wktypes\\";
export type _$testapis$wktypes$testapis$wktypes$Message = _$testapis$wktypes.testapis.wktypes.Message;
export const Message = nexus.objectType({
    name: \\"Message\\",
    definition(t) {
        t.field(\\"timestamp\\", {
            type: nexus.nullable(\\"DateTime\\"),
            resolve(root) {
                const value = root.timestamp;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.timestampToDate(value);
            }
        });
        t.field(\\"int32Value\\", {
            type: nexus.nullable(\\"Int\\"),
            resolve(root) {
                const value = root.int32Value;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapInt32Value(value);
            }
        });
        t.field(\\"int64Value\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.int64Value;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapInt64Value(value)?.toString() ?? null;
            }
        });
        t.field(\\"uint32Value\\", {
            type: nexus.nullable(\\"Int\\"),
            resolve(root) {
                const value = root.uint32Value;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapUInt32Value(value);
            }
        });
        t.field(\\"uint64Value\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.uint64Value;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapUInt64Value(value)?.toString() ?? null;
            }
        });
        t.field(\\"floatValue\\", {
            type: nexus.nullable(\\"Float\\"),
            resolve(root) {
                const value = root.floatValue;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapFloatValue(value);
            }
        });
        t.field(\\"doubleValue\\", {
            type: nexus.nullable(\\"Float\\"),
            resolve(root) {
                const value = root.doubleValue;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapDoubleValue(value);
            }
        });
        t.field(\\"boolValue\\", {
            type: nexus.nullable(\\"Boolean\\"),
            resolve(root) {
                const value = root.boolValue;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapBoolValue(value);
            }
        });
        t.field(\\"stringValue\\", {
            type: nexus.nullable(\\"String\\"),
            resolve(root) {
                const value = root.stringValue;
                if (value == null) {
                    return null;
                }
                return $$proto_nexus$protobufjs.unwrapStringValue(value);
            }
        });
        t.field(\\"timestamps\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"DateTime\\"))),
            resolve(root) {
                const value = root.timestamps;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.timestampToDate(item);
                });
            }
        });
        t.field(\\"int32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.int32Values;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapInt32Value(item);
                });
            }
        });
        t.field(\\"int64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.int64Values;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapInt64Value(item)?.toString() ?? null;
                });
            }
        });
        t.field(\\"uint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\"))),
            resolve(root) {
                const value = root.uint32Values;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapUInt32Value(item);
                });
            }
        });
        t.field(\\"uint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.uint64Values;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapUInt64Value(item)?.toString() ?? null;
                });
            }
        });
        t.field(\\"floatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.floatValues;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapFloatValue(item);
                });
            }
        });
        t.field(\\"doubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\"))),
            resolve(root) {
                const value = root.doubleValues;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapDoubleValue(item);
                });
            }
        });
        t.field(\\"boolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\"))),
            resolve(root) {
                const value = root.boolValues;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapBoolValue(item);
                });
            }
        });
        t.field(\\"stringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\"))),
            resolve(root) {
                const value = root.stringValues;
                return value.map(item => {
                    return $$proto_nexus$protobufjs.unwrapStringValue(item);
                });
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof _$testapis$wktypes.testapis.wktypes.Message;
    },
    sourceType: { module: __filename, export: \\"_$testapis$wktypes$testapis$wktypes$Message\\" }
});
export const MessageInput = Object.assign(nexus.inputObjectType({
    name: \\"MessageInput\\",
    definition(t) {
        t.field(\\"timestamp\\", {
            type: nexus.nullable(\\"DateTime\\")
        });
        t.field(\\"int32Value\\", {
            type: nexus.nullable(\\"Int\\")
        });
        t.field(\\"int64Value\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"uint32Value\\", {
            type: nexus.nullable(\\"Int\\")
        });
        t.field(\\"uint64Value\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"floatValue\\", {
            type: nexus.nullable(\\"Float\\")
        });
        t.field(\\"doubleValue\\", {
            type: nexus.nullable(\\"Float\\")
        });
        t.field(\\"boolValue\\", {
            type: nexus.nullable(\\"Boolean\\")
        });
        t.field(\\"stringValue\\", {
            type: nexus.nullable(\\"String\\")
        });
        t.field(\\"timestamps\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"DateTime\\")))
        });
        t.field(\\"int32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"int64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"uint32Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Int\\")))
        });
        t.field(\\"uint64Values\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
        t.field(\\"floatValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"doubleValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Float\\")))
        });
        t.field(\\"boolValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"Boolean\\")))
        });
        t.field(\\"stringValues\\", {
            type: nexus.nonNull(nexus.list(nexus.nonNull(\\"String\\")))
        });
    }
}), {
    toProto: (input: NexusGen[\\"inputTypes\\"][\\"MessageInput\\"]): _$testapis$wktypes.testapis.wktypes.Message => {
        const output = new _$testapis$wktypes.testapis.wktypes.Message();
        if (input.timestamp != null) {
            output.timestamp = new _$testapis$wktypes.google.protobuf.Timestamp($$proto_nexus$protobufjs.timestampFromDate(input.timestamp));
        }
        if (input.int32Value != null) {
            output.int32Value = new _$testapis$wktypes.google.protobuf.Int32Value($$proto_nexus$protobufjs.wrapInt32Value(input.int32Value));
        }
        if (input.int64Value != null) {
            output.int64Value = new _$testapis$wktypes.google.protobuf.Int64Value($$proto_nexus$protobufjs.wrapInt64Value(parseInt(input.int64Value)));
        }
        if (input.uint32Value != null) {
            output.uint32Value = new _$testapis$wktypes.google.protobuf.UInt32Value($$proto_nexus$protobufjs.wrapUInt32Value(input.uint32Value));
        }
        if (input.uint64Value != null) {
            output.uint64Value = new _$testapis$wktypes.google.protobuf.UInt64Value($$proto_nexus$protobufjs.wrapUInt64Value(parseInt(input.uint64Value)));
        }
        if (input.floatValue != null) {
            output.floatValue = new _$testapis$wktypes.google.protobuf.FloatValue($$proto_nexus$protobufjs.wrapFloatValue(input.floatValue));
        }
        if (input.doubleValue != null) {
            output.doubleValue = new _$testapis$wktypes.google.protobuf.DoubleValue($$proto_nexus$protobufjs.wrapDoubleValue(input.doubleValue));
        }
        if (input.boolValue != null) {
            output.boolValue = new _$testapis$wktypes.google.protobuf.BoolValue($$proto_nexus$protobufjs.wrapBoolValue(input.boolValue));
        }
        if (input.stringValue != null) {
            output.stringValue = new _$testapis$wktypes.google.protobuf.StringValue($$proto_nexus$protobufjs.wrapStringValue(input.stringValue));
        }
        output.timestamps = input.timestamps.map(v => new _$testapis$wktypes.google.protobuf.Timestamp($$proto_nexus$protobufjs.timestampFromDate(v)));
        output.int32Values = input.int32Values.map(v => new _$testapis$wktypes.google.protobuf.Int32Value($$proto_nexus$protobufjs.wrapInt32Value(v)));
        output.int64Values = input.int64Values.map(v => new _$testapis$wktypes.google.protobuf.Int64Value($$proto_nexus$protobufjs.wrapInt64Value(parseInt(v))));
        output.uint32Values = input.uint32Values.map(v => new _$testapis$wktypes.google.protobuf.UInt32Value($$proto_nexus$protobufjs.wrapUInt32Value(v)));
        output.uint64Values = input.uint64Values.map(v => new _$testapis$wktypes.google.protobuf.UInt64Value($$proto_nexus$protobufjs.wrapUInt64Value(parseInt(v))));
        output.floatValues = input.floatValues.map(v => new _$testapis$wktypes.google.protobuf.FloatValue($$proto_nexus$protobufjs.wrapFloatValue(v)));
        output.doubleValues = input.doubleValues.map(v => new _$testapis$wktypes.google.protobuf.DoubleValue($$proto_nexus$protobufjs.wrapDoubleValue(v)));
        output.boolValues = input.boolValues.map(v => new _$testapis$wktypes.google.protobuf.BoolValue($$proto_nexus$protobufjs.wrapBoolValue(v)));
        output.stringValues = input.stringValues.map(v => new _$testapis$wktypes.google.protobuf.StringValue($$proto_nexus$protobufjs.wrapStringValue(v)));
        return output;
    }
});
"
`;
