import { join } from "path";
import { readFile } from "fs/promises";
import { graphql } from "graphql";
import { schema } from "./schema";

it("generates GraphQL schema SDL", async () => {
  expect(await readFile(join(__dirname, "__generated__", "schema.graphql"), "utf-8")).toMatchInlineSnapshot(`
    "### This file was generated by Nexus Schema
    ### Do not make changes to this file directly


    type Message {
      \\"\\"\\"Optional.\\"\\"\\"
      optionalPrimitives: Primitives

      \\"\\"\\"Optional.\\"\\"\\"
      optionalPrimitivesList: [Primitives!]

      \\"\\"\\"Required.\\"\\"\\"
      requiredPrimitives: Primitives!

      \\"\\"\\"Required.\\"\\"\\"
      requiredPrimitivesList: [Primitives!]!
    }

    input MessageInput {
      \\"\\"\\"Optional.\\"\\"\\"
      optionalPrimitives: PrimitivesInput

      \\"\\"\\"Optional.\\"\\"\\"
      optionalPrimitivesList: [PrimitivesInput!]

      \\"\\"\\"Required.\\"\\"\\"
      requiredPrimitives: PrimitivesInput!

      \\"\\"\\"Required.\\"\\"\\"
      requiredPrimitivesList: [PrimitivesInput!]!
    }

    type Primitives {
      requiredBoolValue: Boolean!
      requiredBoolValues: [Boolean!]!
      requiredDoubleValue: Float!
      requiredDoubleValues: [Float!]!
      requiredFixed32Value: Int!
      requiredFixed32Values: [Int!]!
      requiredFixed64Value: String!
      requiredFixed64Values: [String!]!
      requiredFloatValue: Float!
      requiredFloatValues: [Float!]!
      requiredInt32Value: Int!
      requiredInt32Values: [Int!]!
      requiredInt64Value: String!
      requiredInt64Values: [String!]!
      requiredSfixed32Value: Int!
      requiredSfixed32Values: [Int!]!
      requiredSfixed64Value: String!
      requiredSfixed64Values: [String!]!
      requiredSint32Value: Int!
      requiredSint32Values: [Int!]!
      requiredSint64Value: String!
      requiredSint64Values: [String!]!
      requiredStringValue: String!
      requiredStringValues: [String!]!
      requiredUint32Value: Int!
      requiredUint32Values: [Int!]!
      requiredUint64Value: String!
      requiredUint64Values: [String!]!
    }

    input PrimitivesInput {
      requiredBoolValue: Boolean!
      requiredBoolValues: [Boolean!]!
      requiredDoubleValue: Float!
      requiredDoubleValues: [Float!]!
      requiredFixed32Value: Int!
      requiredFixed32Values: [Int!]!
      requiredFixed64Value: String!
      requiredFixed64Values: [String!]!
      requiredFloatValue: Float!
      requiredFloatValues: [Float!]!
      requiredInt32Value: Int!
      requiredInt32Values: [Int!]!
      requiredInt64Value: String!
      requiredInt64Values: [String!]!
      requiredSfixed32Value: Int!
      requiredSfixed32Values: [Int!]!
      requiredSfixed64Value: String!
      requiredSfixed64Values: [String!]!
      requiredSint32Value: Int!
      requiredSint32Values: [Int!]!
      requiredSint64Value: String!
      requiredSint64Values: [String!]!
      requiredStringValue: String!
      requiredStringValues: [String!]!
      requiredUint32Value: Int!
      requiredUint32Values: [Int!]!
      requiredUint64Value: String!
      requiredUint64Values: [String!]!
    }

    type Query {
      test: Message
    }
    "
  `);
});

it("processes a query successfully", async () => {
  const resp = await graphql(
    schema,
    /* GraphQL */ `
      query Test {
        test {
          requiredPrimitives {
            ...Primitives
          }
          optionalPrimitives {
            ...Primitives
          }
          requiredPrimitivesList {
            ...Primitives
          }
          optionalPrimitivesList {
            ...Primitives
          }
        }
      }
      fragment Primitives on Primitives {
        requiredDoubleValue
        requiredFloatValue
        requiredInt32Value
        requiredInt64Value
        requiredUint32Value
        requiredUint64Value
        requiredSint32Value
        requiredSint64Value
        requiredFixed32Value
        requiredFixed64Value
        requiredSfixed32Value
        requiredSfixed64Value
        requiredBoolValue
        requiredStringValue
      }
    `
  );
  expect(resp).toMatchInlineSnapshot(`
    Object {
      "data": Object {
        "test": Object {
          "optionalPrimitives": null,
          "optionalPrimitivesList": Array [],
          "requiredPrimitives": Object {
            "requiredBoolValue": true,
            "requiredDoubleValue": 2.4,
            "requiredFixed32Value": 9,
            "requiredFixed64Value": "10",
            "requiredFloatValue": 3.5,
            "requiredInt32Value": 2,
            "requiredInt64Value": "4",
            "requiredSfixed32Value": 11,
            "requiredSfixed64Value": "12",
            "requiredSint32Value": 7,
            "requiredSint64Value": "8",
            "requiredStringValue": "foobar",
            "requiredUint32Value": 5,
            "requiredUint64Value": "6",
          },
          "requiredPrimitivesList": Array [],
        },
      },
    }
  `);
});
