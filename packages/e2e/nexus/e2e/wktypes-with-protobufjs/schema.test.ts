import { join } from "path";
import { readFile } from "fs/promises";
import { graphql } from "graphql";
import { schema } from "./schema";

it("generates GraphQL schema SDL", async () => {
  expect(await readFile(join(__dirname, "__generated__", "schema.graphql"), "utf-8")).toMatchInlineSnapshot(`
    "### This file was generated by Nexus Schema
    ### Do not make changes to this file directly


    \\"\\"\\"
    A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
    \\"\\"\\"
    scalar DateTime

    type Message {
      boolValue: Boolean
      boolValues: [Boolean!]
      doubleValue: Float
      doubleValues: [Float!]
      floatValue: Float
      floatValues: [Float!]
      int32Value: Int
      int32Values: [Int!]
      int64Value: String
      int64Values: [String!]

      \\"\\"\\"Required.\\"\\"\\"
      requiredTimestamp: DateTime!
      stringValue: String
      stringValues: [String!]
      timestamp: DateTime
      timestamps: [DateTime!]
      uint32Value: Int
      uint32Values: [Int!]
      uint64Value: String
      uint64Values: [String!]
    }

    input MessageInput {
      boolValue: Boolean
      boolValues: [Boolean!]
      doubleValue: Float
      doubleValues: [Float!]
      floatValue: Float
      floatValues: [Float!]
      int32Value: Int
      int32Values: [Int!]
      int64Value: String
      int64Values: [String!]

      \\"\\"\\"Required.\\"\\"\\"
      requiredTimestamp: DateTime!
      stringValue: String
      stringValues: [String!]
      timestamp: DateTime
      timestamps: [DateTime!]
      uint32Value: Int
      uint32Values: [Int!]
      uint64Value: String
      uint64Values: [String!]
    }

    type Query {
      test1: Message
      test2: Message
    }
    "
  `);
});

it("processes a query successfully", async () => {
  const resp = await graphql(
    schema,
    /* GraphQL */ `
      query Test {
        test1 {
          ...Message
        }
      }
      fragment Message on Message {
        timestamp
        int32Value
        int64Value
        uint32Value
        uint64Value
        floatValue
        doubleValue
        boolValue
        stringValue
      }
    `
  );
  expect(resp).toMatchInlineSnapshot(`
    Object {
      "data": Object {
        "test1": Object {
          "boolValue": true,
          "doubleValue": 2.4,
          "floatValue": 3.5,
          "int32Value": 2,
          "int64Value": "4",
          "stringValue": "foobar",
          "timestamp": 2020-12-28T06:42:05.453Z,
          "uint32Value": 5,
          "uint64Value": "6",
        },
      },
    }
  `);
});

it("processes a query successfully when returns message fields are null", async () => {
  const resp = await graphql(
    schema,
    /* GraphQL */ `
      query Test {
        test2 {
          ...Message
        }
      }
      fragment Message on Message {
        timestamp
        int32Value
        int64Value
        uint32Value
        uint64Value
        floatValue
        doubleValue
        boolValue
        stringValue
      }
    `
  );
  expect(resp).toMatchInlineSnapshot(`
    Object {
      "data": Object {
        "test2": Object {
          "boolValue": null,
          "doubleValue": null,
          "floatValue": null,
          "int32Value": null,
          "int64Value": null,
          "stringValue": null,
          "timestamp": null,
          "uint32Value": null,
          "uint64Value": null,
        },
      },
    }
  `);
});
