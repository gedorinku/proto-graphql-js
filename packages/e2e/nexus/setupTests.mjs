#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */

import { exec as _exec } from "child_process";
import { mkdir, readFile, rm, writeFile } from "fs/promises";
import { basename, join, relative } from "path";
import { promisify } from "util";

const exec = promisify(_exec);
const header = `// Code generated by ${basename(import.meta.url)}. DO NOT EDIT`;

/**
 * @param {{ path: String, include: String[] }} opts
 */
async function setupTest(opts) {
  const genDir = join(opts.path, "__generated__");
  await rm(genDir, { recursive: true });
  await mkdir(genDir);

  await writeFile(
    join(opts.path, "tsconfig.json"),
    `${header}\n${JSON.stringify(
      {
        extends: "../../tsconfig.base.json",
        include: [".", relative(opts.path, "./src"), ...opts.include.map((p) => relative(opts.path, p))],
      },
      undefined,
      2
    )}`,
    "utf-8"
  );

  await exec(
    `yarn ts-node --transpile-only --project ${join(opts.path, "tsconfig.json")} ${join(opts.path, "schema.ts")}`
  );
}

async function setupTests() {
  /** @type {{ tests: { path: String, include: String[] }[] }} */
  const config = JSON.parse(await readFile("tests.json", "utf-8"));

  await Promise.all(config.tests.map(setupTest));
  await writeFile(
    "tsconfig.json",
    `${header}\n${JSON.stringify(
      {
        files: [],
        references: config.tests.map((tt) => ({ path: tt.path })),
      },
      undefined,
      2
    )}`,
    "utf-8"
  );
}

async function setupProtoNexus() {
  await rm(join("e2e", "__generated__"), { recursive: true });
  await exec(`buf generate ${join("..", "..", "@testapis", "proto", "src")}`);
}

async function main() {
  await setupProtoNexus();
  await setupTests();
}

await main();
