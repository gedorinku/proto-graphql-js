/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { $$testapis$node$lib$$testapis$enums$testapi$enums$MessageWithEnums } from "./../../__generated__/nexus/protobufjs/testapis/enums/enums_pb_nexus"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MessageWithEnumsInput: { // input type
    optionalMyEnum?: NexusGenEnums['MyEnum'] | null; // MyEnum
    optionalMyEnums?: NexusGenEnums['MyEnum'][] | null; // [MyEnum!]
    optionalMyEnumWithoutUnspecified?: NexusGenEnums['MyEnumWithoutUnspecified'] | null; // MyEnumWithoutUnspecified
    optionalMyEnumWithoutUnspecifieds?: NexusGenEnums['MyEnumWithoutUnspecified'][] | null; // [MyEnumWithoutUnspecified!]
    requiredMyEnum: NexusGenEnums['MyEnum']; // MyEnum!
    requiredMyEnums: NexusGenEnums['MyEnum'][]; // [MyEnum!]!
    requiredMyEnumWithoutUnspecified: NexusGenEnums['MyEnumWithoutUnspecified']; // MyEnumWithoutUnspecified!
    requiredMyEnumWithoutUnspecifieds: NexusGenEnums['MyEnumWithoutUnspecified'][]; // [MyEnumWithoutUnspecified!]!
  }
}

export interface NexusGenEnums {
  MyEnum: 2 | 3 | 1
  MyEnumWithoutUnspecified: 1 | 2 | 0
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  MessageWithEnums: $$testapis$node$lib$$testapis$enums$testapi$enums$MessageWithEnums;
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  MessageWithEnums: { // field return type
    optionalMyEnum: NexusGenEnums['MyEnum'] | null; // MyEnum
    optionalMyEnums: NexusGenEnums['MyEnum'][] | null; // [MyEnum!]
    optionalMyEnumWithoutUnspecified: NexusGenEnums['MyEnumWithoutUnspecified'] | null; // MyEnumWithoutUnspecified
    optionalMyEnumWithoutUnspecifieds: NexusGenEnums['MyEnumWithoutUnspecified'][] | null; // [MyEnumWithoutUnspecified!]
    requiredMyEnum: NexusGenEnums['MyEnum']; // MyEnum!
    requiredMyEnums: NexusGenEnums['MyEnum'][]; // [MyEnum!]!
    requiredMyEnumWithoutUnspecified: NexusGenEnums['MyEnumWithoutUnspecified']; // MyEnumWithoutUnspecified!
    requiredMyEnumWithoutUnspecifieds: NexusGenEnums['MyEnumWithoutUnspecified'][]; // [MyEnumWithoutUnspecified!]!
  }
  Query: { // field return type
    test: NexusGenRootTypes['MessageWithEnums'] | null; // MessageWithEnums
  }
}

export interface NexusGenFieldTypeNames {
  MessageWithEnums: { // field return type name
    optionalMyEnum: 'MyEnum'
    optionalMyEnums: 'MyEnum'
    optionalMyEnumWithoutUnspecified: 'MyEnumWithoutUnspecified'
    optionalMyEnumWithoutUnspecifieds: 'MyEnumWithoutUnspecified'
    requiredMyEnum: 'MyEnum'
    requiredMyEnums: 'MyEnum'
    requiredMyEnumWithoutUnspecified: 'MyEnumWithoutUnspecified'
    requiredMyEnumWithoutUnspecifieds: 'MyEnumWithoutUnspecified'
  }
  Query: { // field return type name
    test: 'MessageWithEnums'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "MessageWithEnums";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}