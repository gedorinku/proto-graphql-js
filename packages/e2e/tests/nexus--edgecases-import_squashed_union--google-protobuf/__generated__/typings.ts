/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { $$testapis$node_native$lib$$testapis$edgecases$import_squashed_union$pkg1$types_pb$OneofMessage1 } from "./../../__generated__/nexus/google-protobuf/testapis/edgecases/import_squashed_union/pkg1/types_pb_nexus"
import type { $$testapis$node_native$lib$$testapis$edgecases$import_squashed_union$pkg2$types_pb$Message } from "./../../__generated__/nexus/google-protobuf/testapis/edgecases/import_squashed_union/pkg2/types_pb_nexus"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MessageInput: { // input type
    msg?: NexusGenInputs['SquashedOneofInput'] | null; // SquashedOneofInput
  }
  OneofMessage1Input: { // input type
    body: string; // String!
  }
  SquashedOneofInput: { // input type
    msg1?: NexusGenInputs['OneofMessage1Input'] | null; // OneofMessage1Input
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Message: $$testapis$node_native$lib$$testapis$edgecases$import_squashed_union$pkg2$types_pb$Message;
  OneofMessage1: $$testapis$node_native$lib$$testapis$edgecases$import_squashed_union$pkg1$types_pb$OneofMessage1;
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  SquashedOneof: NexusGenRootTypes['OneofMessage1'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Message: { // field return type
    msg: NexusGenRootTypes['SquashedOneof'] | null; // SquashedOneof
  }
  OneofMessage1: { // field return type
    body: string; // String!
  }
  Query: { // field return type
    test1: NexusGenRootTypes['Message'] | null; // Message
  }
}

export interface NexusGenFieldTypeNames {
  Message: { // field return type name
    msg: 'SquashedOneof'
  }
  OneofMessage1: { // field return type name
    body: 'String'
  }
  Query: { // field return type name
    test1: 'Message'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
  SquashedOneof: "OneofMessage1"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "Message" | "OneofMessage1";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}