/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { $$testapis$node$lib$$testapis$multipkgs$subpkg1$testapis$multipkgs$subpkg1$SubpkgMessage } from "./../../__generated__/nexus/protobufjs/testapis/multipkgs/subpkg1/types_pb_nexus"
import type { $$testapis$node$lib$$testapis$multipkgs$subpkg2$testapis$multipkgs$subpkg1$MessageWithSubpkg } from "./../../__generated__/nexus/protobufjs/testapis/multipkgs/subpkg2/types_pb_nexus"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MessageWithSubpkgInput: { // input type
    enum?: NexusGenEnums['SubpkgEnum'] | null; // SubpkgEnum
    message?: NexusGenInputs['SubpkgMessageInput'] | null; // SubpkgMessageInput
  }
  SubpkgMessageInput: { // input type
    body: string; // String!
  }
}

export interface NexusGenEnums {
  SubpkgEnum: 2 | 1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  MessageWithSubpkg: $$testapis$node$lib$$testapis$multipkgs$subpkg2$testapis$multipkgs$subpkg1$MessageWithSubpkg;
  Query: {};
  SubpkgMessage: $$testapis$node$lib$$testapis$multipkgs$subpkg1$testapis$multipkgs$subpkg1$SubpkgMessage;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  MessageWithSubpkg: { // field return type
    enum: NexusGenEnums['SubpkgEnum'] | null; // SubpkgEnum
    message: NexusGenRootTypes['SubpkgMessage'] | null; // SubpkgMessage
  }
  Query: { // field return type
    test1: NexusGenRootTypes['MessageWithSubpkg'] | null; // MessageWithSubpkg
  }
  SubpkgMessage: { // field return type
    body: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  MessageWithSubpkg: { // field return type name
    enum: 'SubpkgEnum'
    message: 'SubpkgMessage'
  }
  Query: { // field return type name
    test1: 'MessageWithSubpkg'
  }
  SubpkgMessage: { // field return type name
    body: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "MessageWithSubpkg" | "SubpkgMessage";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}