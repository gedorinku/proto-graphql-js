/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessage, $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessageNestedMessage } from "./../../__generated__/nexus/google-protobuf/testapis/nested/nested_pb_nexus"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ParentMessageInput: { // input type
    body: string; // String!
    nested?: NexusGenInputs['ParentMessageNestedMessageInput'] | null; // ParentMessageNestedMessageInput
    nestedEnum?: NexusGenEnums['ParentMessageNestedEnum'] | null; // ParentMessageNestedEnum
  }
  ParentMessageNestedMessageInput: { // input type
    nestedBody: string; // String!
  }
}

export interface NexusGenEnums {
  ParentMessageNestedEnum: 2 | 1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  ParentMessage: $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessage;
  ParentMessageNestedMessage: $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessageNestedMessage;
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  ParentMessage: { // field return type
    body: string; // String!
    nested: NexusGenRootTypes['ParentMessageNestedMessage'] | null; // ParentMessageNestedMessage
    nestedEnum: NexusGenEnums['ParentMessageNestedEnum'] | null; // ParentMessageNestedEnum
  }
  ParentMessageNestedMessage: { // field return type
    nestedBody: string; // String!
  }
  Query: { // field return type
    test1: NexusGenRootTypes['ParentMessage'] | null; // ParentMessage
  }
}

export interface NexusGenFieldTypeNames {
  ParentMessage: { // field return type name
    body: 'String'
    nested: 'ParentMessageNestedMessage'
    nestedEnum: 'ParentMessageNestedEnum'
  }
  ParentMessageNestedMessage: { // field return type name
    nestedBody: 'String'
  }
  Query: { // field return type name
    test1: 'ParentMessage'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "ParentMessage" | "ParentMessageNestedMessage";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}