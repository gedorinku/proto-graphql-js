// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import * as $$testapis$node_native$lib$$testapis$enums$enums_pb from "@testapis/node-native/lib//testapis/enums/enums_pb";
import * as nexus from "nexus";
import * as proto_nexus from "proto-nexus";
export type $$testapis$node_native$lib$$testapis$enums$enums_pb$MessageWithEnums = $$testapis$node_native$lib$$testapis$enums$enums_pb.MessageWithEnums;
export const MessageWithEnums = nexus.objectType({
    name: "MessageWithEnums",
    definition(t) {
        t.field("requiredMyEnum", {
            type: nexus.nonNull("MyEnum"),
            description: "Required.",
            resolve(root) {
                const value = root.getRequiredMyEnum();
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                if (value === $$testapis$node_native$lib$$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                    throw new Error("requiredMyEnum is required field. But got unspecified.");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnum", {
            type: nexus.nullable("MyEnum"),
            description: "Optional.",
            resolve(root) {
                const value = root.getOptionalMyEnum();
                if (value == null) {
                    return null;
                }
                if (value === $$testapis$node_native$lib$$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnumWithoutUnspecified", {
            type: nexus.nonNull("MyEnumWithoutUnspecified"),
            description: "Required.",
            resolve(root) {
                const value = root.getRequiredMyEnumWithoutUnspecified();
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum_without_unspecified"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnumWithoutUnspecified", {
            type: nexus.nullable("MyEnumWithoutUnspecified"),
            description: "Optional.",
            resolve(root) {
                const value = root.getOptionalMyEnumWithoutUnspecified();
                if (value == null) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum_without_unspecified"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnums", {
            type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnum"))),
            description: "Required.",
            resolve(root) {
                const value = root.getRequiredMyEnumsList();
                return value.map(item => {
                    if (item === $$testapis$node_native$lib$$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error("requiredMyEnums is required field. But got unspecified.");
                    }
                    return item;
                });
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enums"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnums", {
            type: nexus.nullable(nexus.list(nexus.nonNull("MyEnum"))),
            description: "Optional.",
            resolve(root) {
                const value = root.getOptionalMyEnumsList();
                return value.map(item => {
                    if (item === $$testapis$node_native$lib$$testapis$enums$enums_pb.MyEnum.MY_ENUM_UNSPECIFIED) {
                        throw new Error("optionalMyEnums is required field. But got unspecified.");
                    }
                    return item;
                });
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enums"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnumWithoutUnspecifieds", {
            type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
            description: "Required.",
            resolve(root) {
                const value = root.getRequiredMyEnumWithoutUnspecifiedsList();
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum_without_unspecifieds"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnumWithoutUnspecifieds", {
            type: nexus.nullable(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
            description: "Optional.",
            resolve(root) {
                const value = root.getOptionalMyEnumWithoutUnspecifiedsList();
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum_without_unspecifieds"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node_native$lib$$testapis$enums$enums_pb.MessageWithEnums;
    },
    sourceType: { module: __filename, export: "$$testapis$node_native$lib$$testapis$enums$enums_pb$MessageWithEnums" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapi.enums.MessageWithEnums",
                name: "MessageWithEnums",
                package: "testapi.enums"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const MessageWithEnumsInput = Object.assign(nexus.inputObjectType({
    name: "MessageWithEnumsInput",
    definition(t) {
        t.field("requiredMyEnum", {
            type: nexus.nonNull("MyEnum"),
            description: "Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnum", {
            type: nexus.nullable("MyEnum"),
            description: "Optional.",
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnumWithoutUnspecified", {
            type: nexus.nonNull("MyEnumWithoutUnspecified"),
            description: "Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum_without_unspecified"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnumWithoutUnspecified", {
            type: nexus.nullable("MyEnumWithoutUnspecified"),
            description: "Optional.",
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum_without_unspecified"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnums", {
            type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnum"))),
            description: "Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enums"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnums", {
            type: nexus.nullable(nexus.list(nexus.nonNull("MyEnum"))),
            description: "Optional.",
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enums"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredMyEnumWithoutUnspecifieds", {
            type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
            description: "Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_my_enum_without_unspecifieds"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("optionalMyEnumWithoutUnspecifieds", {
            type: nexus.nullable(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
            description: "Optional.",
            extensions: {
                ...({
                    protobufField: {
                        name: "optional_my_enum_without_unspecifieds"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapi.enums.MessageWithEnums",
            name: "MessageWithEnums",
            package: "testapi.enums"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["MessageWithEnumsInput"]): $$testapis$node_native$lib$$testapis$enums$enums_pb.MessageWithEnums => {
        const output = new $$testapis$node_native$lib$$testapis$enums$enums_pb.MessageWithEnums();
        output.setRequiredMyEnum(input.requiredMyEnum);
        if (input.optionalMyEnum != null) {
            output.setOptionalMyEnum(input.optionalMyEnum);
        }
        output.setRequiredMyEnumWithoutUnspecified(input.requiredMyEnumWithoutUnspecified);
        if (input.optionalMyEnumWithoutUnspecified != null) {
            output.setOptionalMyEnumWithoutUnspecified(input.optionalMyEnumWithoutUnspecified);
        }
        output.setRequiredMyEnumsList(input.requiredMyEnums.map(v => v));
        if (input.optionalMyEnums != null) {
            output.setOptionalMyEnumsList(input.optionalMyEnums.map(v => v));
        }
        output.setRequiredMyEnumWithoutUnspecifiedsList(input.requiredMyEnumWithoutUnspecifieds.map(v => v));
        if (input.optionalMyEnumWithoutUnspecifieds != null) {
            output.setOptionalMyEnumWithoutUnspecifiedsList(input.optionalMyEnumWithoutUnspecifieds.map(v => v));
        }
        return output;
    },
    _protoNexus: {
        fields: {
            requiredMyEnum: {
                type: nexus.nonNull("MyEnum"),
                description: "Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_my_enum"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            optionalMyEnum: {
                type: nexus.nullable("MyEnum"),
                description: "Optional.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "optional_my_enum"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            requiredMyEnumWithoutUnspecified: {
                type: nexus.nonNull("MyEnumWithoutUnspecified"),
                description: "Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_my_enum_without_unspecified"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            optionalMyEnumWithoutUnspecified: {
                type: nexus.nullable("MyEnumWithoutUnspecified"),
                description: "Optional.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "optional_my_enum_without_unspecified"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            requiredMyEnums: {
                type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnum"))),
                description: "Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_my_enums"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            optionalMyEnums: {
                type: nexus.nullable(nexus.list(nexus.nonNull("MyEnum"))),
                description: "Optional.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "optional_my_enums"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            requiredMyEnumWithoutUnspecifieds: {
                type: nexus.nonNull(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
                description: "Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_my_enum_without_unspecifieds"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            optionalMyEnumWithoutUnspecifieds: {
                type: nexus.nullable(nexus.list(nexus.nonNull("MyEnumWithoutUnspecified"))),
                description: "Optional.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "optional_my_enum_without_unspecifieds"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const MyEnum = nexus.enumType({
    name: "MyEnum",
    members: [
        {
            name: "FOO",
            value: 1,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_FOO"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "BAR",
            description: "This is Bar.",
            value: 2,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_BAR"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "BAZ",
            value: 3,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_BAZ"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        }
    ],
    extensions: {
        ...({
            protobufEnum: {
                name: "MyEnum",
                fullName: "testapi.enums.MyEnum",
                package: "testapi.enums"
            }
        } as proto_nexus.ProtobufEnumExtensions)
    }
});
export const MyEnumWithoutUnspecified = nexus.enumType({
    name: "MyEnumWithoutUnspecified",
    members: [
        {
            name: "FOO",
            value: 0,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "BAR",
            value: 1,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "BAZ",
            value: 2,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        }
    ],
    extensions: {
        ...({
            protobufEnum: {
                name: "MyEnumWithoutUnspecified",
                fullName: "testapi.enums.MyEnumWithoutUnspecified",
                package: "testapi.enums"
            }
        } as proto_nexus.ProtobufEnumExtensions)
    }
});
