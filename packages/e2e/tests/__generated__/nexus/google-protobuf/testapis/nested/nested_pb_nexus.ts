// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import * as $$testapis$node_native$lib$$testapis$nested$nested_pb from "@testapis/node-native/lib//testapis/nested/nested_pb";
import * as nexus from "nexus";
import * as proto_nexus from "proto-nexus";
export type $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessage = $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage;
export type $$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessageNestedMessage = $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage.NestedMessage;
export const ParentMessage = nexus.objectType({
    name: "ParentMessage",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.getBody();
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("nested", {
            type: nexus.nullable("ParentMessageNestedMessage"),
            resolve(root) {
                const value = root.getNested();
                if (value == null) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "nested"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("nestedEnum", {
            type: nexus.nullable("ParentMessageNestedEnum"),
            resolve(root) {
                const value = root.getNestedEnum();
                if (value == null) {
                    return null;
                }
                if (value === $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "nested_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage;
    },
    sourceType: { module: __filename, export: "$$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.nested.ParentMessage",
                name: "ParentMessage",
                package: "testapis.nested"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const ParentMessageNestedMessage = nexus.objectType({
    name: "ParentMessageNestedMessage",
    definition(t) {
        t.field("nestedBody", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.getNestedBody();
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "nested_body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage.NestedMessage;
    },
    sourceType: { module: __filename, export: "$$testapis$node_native$lib$$testapis$nested$nested_pb$ParentMessageNestedMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.nested.ParentMessage.NestedMessage",
                name: "NestedMessage",
                package: "testapis.nested"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const ParentMessageInput = Object.assign(nexus.inputObjectType({
    name: "ParentMessageInput",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("nested", {
            type: nexus.nullable("ParentMessageNestedMessageInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "nested"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("nestedEnum", {
            type: nexus.nullable("ParentMessageNestedEnum"),
            extensions: {
                ...({
                    protobufField: {
                        name: "nested_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.nested.ParentMessage",
            name: "ParentMessage",
            package: "testapis.nested"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["ParentMessageInput"]): $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage => {
        const output = new $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage();
        output.setBody(input.body);
        if (input.nested != null) {
            output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
        }
        if (input.nestedEnum != null) {
            output.setNestedEnum(input.nestedEnum);
        }
        return output;
    },
    _protoNexus: {
        fields: {
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            nested: {
                type: nexus.nullable("ParentMessageNestedMessageInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "nested"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            nestedEnum: {
                type: nexus.nullable("ParentMessageNestedEnum"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "nested_enum"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const ParentMessageNestedMessageInput = Object.assign(nexus.inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition(t) {
        t.field("nestedBody", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "nested_body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.nested.ParentMessage.NestedMessage",
            name: "NestedMessage",
            package: "testapis.nested"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"]): $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage.NestedMessage => {
        const output = new $$testapis$node_native$lib$$testapis$nested$nested_pb.ParentMessage.NestedMessage();
        output.setNestedBody(input.nestedBody);
        return output;
    },
    _protoNexus: {
        fields: {
            nestedBody: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "nested_body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const ParentMessageNestedEnum = nexus.enumType({
    name: "ParentMessageNestedEnum",
    members: [
        {
            name: "FOO",
            value: 1,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "FOO"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "BAR",
            value: 2,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "BAR"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        }
    ],
    extensions: {
        ...({
            protobufEnum: {
                name: "NestedEnum",
                fullName: "testapis.nested.ParentMessage.NestedEnum",
                package: "testapis.nested"
            }
        } as proto_nexus.ProtobufEnumExtensions)
    }
});
