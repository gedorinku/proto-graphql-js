// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import * as $$testapis$node$lib$$testapis$field_behavior from "@testapis/node/lib//testapis/field_behavior";
import * as nexus from "nexus";
import * as proto_nexus from "proto-nexus";
export type $$testapis$node$lib$$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessage = $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage;
export type $$testapis$node$lib$$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessagePost = $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post;
export const FieldBehaviorComentsMessage = nexus.objectType({
    name: "FieldBehaviorComentsMessage",
    definition(t) {
        t.field("requiredField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePost"),
            description: "Required.",
            resolve(root) {
                const value = root.requiredField;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredOutputOnlyField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePost"),
            description: "Required. Output only.",
            resolve(root) {
                const value = root.requiredOutputOnlyField;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "required_output_only_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("outputOnlyRequiredField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePost"),
            description: "Output only. Required.",
            resolve(root) {
                const value = root.outputOnlyRequiredField;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "output_only_required_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("outputOnlyField", {
            type: nexus.nullable("FieldBehaviorComentsMessagePost"),
            description: "Output only.",
            resolve(root) {
                const value = root.outputOnlyField;
                if (value == null) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "output_only_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.deprecation.FieldBehaviorComentsMessage",
                name: "FieldBehaviorComentsMessage",
                package: "testapis.deprecation"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const FieldBehaviorComentsMessagePost = nexus.objectType({
    name: "FieldBehaviorComentsMessagePost",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$field_behavior$testapis$deprecation$FieldBehaviorComentsMessagePost" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.deprecation.FieldBehaviorComentsMessage.Post",
                name: "Post",
                package: "testapis.deprecation"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const FieldBehaviorComentsMessageInput = Object.assign(nexus.inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition(t) {
        t.field("requiredField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
            description: "Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("requiredInputOnlyField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
            description: "Required. Input only.",
            extensions: {
                ...({
                    protobufField: {
                        name: "required_input_only_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("inputOnlyRequiredField", {
            type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
            description: "Input only. Required.",
            extensions: {
                ...({
                    protobufField: {
                        name: "input_only_required_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("inputOnlyField", {
            type: nexus.nullable("FieldBehaviorComentsMessagePostInput"),
            description: "Input only.",
            extensions: {
                ...({
                    protobufField: {
                        name: "input_only_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.deprecation.FieldBehaviorComentsMessage",
            name: "FieldBehaviorComentsMessage",
            package: "testapis.deprecation"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"]): $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage => {
        const output = new $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage();
        output.requiredField = FieldBehaviorComentsMessagePostInput.toProto(input.requiredField);
        output.requiredInputOnlyField = FieldBehaviorComentsMessagePostInput.toProto(input.requiredInputOnlyField);
        output.inputOnlyRequiredField = FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyRequiredField);
        if (input.inputOnlyField != null) {
            output.inputOnlyField = FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField);
        }
        return output;
    },
    _protoNexus: {
        fields: {
            requiredField: {
                type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
                description: "Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            requiredInputOnlyField: {
                type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
                description: "Required. Input only.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "required_input_only_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            inputOnlyRequiredField: {
                type: nexus.nonNull("FieldBehaviorComentsMessagePostInput"),
                description: "Input only. Required.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "input_only_required_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            inputOnlyField: {
                type: nexus.nullable("FieldBehaviorComentsMessagePostInput"),
                description: "Input only.",
                extensions: {
                    ...({
                        protobufField: {
                            name: "input_only_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const FieldBehaviorComentsMessagePostInput = Object.assign(nexus.inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.deprecation.FieldBehaviorComentsMessage.Post",
            name: "Post",
            package: "testapis.deprecation"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"]): $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post => {
        const output = new $$testapis$node$lib$$testapis$field_behavior.testapis.deprecation.FieldBehaviorComentsMessage.Post();
        output.body = input.body;
        return output;
    },
    _protoNexus: {
        fields: {
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
