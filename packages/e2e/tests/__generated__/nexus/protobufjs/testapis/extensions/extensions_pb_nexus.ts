// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import * as $$testapis$node$lib$$testapis$extensions from "@testapis/node/lib//testapis/extensions";
import * as nexus from "nexus";
import * as proto_nexus from "proto-nexus";
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage = $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage;
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage = $$testapis$node$lib$$testapis$extensions.testapis.extensions.MessageWillRename;
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage = $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2 = $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored = $$testapis$node$lib$$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
export type $$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixInterfaceMessage = $$testapis$node$lib$$testapis$extensions.testapis.extensions.InterfaceMessage;
export const TestPrefixPrefixedMessage = nexus.objectType({
    name: "TestPrefixPrefixedMessage",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            description: "Output only.",
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value.toString();
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("prefixedEnum", {
            type: nexus.nullable("TestPrefixPrefixedEnum"),
            resolve(root) {
                const value = root.prefixedEnum;
                if (value == null) {
                    return null;
                }
                if (value === $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
                    return null;
                }
                if (value === $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedEnum.PREFIXED_IGNORED) {
                    throw new Error("PREFIXED_IGNORED is ignored in GraphQL schema");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "prefixed_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("notIgnoredMessage", {
            type: nexus.nullable("TestPrefixIgnoredMessageNotIgnored"),
            resolve(root) {
                const value = root.notIgnoredMessage;
                if (value == null) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "not_ignored_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("squashedMessage", {
            type: nexus.nullable("TestPrefixPrefixedMessageSquashedMessage"),
            resolve(root) {
                const value = root.squashedMessage;
                if (value == null) {
                    return null;
                }
                if (value.oneofField) {
                    return value.oneofField;
                }
                if (value.oneofField_2) {
                    return value.oneofField_2;
                }
                return null;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "squashed_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("thisFieldWasRenamed", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.thisFieldWillBeRenamed;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "this_field_will_be_renamed"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("skipResolver", {
            type: nexus.nonNull("String"),
            resolve(root) {
                throw new Error("not implemented");
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "skip_resolver"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("squashedMessages", {
            type: nexus.nullable(nexus.list(nexus.nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
            resolve(root) {
                const value = root.squashedMessages;
                return value.map(item => {
                    if (item.oneofField) {
                        return item.oneofField;
                    }
                    if (item.oneofField_2) {
                        return item.oneofField_2;
                    }
                    throw "unreachable";
                });
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "squashed_messages"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("renamedMessage", {
            type: nexus.nullable("TestPrefixRenamedMessage"),
            resolve(root) {
                const value = root.renamedMessage;
                if (value == null) {
                    return null;
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "renamed_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("partialIgnoreOneof", {
            type: nexus.nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
            resolve(root) {
                if (root.oneofNotIgnoredField) {
                    return root.oneofNotIgnoredField;
                }
                return null;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "partial_ignore_oneof"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.PrefixedMessage",
                name: "PrefixedMessage",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixRenamedMessage = nexus.objectType({
    name: "TestPrefixRenamedMessage",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$extensions.testapis.extensions.MessageWillRename;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixRenamedMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.MessageWillRename",
                name: "MessageWillRename",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixPrefixedMessageInnerMessage = nexus.objectType({
    name: "TestPrefixPrefixedMessageInnerMessage",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value.toString();
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
                name: "InnerMessage",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixPrefixedMessageInnerMessage2 = nexus.objectType({
    name: "TestPrefixPrefixedMessageInnerMessage2",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value.toString();
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixPrefixedMessageInnerMessage2" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
                name: "InnerMessage2",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixIgnoredMessageNotIgnored = nexus.objectType({
    name: "TestPrefixIgnoredMessageNotIgnored",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.body;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value;
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    isTypeOf(data: unknown) {
        return data instanceof $$testapis$node$lib$$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored;
    },
    sourceType: { module: __filename, export: "$$testapis$node$lib$$testapis$extensions$testapis$extensions$TestPrefixIgnoredMessageNotIgnored" },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
                name: "NotIgnored",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixPrefixedMessageInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("prefixedEnum", {
            type: nexus.nullable("TestPrefixPrefixedEnum"),
            extensions: {
                ...({
                    protobufField: {
                        name: "prefixed_enum"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("notIgnoredMessage", {
            type: nexus.nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "not_ignored_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("squashedMessage", {
            type: nexus.nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "squashed_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("thisFieldWasRenamed", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "this_field_will_be_renamed"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("oneofNotIgnoredField", {
            type: nexus.nullable("TestPrefixPrefixedMessageInnerMessageInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "oneof_not_ignored_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("skipResolver", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "skip_resolver"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("squashedMessages", {
            type: nexus.nullable(nexus.list(nexus.nonNull("TestPrefixPrefixedMessageSquashedMessageInput"))),
            extensions: {
                ...({
                    protobufField: {
                        name: "squashed_messages"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("renamedMessage", {
            type: nexus.nullable("TestPrefixRenamedMessageInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "renamed_message"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.PrefixedMessage",
            name: "PrefixedMessage",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage();
        output.body = input.body;
        if (input.prefixedEnum != null) {
            output.prefixedEnum = input.prefixedEnum;
        }
        if (input.notIgnoredMessage != null) {
            output.notIgnoredMessage = TestPrefixIgnoredMessageNotIgnoredInput.toProto(input.notIgnoredMessage);
        }
        if (input.squashedMessage != null) {
            output.squashedMessage = TestPrefixPrefixedMessageSquashedMessageInput.toProto(input.squashedMessage);
        }
        output.thisFieldWillBeRenamed = input.thisFieldWasRenamed;
        if (input.oneofNotIgnoredField != null) {
            output.oneofNotIgnoredField = TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofNotIgnoredField);
        }
        output.skipResolver = input.skipResolver;
        if (input.squashedMessages != null) {
            output.squashedMessages = input.squashedMessages.map(v => TestPrefixPrefixedMessageSquashedMessageInput.toProto(v));
        }
        if (input.renamedMessage != null) {
            output.renamedMessage = TestPrefixRenamedMessageInput.toProto(input.renamedMessage);
        }
        return output;
    },
    _protoNexus: {
        fields: {
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            prefixedEnum: {
                type: nexus.nullable("TestPrefixPrefixedEnum"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "prefixed_enum"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            notIgnoredMessage: {
                type: nexus.nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "not_ignored_message"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            squashedMessage: {
                type: nexus.nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "squashed_message"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            thisFieldWasRenamed: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "this_field_will_be_renamed"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            oneofNotIgnoredField: {
                type: nexus.nullable("TestPrefixPrefixedMessageInnerMessageInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "oneof_not_ignored_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            skipResolver: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "skip_resolver"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            squashedMessages: {
                type: nexus.nullable(nexus.list(nexus.nonNull("TestPrefixPrefixedMessageSquashedMessageInput"))),
                extensions: {
                    ...({
                        protobufField: {
                            name: "squashed_messages"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            renamedMessage: {
                type: nexus.nullable("TestPrefixRenamedMessageInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "renamed_message"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixRenamedMessageInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.MessageWillRename",
            name: "MessageWillRename",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.MessageWillRename => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.MessageWillRename();
        output.body = input.body;
        return output;
    },
    _protoNexus: {
        fields: {
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixInterfaceMessageInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.InterfaceMessage",
            name: "InterfaceMessage",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.InterfaceMessage => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.InterfaceMessage();
        output.id = proto_nexus.stringToNumber(input.id);
        return output;
    },
    _protoNexus: {
        fields: {
            id: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "id"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            name: "InnerMessage",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage();
        output.id = proto_nexus.stringToNumber(input.id);
        output.body = input.body;
        return output;
    },
    _protoNexus: {
        fields: {
            id: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "id"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(nexus.inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            name: "InnerMessage2",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2 => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.InnerMessage2();
        output.id = proto_nexus.stringToNumber(input.id);
        output.body = input.body;
        return output;
    },
    _protoNexus: {
        fields: {
            id: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "id"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition(t) {
        t.field("oneofField", {
            type: nexus.nullable("TestPrefixPrefixedMessageInnerMessageInput"),
            extensions: {
                ...({
                    protobufField: {
                        name: "oneof_field"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
        t.field("oneofField2", {
            type: nexus.nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
            extensions: {
                ...({
                    protobufField: {
                        name: "oneof_field_2"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
            name: "SquashedMessage",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.PrefixedMessage.SquashedMessage();
        if (input.oneofField != null) {
            output.oneofField = TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField);
        }
        if (input.oneofField2 != null) {
            output.oneofField_2 = TestPrefixPrefixedMessageInnerMessage2Input.toProto(input.oneofField2);
        }
        return output;
    },
    _protoNexus: {
        fields: {
            oneofField: {
                type: nexus.nullable("TestPrefixPrefixedMessageInnerMessageInput"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "oneof_field"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            },
            oneofField2: {
                type: nexus.nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "oneof_field_2"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(nexus.inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition(t) {
        t.field("body", {
            type: nexus.nonNull("String"),
            extensions: {
                ...({
                    protobufField: {
                        name: "body"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        protobufMessage: {
            fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            name: "NotIgnored",
            package: "testapis.extensions"
        }
    }
}), {
    toProto: (input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"]): $$testapis$node$lib$$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored => {
        const output = new $$testapis$node$lib$$testapis$extensions.testapis.extensions.IgnoredMessage.NotIgnored();
        output.body = input.body;
        return output;
    },
    _protoNexus: {
        fields: {
            body: {
                type: nexus.nonNull("String"),
                extensions: {
                    ...({
                        protobufField: {
                            name: "body"
                        }
                    } as proto_nexus.ProtobufFieldExtensions)
                }
            }
        }
    }
});
export const TestPrefixInterfaceMessage = nexus.interfaceType({
    name: "TestPrefixInterfaceMessage",
    definition(t) {
        t.field("id", {
            type: nexus.nonNull("String"),
            resolve(root) {
                const value = root.id;
                if (value == null) {
                    throw new Error("Cannot return null for non-nullable field");
                }
                return value.toString();
            },
            extensions: {
                ...({
                    protobufField: {
                        name: "id"
                    }
                } as proto_nexus.ProtobufFieldExtensions)
            }
        });
    },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.InterfaceMessage",
                name: "InterfaceMessage",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixPrefixedMessageSquashedMessage = nexus.unionType({
    name: "TestPrefixPrefixedMessageSquashedMessage",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage, TestPrefixPrefixedMessageInnerMessage2);
    },
    extensions: {
        ...({
            protobufMessage: {
                fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
                name: "SquashedMessage",
                package: "testapis.extensions",
                fields: [
                    {
                        name: "oneof_field",
                        type: "testapis.extensions.PrefixedMessage.InnerMessage"
                    },
                    {
                        name: "oneof_field_2",
                        type: "testapis.extensions.PrefixedMessage.InnerMessage2"
                    }
                ]
            }
        } as proto_nexus.ProtobufMessageExtensions)
    }
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = nexus.unionType({
    name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
    definition(t) {
        t.members(TestPrefixPrefixedMessageInnerMessage);
    },
    extensions: {
        ...({
            protobufOneof: {
                fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
                name: "partial_ignore_oneof",
                messageName: "PrefixedMessage",
                package: "testapis.extensions",
                fields: [
                    {
                        name: "oneof_not_ignored_field",
                        type: "testapis.extensions.PrefixedMessage.InnerMessage"
                    },
                    {
                        name: "oneof_ignored_field",
                        type: "testapis.extensions.PrefixedMessage.InnerMessage2"
                    }
                ]
            }
        } as proto_nexus.ProtobufOneofExtensions)
    }
});
export const TestPrefixPrefixedEnum = nexus.enumType({
    name: "TestPrefixPrefixedEnum",
    members: [
        {
            name: "PREFIXED_FOO",
            value: 1,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "PREFIXED_FOO"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "PREFIXED_BAR",
            value: 2,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "PREFIXED_BAR"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        }
    ],
    extensions: {
        ...({
            protobufEnum: {
                name: "PrefixedEnum",
                fullName: "testapis.extensions.PrefixedEnum",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufEnumExtensions)
    }
});
export const TestPrefixInterfaceMessageType = nexus.enumType({
    name: "TestPrefixInterfaceMessageType",
    members: [
        {
            name: "INNER",
            value: 1,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "INNER"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        },
        {
            name: "INNER2",
            value: 2,
            extensions: {
                ...({
                    protobufEnumValue: {
                        name: "INNER2"
                    }
                } as proto_nexus.ProtobufEnumValueExtensions)
            }
        }
    ],
    extensions: {
        ...({
            protobufEnum: {
                name: "Type",
                fullName: "testapis.extensions.InterfaceMessage.Type",
                package: "testapis.extensions"
            }
        } as proto_nexus.ProtobufEnumExtensions)
    }
});
