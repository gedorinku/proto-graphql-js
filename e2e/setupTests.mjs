#!/usr/bin/env node

import { mkdir, readFile, rm, writeFile } from "fs/promises";
import { basename, join } from "path";

const header = `// Code generated by ${basename(
  import.meta.url
)}. DO NOT EDIT.`;
const testsDir = "tests";

/**
 * @typedef {"google-protobuf" | "protobufjs" | "ts-proto" | "ts-proto-with-forcelong-number"} ProtoLib
 * @typedef {"nexus" | "pothos"} Plugin
 *
 * @typedef TestCase
 * @property {Plugin} target
 * @property {{ package: String, lib: ProtoLib }}  proto
 */

/** @param {TestCase} test */
function getTestName(test) {
  return [
    test.target,
    test.proto.package.replace("/", "-"),
    test.proto.lib,
  ].join("--");
}

/** @param {TestCase} test */
function getTestPath(test) {
  return `${testsDir}/${getTestName(test)}`;
}

/** @param {TestCase} test */
async function genPackageJson(test) {
  const protoPackages = {
    "google-protobuf": [
      "@testapis/node-native",
      "@proto-nexus/google-protobuf",
      "proto-nexus",
      "protoc-gen-nexus",
    ],
    protobufjs: [
      "@testapis/node",
      "@proto-nexus/protobufjs",
      "protoc-gen-nexus",
      "proto-nexus",
    ],
    "ts-proto": ["@testapis/ts-proto", "protoc-gen-pothos"],
    "ts-proto-with-forcelong-number": [
      "@testapis/ts-proto-with-forcelong-number",
      "protoc-gen-pothos",
    ],
  };

  const rootDir = join("..", "..", "..");
  const bufDir = join(rootDir, "packages", "@testapis", "proto", "src");
  const protoPath = join(bufDir, "testapis", test.proto.package);

  const packageJson = {
    name: `@proto-graphql/e2e-${getTestName(test)}`,
    version: "0.1.0",
    description: `E2E tests for protoc-gen-${test.target}`,
    private: true,
    scripts: {
      "test:e2e": ["gen", "jest", "schema", "typecheck"]
        .map((t) => `yarn test:e2e:${t}`)
        .join(" && "),
      "test:e2e:gen": [
        "rm -rf __generated__",
        ...["proto", "gql"].map((t) => `yarn test:e2e:gen:${t}`),
      ].join(" && "),
      "test:e2e:gen:gql":
        "ts-node --transpile-only --require tsconfig-paths/register --project tsconfig.json schema.ts",
      "test:e2e:gen:proto": `buf generate --template buf.gen.json --path ${protoPath} ${bufDir}`,
      "test:e2e:jest": "jest --passWithNoTests",
      "test:e2e:schema": "git diff --exit-code __generated__/schema.graphql",
      "test:e2e:typecheck": "tsc --build tsconfig.json",
    },
    devDependencies: Object.fromEntries(
      ["@proto-graphql/e2e-helper", ...protoPackages[test.proto.lib]]
        .sort()
        .map((pkg) => [pkg, "*"])
    ),
    jest: {
      preset: "ts-jest",
      testEnvironment: "node",
    },
  };

  await writeFile(
    join(getTestPath(test), "package.json"),
    JSON.stringify(packageJson, undefined, 2),
    "utf-8"
  );
}

/** @param {TestCase} test */
async function genTsconfig(test) {
  const tsconfig = {
    extends: "../../../tsconfig.base.json",
    compilerOptions: {
      baseUrl: ".",
      noEmit: true,
    },
    include: ["."],
  };

  await writeFile(
    join(getTestPath(test), "tsconfig.json"),
    `${header}\n${JSON.stringify(tsconfig, undefined, 2)}`,
    "utf-8"
  );
}

/** @param {TestCase} test */
async function genBufGemTemplate(test) {
  const genDir = join("__generated__", "schema");

  await rm(genDir, { recursive: true, force: true });
  await mkdir(genDir, { recursive: true });

  const pluginOpts = {
    nexus: {
      protobufjs: ["use_protobufjs", "import_prefix=@testapis/node/lib/"],
      "google-protobuf": ["import_prefix=@testapis/node-native/lib/"],
    },
    pothos: {
      "ts-proto": [
        "import_prefix=@testapis/ts-proto/lib/",
        "pothos_builder_path=../../builder",
      ],
      "ts-proto-with-forcelong-number": [
        "import_prefix=@testapis/ts-proto-with-forcelong-number/lib/",
        "pothos_builder_path=../../builder",
        "long_number=Int",
      ],
    },
  };

  const tmpl = {
    version: "v1",
    plugins: [
      {
        name: test.target,
        path: `../../..//packages/protoc-gen-${test.target}/bin/protoc-gen-${test.target}`,
        out: genDir,
        opt: pluginOpts[test.target][test.proto.lib],
      },
    ],
  };

  await writeFile(
    join(getTestPath(test), "buf.gen.json"),
    JSON.stringify(tmpl, undefined, 2),
    "utf-8"
  );
}

async function main() {
  /** @type {TestCase[]} */
  const config = JSON.parse(await readFile("tests.json", "utf-8"));

  await Promise.all([
    ...config.tests.map(genPackageJson),
    ...config.tests.map(genTsconfig),
    ...config.tests.map(genBufGemTemplate),
  ]);
}

await main();
